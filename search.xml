<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>부트스트랩 개요</title>
    <url>/2021/04/01/bootstrap-overview/</url>
    <content><![CDATA[<p><em><strong>Bootstrap</strong></em></p>
<ol>
<li>Bootstrap.css를 불러오고 해당 파일에 정의된 버튼, 레이아웃 등을 가져와서 사용</li>
<li>클래스로 간단하게 가져와 사용 가능</li>
<li>트위터에서 개발</li>
</ol>
<a id="more"></a>

<h2 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h2><p><a href="https://www.bootstrapcdn.com/">https://www.bootstrapcdn.com/</a> 에 들어가 CDN 주소를 복사해 작업하는 파일에 적용한다. 따로 스타일을 작성하지 않아도 부트스트랩이 제공하는 클래스를 적용하면 그대로 반영이 된다. 다운받아 사용 가능.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>버튼<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger&quot;</span>&gt;</span>버튼<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="3와-4의-차이"><a href="#3와-4의-차이" class="headerlink" title="3와 4의 차이"></a>3와 4의 차이</h2><ul>
<li>CSS와 화면 그리드에서 px에서 em으로 단위 변경</li>
<li>IE8 이하 버전 지원 종료</li>
</ul>
<h2 id="3을-쓰는-이유"><a href="#3을-쓰는-이유" class="headerlink" title="3을 쓰는 이유"></a>3을 쓰는 이유</h2><ul>
<li>관리자 페이지 템플릿</li>
<li>위지윅 에디터</li>
</ul>
<h2 id="레이아웃"><a href="#레이아웃" class="headerlink" title="레이아웃"></a>레이아웃</h2><p>한줄에 12개의 그리드가 있다.</p>
<table>
<thead>
<tr>
<th>화면 사이즈</th>
<th>표현</th>
</tr>
</thead>
<tbody><tr>
<td>768px보다 작을 때</td>
<td>col-xs</td>
</tr>
<tr>
<td>768px보다 클 때</td>
<td>col-sm</td>
</tr>
<tr>
<td>970px보다 클 때</td>
<td>col-md</td>
</tr>
<tr>
<td>1170px보다 클 때</td>
<td>col-lg</td>
</tr>
</tbody></table>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>패스트 캠퍼스 온라인 강의 Bootstrap _ 박준영 강사님</p>
</blockquote>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>bootstrap</category>
      </categories>
      <tags>
        <tag>bootstrap</tag>
        <tag>overview</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS BEM 방법론</title>
    <url>/2020/11/09/css-ben-methodology/</url>
    <content><![CDATA[<p>CSS 구조를 개선시키기 위한 CSS 개발 방법론은 여러가지가 있다. OOCSS, SMACSS, BEM 등이 있으며 BEM은 Block Element Modifier의 약자이다. BEM 방법론은 <strong>ID에는 사용할 수 없고, 오직 클래스명에만 활용할 수 있다</strong>. 필요하다면 클래스명은 BEM 방식의 이름을 여러번 반복하여 재사용할 수 있도록 한다.</p>
<a id="more"></a>

<h2 id="Block-전체를-감싸고-있는-블럭-요소"><a href="#Block-전체를-감싸고-있는-블럭-요소" class="headerlink" title="Block (전체를 감싸고 있는 블럭 요소)"></a>Block (전체를 감싸고 있는 블럭 요소)</h2><p>블럭(Block)은 문단 전체에 적용된 요소 또는 요소를 담고 있는 컨테이너를 말한다. 블럭 요소는 클래스의 어근을 형성하고 항상 맨 앞에 위치하도록 한다. 일단 블럭을 정의하고 블럭이 형성한 클래스의 어근을 맨 앞에 붙여 그 블럭이 포함하는 요소들의 클래스명을 지으면 된다.</p>
<h2 id="Element"><a href="#Element" class="headerlink" title="Element"></a>Element</h2><p>요소(Element)는 블럭이 포함하고 있는 조각 하나이다. 블럭은 전체를 말하고, 요소들은 그 조각들을 일컫는다. <strong>각 요소는 두 개의 밑줄표시(underscore)로 연결하여 블럭 다음에 위치</strong> 시킨다. 두개의 밑줄 표시는 시각적으로 쉽고 빠르게 코드를 찾고 조작할 수 있도록 도와준다. 스타일시트와 HTML 역시 DRY(don’t repeat yourself)로 유지되어야 하기 때문에 클래스명은 간단하고 명확하며 정확하게 유지한다라는 것으로 너무 고민하지 않도록 한다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.block__element</span> &#123;property:value;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="modifiers"><a href="#modifiers" class="headerlink" title="modifiers"></a>modifiers</h2><p><code>modifier</code>은 블럭 또는 요소의 속성이다. 이 속성은 <strong>블럭 또는 요소의 외관이나 상태를 변화</strong> 시킨다. 클래스명을 지을 때의 목적은 해당 요소를 반복하여 재사용할 수 있게 하기 위함이다. 요소의 스타일이 같다면 사이트의 다른 영역이라고 할지라도 새로운 클래스를 정의할 필요가 없다. 특정 요소의 스타일을 수정할 필요가 있다면 <code>modifier</code>을 활용하면 된다. <strong>요소 또는 블럭 다음에 두개의 하이픈(<code>--</code>)을 추가하여 modifier을 표시</strong> 한다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.block--modifier</span> &#123;…&#125;</span><br><span class="line"><span class="selector-class">.blcok__element--modifier</span> &#123;…&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>모든 이름은 간단명료해야 하며 절대적으로 필요하지 않는 이상 추가적인 클래스를 만들거나 똑같은 스타일을 반복해서는 안 된다.</p>
</blockquote>
<h2 id="요점"><a href="#요점" class="headerlink" title="요점"></a>요점</h2><ul>
<li>HTML 마크업 모듈화 </li>
<li>block요소를 독립적이고, 재사용 가능한 모듈이라는 개념으로 접근 </li>
<li>prefix 붙여 일종의 네임스페이스개념으로 사용 </li>
<li>실제 서비스를 하면 HTML의 구조가 바뀌는 일이 다반사 </li>
<li>탐색레벨은 낮고 단순하게 유지하는 것이 유지보수하기 좋음 </li>
<li>쿼리를 단순하게 하기 위해 길고 유니크한 클래스명을 사용하는 것이 좋음</li>
</ul>
<h2 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h2><ul>
<li>class name 중복을 방지한다.</li>
<li>직관적이다.</li>
<li>전제 DOM tree 구조를 다시 볼 필요가 없다.</li>
<li>가독성이 좋고 어느 속성을 어느 위치에 넣을 것인지 고민할  필요가 없어진다.</li>
<li>diff할 때 가독성이 뛰어나다.</li>
<li>빌드시에 minify하는 전략에 효과적이다.</li>
</ul>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://webclub.tistory.com/263">https://webclub.tistory.com/263</a></p>
</blockquote>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>BEM</tag>
        <tag>methodology</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS box shadow</title>
    <url>/2020/12/10/css-box-shadow/</url>
    <content><![CDATA[<p><code>box-shadow</code> css 속성은 요소의 프레임 주위에 그림자 효과를 추가한다. 여러개의 효과를 쉼표로 추가하여 설정할 수 있다. <strong>X값, Y값, 블러, 번지는 정도, 색상</strong> 을 기재한다. 거의 모든 요소의 프레임에서 사용할 수 있으며, <code>border-radius</code>를 지정할 수 있다. 여러 개를 지정할 수 있고, 첫번째로 지정한 그림자가 제일 위에 있다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: <span class="number">3px</span> <span class="number">3px</span> red, -<span class="number">1em</span> <span class="number">0</span> .<span class="number">4em</span> teal;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="문법"><a href="#문법" class="headerlink" title="문법"></a>문법</h2><p>다음과 같이 지정할 수 있다.</p>
<ul>
<li>2 / 3 / 4개의 <code>&lt;length&gt;</code> 값<ul>
<li>값이 두개만 주어진 경우: <code>&lt;offset-x&gt;</code>, <code>&lt;offset-y&gt;</code></li>
<li>세번째 값: <code>&lt;blur-radius&gt;</code></li>
<li>네번째 값: <code>&lt;spread-radius&gt;</code></li>
</ul>
</li>
<li><code>inset</code>: 옵션갑</li>
<li><code>color</code>: 옵션값</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Keyword values */</span></span><br><span class="line"><span class="attribute">box-shadow</span>: none;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* offset-x | offset-y | color */</span></span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">60px</span> -<span class="number">16px</span> teal;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* offset-x | offset-y | blur-radius | color */</span></span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">5px</span> <span class="number">5px</span> black;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* offset-x | offset-y | blur-radius | spread-radius | color */</span></span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">2px</span> <span class="number">1px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* inset | offset-x | offset-y | color */</span></span><br><span class="line"><span class="attribute">box-shadow</span>: inset <span class="number">5em</span> <span class="number">1em</span> gold;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Any number of shadows, separated by commas */</span></span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">3px</span> <span class="number">3px</span> red, -<span class="number">1em</span> <span class="number">0</span> <span class="number">0.4em</span> olive;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Global keywords */</span></span><br><span class="line"><span class="attribute">box-shadow</span>: inherit;</span><br><span class="line"><span class="attribute">box-shadow</span>: initial;</span><br><span class="line"><span class="attribute">box-shadow</span>: unset;</span><br></pre></td></tr></table></figure>

<h3 id="값"><a href="#값" class="headerlink" title="값"></a>값</h3><p><em><strong>inset</strong></em></p>
<p>지정하지 않은 경우(기본값) 그림자는 드롭섀도우로 간주된다. <code>inset</code> 키워드는 프레임 내부로 그림자 방향을 변경한다.</p>
<p><em><strong>offset-x, offset-y</strong></em></p>
<p>그림자 오프셋을 설정하기 위한 <code>&lt;length&gt;</code> 값이다. <code>&lt;offset-x&gt;</code>은 수평 거리를 명시한다. 음의 값은 그림자를 요소의 왼쪽에 위치시킨다. <code>&lt;offset-y&gt;</code>는 수직 거리를 명시한다. 음의 값은 그림자를 요소의 위에 위치시킨다. 두 값이 모두 0인 경우, 그림자는 요소의 뒤에 배치된다.</p>
<p><em><strong>blur-radius</strong></em></p>
<p>세번째 값. 값이 클수록 흐릿해지고, 그림자가 더 커지고 가벼워진다. 음수값은 허용되지 않으며, 지정하지 않으면 0이 된다.</p>
<p><em><strong>spread-radius</strong></em></p>
<p>네번째 값. 양수 값은 그림자를 확장시키고 더 크게 늘린다. 음수 값은 수축시킨다. 지정하지 않으면 0이 된다.</p>
<p><em><strong>color</strong></em></p>
<p>지정되지 않은 경우, 사용되는 색상은 브라우저에 따라 달라진다. 일반적으로 색 속성 값이지만 사파리는 현재 투명한 그림자를 적용한다.</p>
<h3 id="보간"><a href="#보간" class="headerlink" title="보간"></a>보간</h3><p>목록의 각 그림자는 color와 x, y, blur 및 spread를 통해 보간된다. 각 그림자에 대해 여러 그림자가 모두 기재되어 있거나 기재되어 있지 않은 경우 보간된 그림자는 그 점에서 기재된 그림자와 일치되어야 한다.</p>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow">https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow</a></p>
</blockquote>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>box shadow</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 애니메이션</title>
    <url>/2020/11/28/css-animation/</url>
    <content><![CDATA[<p>애니메이션 속성은 콘텐츠를 움직이게 할 수 있으며, 애니메이션을 나타내는 CSS 스타일과 애니메이션의 중간 상태를 나타내는 키프레임들로 이루어진다. 움직이는 시간, 움직이는 방향, 움직이는 상태 등 여러가지 속성을 설정할 수 있다. </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">animation</span>: name | duration | timing-function | delay |</span><br><span class="line">iteration-count | direction | fill-mode | play-state</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="자바스크립트-애니메이션과의-차이점"><a href="#자바스크립트-애니메이션과의-차이점" class="headerlink" title="자바스크립트 애니메이션과의 차이점"></a>자바스크립트 애니메이션과의 차이점</h2><ol>
<li>자바스크립트를 모르더라도 간단하게 애니메이션을 만들 수 있다.</li>
<li>자바스크립트를 이용한 애니메이션은 잘 만들어졌더라도 성능이 좋지 못할 때가 있다. CSS 애니메이션은 frame-skipping 같은 여러 기술을 이용하여 최대한 부드럽게 렌더링된다.</li>
<li>브라우저는 애니메이션의 성능을 효율적으로 최적화할 수 있다.</li>
</ol>
<h2 id="속성"><a href="#속성" class="headerlink" title="속성"></a>속성</h2><table>
<thead>
<tr>
<th>속성값</th>
<th>설명</th>
</tr>
</thead>
<tbody><tr>
<td>name</td>
<td>애니메이션 keyframe 이름을 설정</td>
</tr>
<tr>
<td>duration</td>
<td>애니메이션 움직임 시간을 설정</td>
</tr>
<tr>
<td>timing-function</td>
<td>애니메이션 움직임 속도를 정의</td>
</tr>
<tr>
<td>delay</td>
<td>애니메이션이 로드된 후 애니메이션이 시작될 때 까지의 시간을 나타냄</td>
</tr>
<tr>
<td>iteration-count</td>
<td>애니메이션 반복 횟수 설정</td>
</tr>
<tr>
<td>direction</td>
<td>애니메이션 움직임 방향을 설정</td>
</tr>
<tr>
<td>fill-mode</td>
<td>애니메이션이 끝난 후의 상태를 설정</td>
</tr>
<tr>
<td>play-state</td>
<td>애니메이션 진행상태를 설정</td>
</tr>
</tbody></table>
<h2 id="키프레임"><a href="#키프레임" class="headerlink" title="키프레임"></a>키프레임</h2><p><code>@keyframes</code> 규칙을 이용해서 두개 이상의 중간 상태를 표현한다. 각 중간 상태는 특정 시점에 엘리먼트가 어떻게 보일지 나타낸다. CSS 스타일을 이용해 중간 상태에 어떻게 보일지 정의했다면 이 중간 상태가 전체 애니메이션에서 언제 등장할지 <code>&lt;percentage&gt;</code>를 이용해 지정한다. 이 두 시점은 기재되어야 브라우저가 언제 애니메이션이 시작되고 끝나는지 알 수 있다. 0%와 100% 대신 from과 to로 사용할 수도 있다.</p>
<hr>
<blockquote>
<p><strong>REFERENCE</strong></p>
</blockquote>
<ul>
<li><a href="https://webzz.tistory.com/365">https://webzz.tistory.com/365</a></li>
<li><a href="https://developer.mozilla.org/ko/docs/Web/CSS/CSS_Animations/Using_CSS_animations">https://developer.mozilla.org/ko/docs/Web/CSS/CSS_Animations/Using_CSS_animations</a></li>
</ul>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSS3</tag>
        <tag>animation</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 덜컥덜컥 누적 배치 변경 문제</title>
    <url>/2021/12/18/css-cumulative-layout-shift/</url>
    <content><![CDATA[<ul>
<li><p><code>CLS</code>는 구글 핵심 성능 지표에 포함되는 항목</p>
</li>
<li><p><code>lighthouse</code>: 크롬에 내장되어 있음</p>
</li>
<li><p>0.1 이내에 로드하는 것이 목표</p>
</li>
<li><p>돔이 뒤늦게 추가, 웹폰트가 뒤늦게 로딩되는 등의 이유로 레이아웃 배치가 변경됨.</p>
</li>
<li><p>FOIT: font of invisible text / 보이지 않다가 나타나는 현상</p>
</li>
<li><p>FOUT: font of unstyled text / 시스템 폰트에서 웹폰트로 변경되는 현상</p>
</li>
</ul>
<a id="more"></a>

<h2 id="CLS-유발-요인"><a href="#CLS-유발-요인" class="headerlink" title="CLS 유발 요인"></a>CLS 유발 요인</h2><ul>
<li>첫 페인팅 이후 뷰포트 안에서 배치가 바뀌는 상황<ul>
<li>치수를 알 수 없는 이미지 로딩.</li>
<li>동적으로 추가된 DOM.</li>
<li>웹폰트 swap 페인팅.</li>
</ul>
</li>
</ul>
<h2 id="CLS-확인"><a href="#CLS-확인" class="headerlink" title="CLS 확인"></a>CLS 확인</h2><ul>
<li>동적으로 추가하는 콘텐츠에 자리 표시자 제공</li>
<li>이미지/영상 요소에 비율 힌트 제공</li>
<li>애니메이션 적용시 transform 사용 (width, height X)</li>
</ul>
<h3 id="이미지-영상-비율-힌트-제공하기"><a href="#이미지-영상-비율-힌트-제공하기" class="headerlink" title="이미지/영상 비율 힌트 제공하기"></a>이미지/영상 비율 힌트 제공하기</h3><p><strong>첫번째</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> <span class="attr">width</span>=<span class="string">&quot;800&quot;</span> <span class="attr">height</span>=<span class="string">&quot;534&quot;</span> <span class="attr">alt</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">height</span>: auto;</span><br></pre></td></tr></table></figure>

<p><strong>두번째</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">aspect-ratio: <span class="number">800</span>/<span class="number">534</span>; <span class="comment">/* check caniuse */</span></span><br></pre></td></tr></table></figure>

<p><strong>세번째</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.utube</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">56.25%</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.utube__ifram</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="자리-표시자"><a href="#자리-표시자" class="headerlink" title="자리 표시자"></a>자리 표시자</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.hero_banner</span> &#123;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background</span>: silver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="웹폰트-대체-글꼴"><a href="#웹폰트-대체-글꼴" class="headerlink" title="웹폰트 대체 글꼴"></a>웹폰트 대체 글꼴</h3><ul>
<li>웹폰트와 최대한 비슷한 대체 글꼴 지정</li>
</ul>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>패스트 캠퍼스 The RED : 견고한 UI 설계를 위한 마크업 가이드 _ 정찬명 강사님</p>
</blockquote>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>the red</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 애니메이션 01</title>
    <url>/2020/12/05/css-exercise001/</url>
    <content><![CDATA[<p>CSS3(keyframes, transform, translate, animation)을 이용한 Bar Animation Effect.</p>
<a id="more"></a>

<img src="https://mjae404.github.io/images/css-animation01.gif" alt="css bar animation">

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* CSS */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, <span class="number">#ff758c</span> <span class="number">0%</span>, <span class="number">#ff7eb3</span> <span class="number">100%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bar</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">animation</span>: bar <span class="number">2s</span> ease-in-out <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> bar &#123;</span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">25%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">50%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">180deg</span>);</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="number">100</span> % &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">180deg</span>);</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://www.youtube.com/watch?v=S_McuIdsU0Y">https://www.youtube.com/watch?v=S_McuIdsU0Y</a></p>
</blockquote>
]]></content>
      <categories>
        <category>exercise</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSS3</tag>
        <tag>exercise</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 박스모델</title>
    <url>/2020/10/31/css-boxmodel/</url>
    <content><![CDATA[<p>모든 HTML 요소는 Box 형태의 영역을 가지고 있다. Content, Padding, Border, Margin으로 구성되어 있으며 브라우저는 박스 모델 크기(dimension)와 프로퍼티(색, 배경, 모양 등) 위치를 근거로 렌더링한다. <strong>모든 박스모델 관련 프로퍼티는 상속되지 않는다.</strong></p>
<a id="more"></a>

<p><img src="/images/css3-box-model.jpg" alt="CSS3 BOX MODEL"></p>
<p><em><strong>Box 모델을 구성하는 Content, Padding, Border, Margin</strong></em></p>
<table>
<thead>
<tr>
<th>명칭</th>
<th>설명</th>
</tr>
</thead>
<tbody><tr>
<td>Content</td>
<td>요소의 텍스트나 이미지 등 실제 내용이 위치하는 영역.</td>
</tr>
<tr>
<td>Padding</td>
<td>Border 안쪽에 위치하는 요소의 내부 여백 영역.</td>
</tr>
<tr>
<td>Border</td>
<td>테두리 영역으로 border의 프로퍼티 값은 테두리 두께를 의미한다.</td>
</tr>
<tr>
<td>Margin</td>
<td>Border 바깥에 위치하는 요소의 외부 여백 영역. 배경색을 지정할 수 없다.</td>
</tr>
</tbody></table>
<h2 id="width-height-프로퍼티"><a href="#width-height-프로퍼티" class="headerlink" title="width / height 프로퍼티"></a>width / height 프로퍼티</h2><ul>
<li>요소의 너비와 높이를 지정하기 위해 사용된다. 이때 지정되는 요소의 너비와 요소는 Contents 영역을 대상으로 한다.</li>
<li>지정한 영역보다 실제 내용물이 더 크다면 넘치게 된다.</li>
<li><code>overflow: hidden;</code>을 지정하면 넘친 콘텐츠를 감출 수 있다.</li>
<li>width와 height 프로퍼티의 초기값은 <code>auto</code>이다. 상황에 따라 브라우저가 적당한 width와 height 값을 계산한다.</li>
<li>명시적으로 높이나 너비값을 지정하기 위해서는 px, % 등의 크기단위를 사용한다.</li>
</ul>
<h2 id="margin-padding-프로퍼티"><a href="#margin-padding-프로퍼티" class="headerlink" title="margin / padding 프로퍼티"></a>margin / padding 프로퍼티</h2><ul>
<li>top, right, left, bottom 4개의 방향에 대해서 지정할 수 있다.</li>
<li>margin 프로퍼티에 <code>auto</code> 키워드를 설정하면 해당 요소를 브라우저 중앙에 위치시킬 수 있다.</li>
<li>브라우저의 너비보다 요소가 더 크면 스크롤바가 생성되기 때문에 <code>max-width</code> 프로퍼티를 사용할 수 있다. 이 프로퍼티를 사용하게 되면브라우저 너비가 요소의 너비보다 좁아질 때 자동으로 요소의 너비가 줄어든다. (<code>min-width</code>: 요소 너비의 최소값 지정)</li>
</ul>
<h2 id="border-프로퍼티"><a href="#border-프로퍼티" class="headerlink" title="border 프로퍼티"></a>border 프로퍼티</h2><h3 id="border-style"><a href="#border-style" class="headerlink" title="border-style"></a>border-style</h3><p>테두리선 스타일을 지정한다. 프로퍼티 값의 갯수에 따라 top, right, left, bottom에 지정 가능하다.</p>
<blockquote>
<p>dotted, dashed, solid, double, groove, ridge, inset, outset, none, hidden</p>
</blockquote>
<h3 id="border-width"><a href="#border-width" class="headerlink" title="border-width"></a>border-width</h3><p>테두리의 두께를 지정한다. 프로퍼티 값의 갯수에 따라 top, right, left, bottom에 지정 가능하다. <code>border-style</code>과 함께 사용하지 않으면 적용되지 않는다.</p>
<h3 id="border-color"><a href="#border-color" class="headerlink" title="border-color"></a>border-color</h3><p>테두리의 색상을 지정한다. 프로퍼티 값의 갯수에 따라 top, right, left, bottom에 지정 가능하다. <code>border-style</code>과 함께 사용하지 않으면 적용되지 않는다.</p>
<h3 id="border-radius"><a href="#border-radius" class="headerlink" title="border-radius"></a>border-radius</h3><p>테두리 모서리를 둥글게 표현하도록 지정한다. 값의 길이를 나타내는 단위(px, em 등)와 %를 사용한다. 각각의 모서리에 개별로 지정할 수도 있고, 한번에 지정할 수도 있다. 타원형도 가능하다.</p>
<p><em><strong>각각의 모서리에 타원형 둥근 모서리 축약 설정</strong></em></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.border-rounded</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50px</span> <span class="number">50px</span> <span class="number">0</span> <span class="number">0</span> / <span class="number">25px</span> <span class="number">25px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/css3-border-radius.jpg" alt="각각의 모서리에 타원형 둥근 모서리 축약 설정"></p>
<h3 id="border"><a href="#border" class="headerlink" title="border"></a>border</h3><p><code>border-width</code>, <code>border-style</code>, <code>border-color</code>를 한번에 설정하기 위한 shorthand 프로퍼티이다.</p>
<h2 id="box-sizing-프로퍼티"><a href="#box-sizing-프로퍼티" class="headerlink" title="box-sizing 프로퍼티"></a>box-sizing 프로퍼티</h2><p>width, height 프로퍼티의 대상 영역을 변경할 수 있다. 기본값은 content-box이다. box-sizing 프로퍼티는 상속되지 않는다.</p>
<table>
<thead>
<tr>
<th>키워드</th>
<th>설명</th>
</tr>
</thead>
<tbody><tr>
<td>content-box</td>
<td>width, height 프로퍼티 값은 content 영역을 의미한다. (기본값)</td>
</tr>
<tr>
<td>border-box</td>
<td>width, height 프로퍼티 값은 content 영역, padding, border가 포함된 값을 의미한다.</td>
</tr>
</tbody></table>
<blockquote>
<p>box-sizing 프로퍼티는 <strong>상속되지 않으므로</strong> box-sizing 프로퍼티를 사용하도록 하려면 아래와 같이 정의하여야 한다.</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line">*, *:before, *:after &#123;</span><br><span class="line">  box-sizing: inherit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://poiemaweb.com/css3-box-model">https://poiemaweb.com/css3-box-model</a></p>
</blockquote>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSS3</tag>
        <tag>box model</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 애니메이션 02</title>
    <url>/2020/12/06/css-exercise002/</url>
    <content><![CDATA[<p>CSS3(keyframes, transform, translate, animation)을 이용한 Dot Animation Effect.</p>
<a id="more"></a>

<img src="https://mjae404.github.io/images/css-animation02.gif" alt="css dot animation">

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* css */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to top, <span class="number">#a18cd1</span> <span class="number">0%</span>, <span class="number">#fbc2eb</span> <span class="number">100%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.loading</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">    <span class="attribute">animation</span>: loading ease-in-out <span class="number">2s</span> <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.loading</span> <span class="selector-class">.circle1</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.loading</span> <span class="selector-class">.circle2</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> loading &#123;</span><br><span class="line">    <span class="number">0%</span> &#123;<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);&#125;</span><br><span class="line">    <span class="number">100%</span> &#123;<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loading&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://www.youtube.com/watch?v=mIW-htccaoo">https://www.youtube.com/watch?v=mIW-htccaoo</a></p>
</blockquote>
]]></content>
      <categories>
        <category>exercise</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSS3</tag>
        <tag>exercise</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 애니메이션 03</title>
    <url>/2020/12/12/css-exercise003/</url>
    <content><![CDATA[<p>CSS3(keyframes, transform, translate, animation)을 이용한 wave Animation Effect.</p>
<a id="more"></a>

<img src="https://mjae404.github.io/images/css-animation03.gif" alt="css wave animation">

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* css */</span></span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">120deg</span>, <span class="number">#d4fc79</span> <span class="number">0%</span>, <span class="number">#96e6a1</span> <span class="number">100%</span>);</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.circle</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5px</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">animation</span>: spin <span class="number">1s</span> linear infinite;</span><br><span class="line">    <span class="attribute">transform-origin</span>:top center ; <span class="comment">/* transform의 방향 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.row</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex</span>:<span class="number">0</span> <span class="number">1</span> <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> spin &#123;</span><br><span class="line">    <span class="number">0%</span> &#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">0</span>)<span class="built_in">scale</span>(<span class="number">1.1</span>);&#125;</span><br><span class="line">    <span class="number">50%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">180deg</span>)<span class="built_in">scale</span>(<span class="number">0.9</span>);&#125;</span><br><span class="line">    <span class="number">100%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">360deg</span>)<span class="built_in">scale</span>(<span class="number">1.1</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.row</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) <span class="selector-class">.circle</span> &#123;<span class="attribute">animation-delay</span>: <span class="number">100ms</span>;&#125;</span><br><span class="line"><span class="selector-class">.row</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) <span class="selector-class">.circle</span> &#123;<span class="attribute">animation-delay</span>: <span class="number">200ms</span>;&#125;</span><br><span class="line"><span class="selector-class">.row</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) <span class="selector-class">.circle</span> &#123;<span class="attribute">animation-delay</span>: <span class="number">300ms</span>;&#125;</span><br><span class="line"><span class="selector-class">.row</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>) <span class="selector-class">.circle</span> &#123;<span class="attribute">animation-delay</span>: <span class="number">400ms</span>;&#125;</span><br><span class="line"><span class="selector-class">.row</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>) <span class="selector-class">.circle</span> &#123;<span class="attribute">animation-delay</span>: <span class="number">500ms</span>;&#125;</span><br><span class="line"><span class="selector-class">.row</span><span class="selector-pseudo">:nth-child</span>(<span class="number">6</span>) <span class="selector-class">.circle</span> &#123;<span class="attribute">animation-delay</span>: <span class="number">600ms</span>;&#125;</span><br><span class="line"><span class="selector-class">.row</span><span class="selector-pseudo">:nth-child</span>(<span class="number">7</span>) <span class="selector-class">.circle</span> &#123;<span class="attribute">animation-delay</span>: <span class="number">700ms</span>;&#125;</span><br><span class="line"><span class="selector-class">.row</span><span class="selector-pseudo">:nth-child</span>(<span class="number">8</span>) <span class="selector-class">.circle</span> &#123;<span class="attribute">animation-delay</span>: <span class="number">800ms</span>;&#125;</span><br><span class="line"><span class="selector-class">.row</span><span class="selector-pseudo">:nth-child</span>(<span class="number">9</span>) <span class="selector-class">.circle</span> &#123;<span class="attribute">animation-delay</span>: <span class="number">900ms</span>;&#125;</span><br><span class="line"><span class="selector-class">.row</span><span class="selector-pseudo">:nth-child</span>(<span class="number">10</span>) <span class="selector-class">.circle</span> &#123;<span class="attribute">animation-delay</span>: <span class="number">1000ms</span>;&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circles&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://www.youtube.com/watch?v=PbTGBsxSsaU">https://www.youtube.com/watch?v=PbTGBsxSsaU</a></p>
</blockquote>
]]></content>
      <categories>
        <category>exercise</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSS3</tag>
        <tag>exercise</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 애니메이션 04</title>
    <url>/2020/12/13/css-exercise004/</url>
    <content><![CDATA[<p>CSS3(keyframes, transform, translate, animation)을 이용한 tail Animation Effect.</p>
<a id="more"></a>

<img src="https://mjae404.github.io/images/css-animation04.gif" alt="css tail animation">

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* CSS */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, <span class="number">#fa709a</span> <span class="number">0%</span>, <span class="number">#fee140</span> <span class="number">100%</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.circle</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">animation</span>: movex <span class="number">1s</span> ease-in-out alternate infinite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.circle</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">50px</span>; </span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">animation</span>: movey <span class="number">1s</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.circle</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>) &gt; <span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.8</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.circle</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">3</span>) &gt; <span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.circle</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">4</span>) &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.circle</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">5</span>) &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.circle</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>),</span><br><span class="line"><span class="selector-class">.circle</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>) &gt; <span class="selector-tag">div</span> &#123;<span class="attribute">animation-delay</span>:<span class="number">0.1s</span>;&#125;</span><br><span class="line"><span class="selector-class">.circle</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">3</span>),</span><br><span class="line"><span class="selector-class">.circle</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">3</span>) &gt; <span class="selector-tag">div</span> &#123;<span class="attribute">animation-delay</span>:<span class="number">0.2s</span>;&#125;</span><br><span class="line"><span class="selector-class">.circle</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">4</span>),</span><br><span class="line"><span class="selector-class">.circle</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">4</span>) &gt; <span class="selector-tag">div</span> &#123;<span class="attribute">animation-delay</span>:<span class="number">0.3s</span>;&#125;</span><br><span class="line"><span class="selector-class">.circle</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">5</span>),</span><br><span class="line"><span class="selector-class">.circle</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">5</span>) &gt; <span class="selector-tag">div</span> &#123;<span class="attribute">animation-delay</span>:<span class="number">0.4s</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> movex &#123;</span><br><span class="line">    <span class="number">0%</span> &#123;<span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">100px</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="number">100%</span> &#123;<span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">100px</span>, <span class="number">0</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> movey &#123;</span><br><span class="line">    <span class="number">0%</span> &#123;<span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="number">25%</span> &#123;<span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0</span>, -<span class="number">100px</span>);&#125;</span><br><span class="line">    <span class="number">50%</span> &#123;<span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0</span>, <span class="number">0</span>);<span class="attribute">border-radius</span>: <span class="number">0%</span>;&#125;</span><br><span class="line">    <span class="number">75%</span> &#123;<span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0</span>, <span class="number">100px</span>);&#125;</span><br><span class="line">    <span class="number">100%</span> &#123;<span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0</span>, <span class="number">0</span>);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong></p>
</blockquote>
<p><a href="https://www.youtube.com/watch?v=EPVBNAYmAyA&amp;t=247s">https://www.youtube.com/watch?v=EPVBNAYmAyA&amp;t=247s</a></p>
]]></content>
      <categories>
        <category>exercise</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSS3</tag>
        <tag>exercise</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 애니메이션 05</title>
    <url>/2022/03/04/css-exercise005/</url>
    <content><![CDATA[<p>거울 반사 효과.</p>
<a id="more"></a>

<img src="https://mjae404.github.io/images/css-animation05.gif" alt="css reflection animation">

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(cyan, darkblue);</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>; <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: arial;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">  <span class="attribute">letter-spacing</span>: -<span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">attr</span>(data-text);</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">43px</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">180deg</span>);</span><br><span class="line">  <span class="attribute">transform-origin</span>: bottom;</span><br><span class="line">  <span class="attribute">background</span>:</span><br><span class="line">          <span class="built_in">linear-gradient</span>(to top,</span><br><span class="line">          <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>),</span><br><span class="line">          <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>) <span class="number">23px</span>,</span><br><span class="line">          <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.8</span>) <span class="number">23px</span>,</span><br><span class="line">          <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.3</span>) <span class="number">50%</span>,</span><br><span class="line">          <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>) <span class="number">80%</span>);</span><br><span class="line">  -webkit-<span class="attribute">background-clip</span>: text;</span><br><span class="line">  <span class="attribute">color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">letter-spacing</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-text</span>=<span class="string">&quot;MJAEDOT&quot;</span>&gt;</span>MJAEDOT<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://www.youtube.com/watch?v=C_FBiumn3dk">https://www.youtube.com/watch?v=C_FBiumn3dk</a></p>
</blockquote>
]]></content>
      <categories>
        <category>exercise</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSS3</tag>
        <tag>exercise</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 필터</title>
    <url>/2020/11/05/css-filter/</url>
    <content><![CDATA[<p>filter 속성은 흐림 효과, 색상 변형 등 이미지 비주얼 효과를 정의한다. CSS 표준은 미리 정의된 효과를 내는 몇가지 함수를 포함하고 있으며, SVG 필터 요소에 대한 URL 참조를 사용하여 SVG 필터를 적용할 수도 있다. <code>hue-rotate()</code>는 0deg-360deg까지 표현한다.</p>
<a id="more"></a>

<table>
<thead>
<tr>
<th>특징</th>
<th>설명</th>
</tr>
</thead>
<tbody><tr>
<td>기본값</td>
<td>filter: none</td>
</tr>
<tr>
<td>상속</td>
<td>안됨</td>
</tr>
<tr>
<td>애니메이션</td>
<td>안됨</td>
</tr>
<tr>
<td>적용</td>
<td>─</td>
</tr>
<tr>
<td>버전</td>
<td>CSS3</td>
</tr>
</tbody></table>
<h2 id="문법"><a href="#문법" class="headerlink" title="문법"></a>문법</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">filter</span> :</span><br><span class="line">none | <span class="built_in">blur</span>() | <span class="built_in">brightness</span>() | <span class="built_in">contrast</span>() | <span class="built_in">drop-shadow</span>() | <span class="built_in">grayscale</span>() |</span><br><span class="line"><span class="built_in">hue-rotate</span>() | <span class="built_in">invert</span>() | <span class="built_in">opacity</span>() | <span class="built_in">saturate</span>() | <span class="built_in">sepia</span>() | <span class="built_in">url</span>()</span><br></pre></td></tr></table></figure>


<h2 id="속성"><a href="#속성" class="headerlink" title="속성"></a>속성</h2><table>
<thead>
<tr>
<th>속성값</th>
<th>설명</th>
</tr>
</thead>
<tbody><tr>
<td>none</td>
<td>아무런 효과를 주지 않는다.</td>
</tr>
<tr>
<td>blur(px)</td>
<td>이미지의 블러 효과 설정</td>
</tr>
<tr>
<td>brightness(%)</td>
<td>이미지의 밝고 어두움 정도를 설정</td>
</tr>
<tr>
<td>contrast(%)</td>
<td>이미지의 대비를 설정</td>
</tr>
<tr>
<td>drop-shadow()</td>
<td>이미지의 그림자를 설정</td>
</tr>
<tr>
<td>grayscale(%)</td>
<td>이미지의 그레이스케일을 설정</td>
</tr>
<tr>
<td>hue-rotate(deg)</td>
<td>이미지의 색조를 설정</td>
</tr>
<tr>
<td>invert(%)</td>
<td>이미지를 반전</td>
</tr>
<tr>
<td>opacity(%)</td>
<td>이미지의 투명도를 설정</td>
</tr>
<tr>
<td>saturate(%)</td>
<td>이미지의 채도를 설정</td>
</tr>
<tr>
<td>sepia(%)</td>
<td>이미지의 세피아 효과를 설정</td>
</tr>
<tr>
<td>url()</td>
<td>이미지의 경로를 설정</td>
</tr>
<tr>
<td>inherit</td>
<td>filter의 속성 값을 상위요소한테 상속받는다.</td>
</tr>
</tbody></table>
<h3 id="속성-조합"><a href="#속성-조합" class="headerlink" title="속성 조합"></a>속성 조합</h3><p>여러 개의 속성을 조합하여 랜더링을 조작할 수 있다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 이미지의 대비와 밝기를 높인다</span><br><span class="line"><span class="attribute">filter</span>: <span class="built_in">contrast</span>(<span class="number">175%</span>) <span class="built_in">brightness</span>(<span class="number">103%</span>);</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong></p>
</blockquote>
<ul>
<li><a href="https://webzz.tistory.com/444">https://webzz.tistory.com/444</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/filter">https://developer.mozilla.org/en-US/docs/Web/CSS/filter</a></li>
</ul>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSS3</tag>
        <tag>filter</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS로 그리기</title>
    <url>/2021/12/15/css-drawing/</url>
    <content><![CDATA[<h2 id="삼각형으로-그리기"><a href="#삼각형으로-그리기" class="headerlink" title="삼각형으로 그리기"></a>삼각형으로 그리기</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">40px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-left-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h2 id="꺽쇠-화살표-만들기"><a href="#꺽쇠-화살표-만들기" class="headerlink" title="꺽쇠, 화살표 만들기"></a>꺽쇠, 화살표 만들기</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">9px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid red;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-right</span>: -;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">45deg</span>);</span><br><span class="line">    <span class="attribute">transform-origin</span>: <span class="number">25%</span> <span class="number">25%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="스피너-만들기"><a href="#스피너-만들기" class="headerlink" title="스피너 만들기"></a>스피너 만들기</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.spinner</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">8px</span> solid silver;</span><br><span class="line">    <span class="attribute">border-top-color</span>: transparent;</span><br><span class="line">    <span class="attribute">animation</span>: spin <span class="number">1s</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframs</span> spin &#123;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="격자-배경-만들기"><a href="#격자-배경-만들기" class="headerlink" title="격자 배경 만들기"></a>격자 배경 만들기</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>:</span><br><span class="line">        <span class="built_in">linear-gradient</span>(to bottom, transparent <span class="number">47px</span>, sliver <span class="number">47px</span>) <span class="number">0</span> <span class="number">0</span> / <span class="number">100vw</span> <span class="number">48px</span> repeat-y,</span><br><span class="line">        <span class="built_in">linear-gradient</span>(to bottom, transparent <span class="number">47px</span>, sliver <span class="number">47px</span>) <span class="number">0</span> <span class="number">0</span> / <span class="number">48px</span> <span class="number">100vh</span> repeat-x</span><br><span class="line">        black; // 색상 값을 가장 마지막에 작성해야 함</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="체커-배경-만들기"><a href="#체커-배경-만들기" class="headerlink" title="체커 배경 만들기"></a>체커 배경 만들기</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>:</span><br><span class="line">        <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, sliver <span class="number">25%</span>, transparent <span class="number">25%</span>),</span><br><span class="line">        <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, transparent <span class="number">75%</span>, sliver <span class="number">25%</span>),</span><br><span class="line">        <span class="built_in">linear-gradient</span>(-<span class="number">45deg</span>, sliver <span class="number">25%</span>, transparent <span class="number">25%</span>),</span><br><span class="line">        <span class="built_in">linear-gradient</span>(-<span class="number">45deg</span>, transparent <span class="number">75%</span>, sliver <span class="number">75%</span>)</span><br><span class="line">    background-size: <span class="number">20px</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0</span>, -<span class="number">10px</span> <span class="number">10px</span>, <span class="number">0</span> -<span class="number">10px</span>, <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="햄버거-아이콘-만들기"><a href="#햄버거-아이콘-만들기" class="headerlink" title="햄버거 아이콘 만들기"></a>햄버거 아이콘 만들기</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;nav_button&quot;</span>&gt;</span>메뉴 열기<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.navBtn</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">48px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">48px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background</span>: lightgray;</span><br><span class="line">    <span class="attribute">color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.navBtn</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.navBtn</span><span class="selector-pseudo">::after</span> &#123; </span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>; </span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.navBtn</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">background</span>: black;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">0</span> black, <span class="number">0</span> <span class="number">16px</span> <span class="number">0</span> black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.navBtn</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> white;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>패스트 캠퍼스 The RED : 견고한 UI 설계를 위한 마크업 가이드 _ 정찬명 강사님</p>
</blockquote>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>the red</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS flex</title>
    <url>/2021/12/13/css-flex-1/</url>
    <content><![CDATA[<h2 id="flex-item"><a href="#flex-item" class="headerlink" title="flex item"></a>flex item</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.flex-item &#123;</span><br><span class="line">    flex: 0 1 auto; &#x2F;* 팽창지수 + 수축지수 + 기준크기 *&#x2F;</span><br><span class="line">    flex-grow: 0; &#x2F;* 팽창지수 *&#x2F;</span><br><span class="line">    flex-shrink: 1; &#x2F;* 수축지수 *&#x2F;</span><br><span class="line">    flex-basis: auto; &#x2F;* 기준 크기 *&#x2F;</span><br><span class="line">    align-self: auto; &#x2F;* 독립적 교차축 정렬*&#x2F;</span><br><span class="line">    order: 0; &#x2F;* 배치 정렬 *&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="free-space-FS"><a href="#free-space-FS" class="headerlink" title="free space (FS)"></a>free space (FS)</h2><ul>
<li>플렉스 아이템이 점유하는 영역(flex-basis, width, height, padding, border, margin)을 제외하고 남은 공간을 프리 스페이스라고 부른다.</li>
<li>0, 양수, 음수 프리 스페이스가 발생할 수 있다.</li>
<li>프리 스페이스는 플렉스 아이템의 팽창 지수(flex-grow)와 수축 지수(flex-shrink)를 이용하여 플렉스 아이템으로 분배할 수 있다.</li>
</ul>
<h2 id="플렉스-아이템의-팽창과-수축"><a href="#플렉스-아이템의-팽창과-수축" class="headerlink" title="플렉스 아이템의 팽창과 수축"></a>플렉스 아이템의 팽창과 수축</h2><h3 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h3><ul>
<li>양의 FS 발생시 플렉스 아이템의 팽창을 제어한다.</li>
<li>값: <code>&lt;number&gt;</code></li>
<li>음수 사용 불가. 보통 ‘0’ 또는 ‘1’을 사용.</li>
<li>초기값: 0</li>
<li>단축 속성에서 생략하면 ‘1’이 됨.</li>
<li>비율을 다르게 할 수도 있음. (첫번째 1, 두번째 2이면 1:2로 진행됨)</li>
</ul>
<h3 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h3><ul>
<li>음의 FS 발생시 플렉스 아이템의 수축을 제어한다.</li>
<li>값: <code>&lt;number&gt;</code></li>
<li>음수 사용 불가. 보통 ‘0’ 또는 ‘1’을 사용.</li>
<li>초기값: 1</li>
<li>단축 속성에서 생략하면 ‘1’이 됨.</li>
<li>비율을 다르게 할 수도 있음. (첫번째 1, 두번째 2이면 2:1로 진행됨)</li>
</ul>
<h3 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h3><ul>
<li>플렉스 아이템의 진행 방향 기본 크기를 설정함으로써 FS 초기 값에 영향을 준다.</li>
<li>값: content | <code>&lt;width&gt;</code><ul>
<li>팽창, 수축하기 이전의 기본 크기</li>
</ul>
</li>
<li>초기값: auto<ul>
<li>content 또는 width 값이 적용됨.</li>
<li>단축 속성에서 생략하면 초기 값이 ‘0’이 된다.</li>
</ul>
</li>
</ul>
<h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><ul>
<li>플렉스 아이탬의 ‘팽창, 수축, 기본 크기’를 제어하는 단축 속성</li>
<li>값: <code>none</code> |[&lt;<code>flex-grow</code>&gt; &lt;<code>flex-shrink</code>&gt;? || &lt;<code>flex-basis</code>&gt;]</li>
<li>초기값: 0 1 auto</li>
</ul>
<h3 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h3><ul>
<li>플렉스 아이템의 진행방향과 줄바꿈 단축</li>
<li>값 &lt;<code>flex-direction</code>&gt; || &lt;<code>flex-wrap</code>&gt;</li>
<li>초기값: row nowrap</li>
</ul>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>패스트 캠퍼스 The RED : 견고한 UI 설계를 위한 마크업 가이드 _ 정찬명 강사님</p>
</blockquote>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>the red</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS grid</title>
    <url>/2021/12/14/css-grid-1/</url>
    <content><![CDATA[<ul>
<li>격자를 이용하여 내용의 크기와 위치를 제어하는 방법.</li>
<li>두개의 축을 이용.</li>
<li>셀병합 기능 제공</li>
<li>짧은 코드로 자유도 높은 배치 구현</li>
</ul>
<a id="more"></a>

<ol>
<li>grid: 트랙의 수와 크기, 컨테이너에 적용.</li>
</ol>
<ul>
<li>grid-template</li>
<li>grid-template-row(행 트랙의 수량과 크기)</li>
<li>grid-template-columns(열 트랙의 수량과 크기)</li>
<li>grid-template-areas(셀이름 명시)</li>
<li>grid-auto-flow(흐름의 방향과 밀집)</li>
<li>grid-auto-rows(암시적 행 트랙의 크기)</li>
<li>grid-auto-columns(암시적 열 트랙의 크기)</li>
</ul>
<ol start="2">
<li>grid-area: 아이템의 배치와 병합, 아이템에 적용.</li>
</ol>
<ul>
<li>grid-row</li>
<li>grid-row-start (행시작)</li>
<li>grid-row-end (행끝)</li>
<li>grid-column</li>
<li>grid-column-start (열시작)</li>
<li>grid-column-end (열끝)</li>
</ul>
<h2 id="Grid-용어"><a href="#Grid-용어" class="headerlink" title="Grid 용어"></a>Grid 용어</h2><ul>
<li>grid container</li>
<li>grid item</li>
<li>grid line</li>
<li>grid track</li>
<li>grid cell, grid area</li>
<li>gap</li>
</ul>
<h3 id="명시적-그리드"><a href="#명시적-그리드" class="headerlink" title="명시적 그리드"></a>명시적 그리드</h3><ul>
<li>트랙의 크기와 수량을 분명하게 선언한 그리드 <code>grid-template-rows/columns/areas</code> 속성으로 제어.</li>
</ul>
<h3 id="암시적-그리드"><a href="#암시적-그리드" class="headerlink" title="암시적 그리드"></a>암시적 그리드</h3><ul>
<li>명시적 그리드 외부에 배치되어 <code>grid-auto-flow/rows/columns</code> 속성으로 흐름 방향과 크기를 결정하는 그리드.</li>
</ul>
<h2 id="grid-track-생성"><a href="#grid-track-생성" class="headerlink" title="grid track 생성"></a>grid track 생성</h2><h3 id="균등"><a href="#균등" class="headerlink" title="균등"></a>균등</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid: <span class="string">&#x27;. . .&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>그리드 컨테이너와 3열 익명 트랙 단축 문법. 마침표(.)와 공백( ) 구분자로 익명셀을 생성. 셀 크기는 내용에 따라 자동. 트랙의 크기를 제어하지 않기 때문에 실무에서 유용하지 않음.</p>
<h3 id="제어"><a href="#제어" class="headerlink" title="제어"></a>제어</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid: <span class="number">80px</span> <span class="number">1</span>fr / <span class="number">120px</span> <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2열 2행 트랙 단축 문법. 트랙의 크기와 수량을 명시적으로 제어. 실무에서 가장 빈번하게 사용하는 패턴. 명시적으로 선언하지 않는 나머지 트랙은 자동.</p>
<h3 id="반복"><a href="#반복" class="headerlink" title="반복"></a>반복</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: grid;</span><br><span class="line">grid: auto / <span class="number">40px</span> <span class="number">1</span>fr <span class="number">2</span>fr <span class="number">1</span>fr <span class="number">2</span>fr;</span><br><span class="line">grid: auto / <span class="number">40px</span> repeat (<span class="number">2</span>, <span class="number">1</span>fr <span class="number">2</span>fr);</span><br></pre></td></tr></table></figure>
<ul>
<li>auto 값으로 트랙의 크기 임의 지정 가능. <code>repeat()</code>함수로 크기 값을 반복할 수 있다. 함수의 첫번째 인자는 트랙의 수량, 두번째 인자는 트랙의 크기.</li>
</ul>
<h2 id="방향"><a href="#방향" class="headerlink" title="방향"></a>방향</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid: <span class="number">1</span>fr <span class="number">2</span>fr / auto-flow; // 아래</span><br><span class="line">    grid: auto-flow / <span class="number">1</span>fr <span class="number">2</span>fr; //오른쪽</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>배치 방향 설정.</li>
<li>auto-flow 값은 grid 단축 속성에서만 사용하는 값의 형태로 grid-auto-flow 속성값의 다른 표기법.</li>
<li>슬래시와 함께 교차축 grid-template-rows/columns 값의 명시가 필수.</li>
<li>배치 방향 설정.</li>
</ul>
<h2 id="Grid-item"><a href="#Grid-item" class="headerlink" title="Grid item"></a>Grid item</h2><h3 id="배치"><a href="#배치" class="headerlink" title="배치"></a>배치</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: grid;</span><br><span class="line">        grid: auto / <span class="number">40px</span> repeat (<span class="number">2</span>, <span class="number">1</span>fr <span class="number">2</span>fr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item1</span> &#123;grid-area: <span class="number">2</span>(로우)/<span class="number">3</span>(컬럼);&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>행 배치 시점 / 열 배치 시점 / 행 배치 종점/ 열배치 종점 값을 선언하여 아이템의 배치 위치를 결정할 수 있다.</li>
<li>값은 시계 반대 방향으로 순환하고 슬래시(/) 구분자로 분리한다.</li>
<li>생략한 값은 auto와 같다.</li>
</ul>
<h3 id="배치-병합"><a href="#배치-병합" class="headerlink" title="배치/병합"></a>배치/병합</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid: auto / <span class="number">40px</span> repeat (<span class="number">2</span>, <span class="number">1</span>fr <span class="number">2</span>fr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item1</span> &#123;grid-area: <span class="number">2</span>/<span class="number">2</span>/<span class="built_in">span3</span>(아래로 병합)/<span class="built_in">span2</span>(우측으로 병합)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Grid-item-정렬"><a href="#Grid-item-정렬" class="headerlink" title="Grid item 정렬"></a>Grid item 정렬</h2><h3 id="트랙"><a href="#트랙" class="headerlink" title="트랙"></a>트랙</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>:: grid;</span><br><span class="line">    grid: auto / <span class="built_in">repeat</span>(<span class="number">3</span>, auto);</span><br><span class="line">    place-<span class="attribute">content</span>: end center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>트랙의 크기가 auto인 상태로 컨테이너를 가득 채우지 않는다면 트랙의 위치를 정렬할 수 있다.</p>
<h3 id="아이템-복수"><a href="#아이템-복수" class="headerlink" title="아이템 복수"></a>아이템 복수</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid: auto / <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">    place-cntent: end center;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>셀(복수)의 위치를 정렬할 수 있다.</p>
<h3 id="아이템-단수"><a href="#아이템-단수" class="headerlink" title="아이템 단수"></a>아이템 단수</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid: auto / <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item1</span> &#123;</span><br><span class="line">    place-self: end center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>셀(단수)의 위치를 정렬할 수 있다.</p>
<h2 id="Grid-dense"><a href="#Grid-dense" class="headerlink" title="Grid dense"></a>Grid dense</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">grid: auto-flow:auto-flow/<span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">grid: auto-flow desne / repeat/<span class="number">3</span>(<span class="number">1</span>fr);</span><br></pre></td></tr></table></figure>
<p>채우지 못한 빈 영역이 있으면 흐름 방향을 거슬러 올라 트랙을 채운다(두번째)</p>
<h2 id="Grid-auto-fill-fit"><a href="#Grid-auto-fill-fit" class="headerlink" title="Grid-auto-fill/fit"></a>Grid-auto-fill/fit</h2><p>트랙을 채우지 못한 상황에서 트랙의 최대 크기가 auto이면 auto-fill(안으로) 또는 auto-fit(밖으로) 방식으로 트랙의 크기와 수량을 자동으로 결정한다.</p>
<blockquote>
<p><a href="https://naradesign.github.io/css-grid-layout.html">https://naradesign.github.io/css-grid-layout.html</a></p>
</blockquote>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>패스트 캠퍼스 The RED : 견고한 UI 설계를 위한 마크업 가이드 _ 정찬명 강사님</p>
</blockquote>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>the red</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 애니메이션 06</title>
    <url>/2022/03/04/css-exercise006/</url>
    <content><![CDATA[<p>좌우로 벌어지는 CSS 애니메이션.</p>
<a id="more"></a>

<img src="https://mjae404.github.io/images/css-animation06.gif" alt="css animation">

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.card_animation</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.card_animation</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.5s</span>;</span><br><span class="line">    <span class="attribute">background</span>: no-repeat center / cover;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.card_animation</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">70px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.card_animation</span> <span class="selector-tag">li</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:hover</span>) &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">0.7</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.card_animation</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;img/animation02_01.jpg&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.card_animation</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;img/animation02_02.jpg&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.card_animation</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;img/animation02_03.jpg&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.card_animation</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>) &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;img/animation02_04.jpg&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;card_animation&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>mjae01<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>mjae02<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>mjae03<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>mjae04<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://www.youtube.com/watch?v=E61_pdj9mUc&amp;list=PL_6yF2upGJYvYTwdH42s2QjqNIohSujcQ&amp;index=1&amp;t=18s">https://www.youtube.com/watch?v=E61_pdj9mUc&amp;list=PL_6yF2upGJYvYTwdH42s2QjqNIohSujcQ&amp;index=1&amp;t=18s</a></p>
</blockquote>
]]></content>
      <categories>
        <category>exercise</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSS3</tag>
        <tag>exercise</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS flex</title>
    <url>/2020/11/06/css-flex/</url>
    <content><![CDATA[<p>대부분의 사이트는 수직적으로 레이아웃이 구성되어 있으며 위아래로 스크롤하여 사용하게 된다. 수평 구조의  경우 <code>table</code>, <code>float</code>, <code>inline-block</code>을 주로 사용하고 있으나 주로 차선책일 뿐이며 <code>flex</code>로 레이아웃을 쉽게 구성할 수 있다.</p>
<a id="more"></a>

<h2 id="CSS3-Flexible-Box"><a href="#CSS3-Flexible-Box" class="headerlink" title="CSS3 Flexible Box"></a>CSS3 Flexible Box</h2><ul>
<li>요소의 크기가 불분명하거나 동적인 경우에도 효율적인 방법을 제공한다.</li>
<li>Container, Items라는 두가지 개념으로 나뉜다.<ul>
<li><strong>Container</strong>: Items를 감싸는 부모 요소. 각 Item을 정렬하기 위해 꼭 필요하다. <code>display</code>, <code>flex-flow</code>, <code>justify-content</code> 속성 사용 가능.</li>
<li><strong>items</strong>: <code>order</code>, <code>flex</code>, <code>align-self</code> 속성 사용 가능.</li>
</ul>
</li>
</ul>
<h2 id="Flex-Container"><a href="#Flex-Container" class="headerlink" title="Flex Container"></a>Flex Container</h2><table>
<thead>
<tr>
<th>속성</th>
<th>의미</th>
</tr>
</thead>
<tbody><tr>
<td>display</td>
<td>Flex Container 정의</td>
</tr>
<tr>
<td>flex-direction</td>
<td>Flex Items의 주 축(main-axis)을 설정</td>
</tr>
<tr>
<td>flex-wrap</td>
<td>Flex Items의 여러 줄 묶음(줄바꿈) 설정</td>
</tr>
<tr>
<td>justify-content</td>
<td>주 축(main-axis)의정렬 방법을 설정</td>
</tr>
<tr>
<td>align-content</td>
<td>교차 축(cross-axis)의 정렬 방법을 설정(2줄 이상)</td>
</tr>
<tr>
<td>align-items</td>
<td>교차 축(cross-axis)에서 Items의 정렬 방법을 설정(1줄)</td>
</tr>
</tbody></table>
<h3 id="display"><a href="#display" class="headerlink" title="display"></a>display</h3><table>
<thead>
<tr>
<th>값</th>
<th>의미</th>
<th>기본값</th>
</tr>
</thead>
<tbody><tr>
<td>flex</td>
<td>Block 특성의 Flex Container를 정의 (수직쌓임)</td>
<td></td>
</tr>
<tr>
<td>inline-flex</td>
<td>Inline 특성의 Flex Container를 정의(수평쌓임)</td>
<td></td>
</tr>
</tbody></table>
<h3 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h3><p>Flex Items의 주 축(main-axis)을 설정하고 Items의 여러 줄 묶음(줄 바꿈)도 설정한다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">flex-flow</span>: row-reverse wrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>값</th>
<th>의미</th>
<th>기본값</th>
</tr>
</thead>
<tbody><tr>
<td>flex-direction</td>
<td>Items의 주 축(main-axis)을 설정</td>
<td>row</td>
</tr>
<tr>
<td>flex-wrap</td>
<td>Items의 여러 줄 묶음(줄 바꿈) 설정</td>
<td>nowrap</td>
</tr>
</tbody></table>
<p><em><strong>flex-direction</strong></em></p>
<p>Items의 주 축(main-axis)을 설정한다.</p>
<table>
<thead>
<tr>
<th>값</th>
<th>의미</th>
<th>기본값</th>
</tr>
</thead>
<tbody><tr>
<td>row</td>
<td>items를 수평축(왼쪽에서 오른쪽으로)으로 표시</td>
<td>row</td>
</tr>
<tr>
<td>row-reverse</td>
<td>Items를 row의 반대 축으로 표시</td>
<td></td>
</tr>
<tr>
<td>column</td>
<td>Items를 수직축(위에서 아래로)으로 표시</td>
<td></td>
</tr>
<tr>
<td>column-reverse</td>
<td>Items를 column의 반대 축으로 표시</td>
<td></td>
</tr>
</tbody></table>
<p><img src="/images/flex-direction.jpg" alt="flex-direction"></p>
<p><em><strong>주 축(main-axis)과 교차 축(cross-axis)</strong></em></p>
<ul>
<li>방향에 따라 주 축과 교차 축이 달라진다.</li>
<li>값 <code>row</code>는 주 축이 수평이고 교차 축이 수직</li>
<li>값 <code>column</code>은 주 축이 수직이고 교차 축이 수평</li>
</ul>
<p><em><strong>시작점(flex-start)과 끝점(flex-end)</strong></em></p>
<ul>
<li>주 축이나 교차 축의 시작하는 지점과 끝나는 지점을 지칭한다.</li>
<li>방향에 따라 시작점과 끝점이 달라진다.</li>
<li><code>flex-start</code>와 <code>flex-end</code>는 그 시작점과 끝점을 의미한다.</li>
</ul>
<p><img src="/images/flex-start_flex-end.jpg" alt="시작점(flex-start)과 끝점(flex-end)"></p>
<p><em><strong>flex-wrap</strong></em> Items의 여러 줄 묶음(줄 바꿈)을 설정한다.</p>
<table>
<thead>
<tr>
<th>값</th>
<th>의미</th>
<th>기본값</th>
</tr>
</thead>
<tbody><tr>
<td>nowrap</td>
<td>모든 Itmes를 여러 줄로 묶지 않음(한 줄에 표시)</td>
<td>nowrap</td>
</tr>
<tr>
<td>wrap</td>
<td>Items를 여러 줄로 묶음</td>
<td></td>
</tr>
<tr>
<td>wrap-reverse</td>
<td>Items를 wrap의 역 방향으로 여러 줄로 묶음</td>
<td></td>
</tr>
</tbody></table>
<p><img src="/images/flex-wrap.jpg" alt="flex-wrap"></p>
<h3 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h3><p>주 축(main-axis)의 정렬 방법을 설정한다.</p>
<table>
<thead>
<tr>
<th>값</th>
<th>의미</th>
<th>기본값</th>
</tr>
</thead>
<tbody><tr>
<td>flex-start</td>
<td>Items를 시작점(flex-start)으로 정렬</td>
<td>flex-start</td>
</tr>
<tr>
<td>flex-end</td>
<td>Items를 끝점(flex-end)으로 정렬</td>
<td></td>
</tr>
<tr>
<td>center</td>
<td>Items를 가운데 정렬</td>
<td></td>
</tr>
<tr>
<td>space-between</td>
<td>시작 Item은 시작점에, 마지막 Item은 끝점에 정렬되고 나머지 Items는 사이에 고르게 정렬됨</td>
<td></td>
</tr>
<tr>
<td>space-around</td>
<td>Items를 균등한 여백을 포함하여 정렬</td>
<td></td>
</tr>
</tbody></table>
<p><img src="/images/justify-content.jpg" alt="justify-content"></p>
<h3 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h3><p>교차 축(cross-axis)의 정렬 방법을 설정한다. flex-wrap 속성을 통해 Items가 <strong>여러 줄(2줄 이상)이고 여백이 있을 경우</strong> 만 사용할 수 있다. <u>Items가 한 줄일 경우 align-items 속성을 사용한다.</u></p>
<table>
<thead>
<tr>
<th>값</th>
<th>의미</th>
<th>기본값</th>
</tr>
</thead>
<tbody><tr>
<td>stretch</td>
<td>Container의 교차 축을 채우기 위해 Items를 늘림</td>
<td>stretch</td>
</tr>
<tr>
<td>flex-start</td>
<td>Items를 시작점(flex-start)으로 정렬</td>
<td></td>
</tr>
<tr>
<td>flex-end</td>
<td>Items를 끝점(flex-end)으로 정렬</td>
<td></td>
</tr>
<tr>
<td>center</td>
<td>Items를 가운데 정렬</td>
<td></td>
</tr>
<tr>
<td>space-between</td>
<td>시작 Item은 시작점에, 마지막 Item은 끝점에 정렬되고 나머지 Items는 사이에 고르게 정렬됨</td>
<td></td>
</tr>
<tr>
<td>space-around</td>
<td>Items를 균등한 여백을 포함하여 정렬</td>
<td></td>
</tr>
</tbody></table>
<h3 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h3><ul>
<li>교차 축(cross-axis)에서 Items의 정렬 방법을 설정한다.</li>
<li>Items가 한 줄일 경우 많이 사용한다.</li>
<li>Items가 flex-wrap을 통해 여러 줄(2줄 이상)일 경우에 align-content 속성이 우선</li>
<li>align-items를 사용하려면 align-content 속성을 기본값(stretch)으로 설정해야 한다.</li>
</ul>
<table>
<thead>
<tr>
<th>값</th>
<th>의미</th>
<th>기본값</th>
</tr>
</thead>
<tbody><tr>
<td>stretch</td>
<td>Container의 교차 축을 채우기 위해 Items를 늘림</td>
<td>stretch</td>
</tr>
<tr>
<td>flex-start</td>
<td>Items를 각 줄의 시작점(flex-start)으로 정렬</td>
<td></td>
</tr>
<tr>
<td>flex-end</td>
<td>Items를 각 줄의 끝점(flex-end)으로 정렬</td>
<td></td>
</tr>
<tr>
<td>center</td>
<td>Items를 가운데 정렬</td>
<td></td>
</tr>
<tr>
<td>baseline</td>
<td>Items를 문자 기준선에 정렬</td>
<td></td>
</tr>
</tbody></table>
<h2 id="Flex-Items"><a href="#Flex-Items" class="headerlink" title="Flex Items"></a>Flex Items</h2><table>
<thead>
<tr>
<th>속성</th>
<th>의미</th>
</tr>
</thead>
<tbody><tr>
<td>order</td>
<td>Flex Item의 순서를 설정</td>
</tr>
<tr>
<td>flex</td>
<td>flex-grow, flex-shrink, flex-basis의 단축 속성</td>
</tr>
<tr>
<td>flex-grow</td>
<td>Flex Item의 증가 너비 비율을 설정</td>
</tr>
<tr>
<td>flex-shrink</td>
<td>Flex Item의 감소 너비 비율을 설정</td>
</tr>
<tr>
<td>flex-basis</td>
<td>Flex Item의 (공간 배분 전) 기본 너비 설정</td>
</tr>
<tr>
<td>align-self</td>
<td>교차 축(cross-axis)에서 Item의 정렬 방법을 설정</td>
</tr>
</tbody></table>
<h3 id="order"><a href="#order" class="headerlink" title="order"></a>order</h3><ul>
<li>Item의 순서를 설정</li>
<li>Item에 숫자를 지정하고 숫자가 클수록 우선 순위가 낮음</li>
<li>음수 허용</li>
<li>HTML구조와 상관없이 순서를 변경할 수 있어 유용</li>
</ul>
<table>
<thead>
<tr>
<th>값</th>
<th>의미</th>
<th>기본값</th>
</tr>
</thead>
<tbody><tr>
<td>숫자</td>
<td>Item의 순서를 설정</td>
<td>0</td>
</tr>
</tbody></table>
<h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><ul>
<li>Item의 너비(증가, 감소, 기본)를 설정하는 단축 속성.</li>
<li>flex-basis의 기본값은 <code>auto</code>지만, 단축 속성인 flex에서 그 값을 생략할 경우 <code>0</code>이 적용된다.</li>
</ul>
<table>
<thead>
<tr>
<th>값</th>
<th>의미</th>
<th>기본값</th>
</tr>
</thead>
<tbody><tr>
<td>flex-grow    Item의 증가 너비 비율을 설정</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td>flex-shrink</td>
<td>Item의 감소 너비 비율을 설정</td>
<td>1</td>
</tr>
<tr>
<td>flex-basis</td>
<td>Item의 (공간 배분 전) 기본 너비 설정</td>
<td>auto</td>
</tr>
</tbody></table>
<p><em><strong>flex-grow</strong></em></p>
<ul>
<li>Item의 증가 너비 비율을 설정.</li>
<li>가변 너비가 아니거나, 값이 0일 경우 효과가 없다.</li>
</ul>
<table>
<thead>
<tr>
<th>값</th>
<th>의미</th>
<th>기본값</th>
</tr>
</thead>
<tbody><tr>
<td>숫자</td>
<td>Item의 증가 너비 비율을 설정</td>
<td>0</td>
</tr>
</tbody></table>
<p><em><strong>flex-shrink</strong></em></p>
<ul>
<li>Item이 감소하는 너비의 비율을 설정.</li>
<li>가변 너비가 아니거나, 값이 0일 경우 효과가 없다.</li>
<li>요소의 너비(width, height, flex-basis)에 영향을 받는다.</li>
</ul>
<table>
<thead>
<tr>
<th>값</th>
<th>의미</th>
<th>기본값</th>
</tr>
</thead>
<tbody><tr>
<td>숫자</td>
<td>Item의 감소 너비 비율을 설정</td>
<td>1</td>
</tr>
</tbody></table>
<p><em><strong>flex-basis</strong></em></p>
<ul>
<li>Item의 (공간 배분 전) 기본 너비를 설정.</li>
<li>값이 auto일 경우 width, height 등의 속성으로 Item의 너비를 설정 가능하다.</li>
<li>단위 값이 주어질 경우 설정할 수 없다.</li>
<li>단축 속성 내에서 flex-basis를 생략하면 값이 0이 되는 것을 주의.</li>
</ul>
<table>
<thead>
<tr>
<th>값</th>
<th>의미</th>
<th>기본값</th>
</tr>
</thead>
<tbody><tr>
<td>auto</td>
<td>가변 Item과 같은 너비</td>
<td>auto</td>
</tr>
<tr>
<td>단위</td>
<td>px, em, cm 등 단위로 지정</td>
<td></td>
</tr>
</tbody></table>
<h3 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h3><p>교차 축(cross-axis)에서 개별 Item의 정렬 방법을 설정한다. 필요에 의해 <strong>일부 Item만 정렬 방법을 변경</strong> 하려고 할 경우 align-self를 사용할 수 있으며 이 속성은 <strong>align-items 속성보다 우선</strong> 한다.</p>
<table>
<thead>
<tr>
<th>값</th>
<th>의미</th>
<th>기본값</th>
</tr>
</thead>
<tbody><tr>
<td>auto</td>
<td>Container의 align-items 속성을 상속받음</td>
<td>auto</td>
</tr>
<tr>
<td>stretch</td>
<td>Container의 교차 축을 채우기 위해 Item을 늘림</td>
<td></td>
</tr>
<tr>
<td>flex-start</td>
<td>Item을 각 줄의 시작점(flex-start)으로 정렬</td>
<td></td>
</tr>
<tr>
<td>flex-end</td>
<td>Item을 각 줄의 끝점(flex-end)으로 정렬</td>
<td></td>
</tr>
<tr>
<td>center</td>
<td>Item을 가운데 정렬</td>
<td></td>
</tr>
<tr>
<td>baseline</td>
<td>Item을 문자 기준선에 정</td>
<td></td>
</tr>
</tbody></table>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://heropy.blog/2018/11/24/css-flexible-box/">https://heropy.blog/2018/11/24/css-flexible-box/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSS3</tag>
        <tag>flex</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS Grid</title>
    <url>/2020/10/23/css-grid/</url>
    <content><![CDATA[<p>CSS 그리드는 더 복잡한 레이아웃을 위해 2치원 레이아웃 시스템을 제공한다. 다양한 레이아웃 대체 방식들을 해결하기 위해 만들어진 CSS 모듈이다. 효율적으로 학습하기 위해서는 파이어폭스 브라우저를 사용하는 것이 좋다.</p>
<a id="more"></a>

<h2 id="Grid-Properties"><a href="#Grid-Properties" class="headerlink" title="Grid Properties"></a>Grid Properties</h2><p><code>Container</code>(컨테이너)와 <code>Item</code>(아이템)이라는 두가지 개념으로 구분되어 있다. <code>Container</code>가 부모 요소이며 그 안에 각각 <code>Item</code>을 배치할 수 있다.</p>
<h3 id="Grid-Container-Properties"><a href="#Grid-Container-Properties" class="headerlink" title="Grid Container Properties"></a>Grid Container Properties</h3><table>
<thead>
<tr>
<th>속성</th>
<th>의미</th>
</tr>
</thead>
<tbody><tr>
<td>display</td>
<td>그리드 컨테이너(Container)를 정의</td>
</tr>
<tr>
<td>grid-template-rows</td>
<td>명시적 행(Track)의 크기를 정의</td>
</tr>
<tr>
<td>grid-template-columns</td>
<td>명시적 열(Track)의 크기를 정의</td>
</tr>
<tr>
<td>grid-template-areas</td>
<td>영역(Area) 이름을 참조해 템플릿 생성</td>
</tr>
<tr>
<td>grid-template</td>
<td>grid-template-xxx의 단축 속성</td>
</tr>
<tr>
<td>row-gap(grid-row-gap)</td>
<td>행과 행 사이의 간격(Line)을 정의</td>
</tr>
<tr>
<td>column-gap(grid-column-gap)</td>
<td>열과 열 사이의 간격(Line)을 정의</td>
</tr>
<tr>
<td>gap(grid-gap)</td>
<td>xxx-gap의 단축 속성</td>
</tr>
<tr>
<td>grid-auto-rows</td>
<td>암시적인 행(Track)의 크기를 정의</td>
</tr>
<tr>
<td>grid-auto-columns</td>
<td>암시적인 열(Track)의 크기를 정의</td>
</tr>
<tr>
<td>grid-auto-flow</td>
<td>자동 배치 알고리즘 방식을 정의</td>
</tr>
<tr>
<td>grid</td>
<td>grid-template-xxx과 grid-auto-xxx의 단축 속성</td>
</tr>
<tr>
<td>align-content</td>
<td>그리드 콘텐츠(Grid Contents)를 수직(열 축) 정렬</td>
</tr>
<tr>
<td>justify-content</td>
<td>그리드 콘텐츠를 수평(행 축) 정렬</td>
</tr>
<tr>
<td>place-content</td>
<td>align-content와 justify-content의 단축 속성</td>
</tr>
<tr>
<td>align-items</td>
<td>그리드 아이템(Items)들을 수직(열 축) 정렬</td>
</tr>
<tr>
<td>justify-items</td>
<td>그리드 아이템들을 수평(행 축) 정렬</td>
</tr>
<tr>
<td>place-items</td>
<td>align-items와 justify-items의 단축 속성</td>
</tr>
</tbody></table>
<h3 id="Grid-Item-Properties"><a href="#Grid-Item-Properties" class="headerlink" title="Grid Item Properties"></a>Grid Item Properties</h3><table>
<thead>
<tr>
<th>속성</th>
<th>의미</th>
</tr>
</thead>
<tbody><tr>
<td>grid-row-start</td>
<td>그리드 아이템(Item)의 행 시작 위치 지정</td>
</tr>
<tr>
<td>grid-row-end</td>
<td>그리드 아이템의 행 끝 위치 지정</td>
</tr>
<tr>
<td>grid-row</td>
<td>grid-row-xxx의 단축 속성(행 시작/끝 위치)</td>
</tr>
<tr>
<td>grid-column-start</td>
<td>그리드 아이템의 열 시작 위치 지정</td>
</tr>
<tr>
<td>grid-column-end</td>
<td>그리드 아이템의 열 끝 위치 지정</td>
</tr>
<tr>
<td>grid-column</td>
<td>grid-column-xxx의 단축 속성(열 시작/끝 위치)</td>
</tr>
<tr>
<td>grid-area</td>
<td>영역(Area) 이름을 설정하거나, grid-row와 grid-column의 단축 속성</td>
</tr>
<tr>
<td>align-self</td>
<td>단일 그리드 아이템을 수직(열 축) 정렬</td>
</tr>
<tr>
<td>justify-self</td>
<td>단일 그리드 아이템을 수평(행 축) 정렬</td>
</tr>
<tr>
<td>place-self</td>
<td>align-self와 justify-self의 단축 속성</td>
</tr>
<tr>
<td>order</td>
<td>그리드 아이템의 배치 순서를 지정</td>
</tr>
<tr>
<td>z-index</td>
<td>그리드 아이템의 쌓이는 순서를 지정</td>
</tr>
</tbody></table>
<h2 id="Grid-Containers"><a href="#Grid-Containers" class="headerlink" title="Grid Containers"></a>Grid Containers</h2><h3 id="display"><a href="#display" class="headerlink" title="display"></a>display</h3><p><code>Grid Container</code>를 정의한다. 하위 요소들은 자동적으로 <code>Grid Items</code>로 정의된다. 그리드를 사용하기 위해서는 컨테이너에 필수적으로 작성해야 한다.</p>
<table>
<thead>
<tr>
<th>값</th>
<th>의미</th>
</tr>
</thead>
<tbody><tr>
<td>grid</td>
<td>Block 특성의 Grid Container를 정의</td>
</tr>
<tr>
<td>inline-grid</td>
<td>Inline 특성의 Grid Container를 정의</td>
</tr>
</tbody></table>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="grid-template-rows"><a href="#grid-template-rows" class="headerlink" title="grid-template-rows"></a>grid-template-rows</h3><ul>
<li>명시적 행(Track)의 크기를 정의한다.</li>
<li>동시에 라인(Line)의 이름도 정의할 수 있다.</li>
<li><code>fr</code>(fraction, 공간 비율) 단위를 사용할 수 있다.</li>
<li> <code>repeat()</code> 함수를 사용할 수 있다.</li>
<li>라인 이름은 자동으로 지정되어 있기 때문에 꼭 필요한 경우가 아니면 따로 정의할 필요가 없다.</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-template-rows: <span class="number">1</span>행크기 <span class="number">2</span>행크기 ...;</span><br><span class="line">  grid-template-rows: [선이름] <span class="number">1</span>행크기 [선이름] <span class="number">2</span>행크기 [선이름] ...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/grid_template_rows.jpg" alt="grid-template-rows"></p>
<h3 id="grid-template-columns"><a href="#grid-template-columns" class="headerlink" title="grid-template-columns"></a>grid-template-columns</h3><ul>
<li>명시적 열(Track)의 크기를 정의한다.</li>
<li>동시에 라인(Line)의 이름도 정의할 수 있다.</li>
<li><code>fr</code>(fraction, 공간 비율) 단위를 사용할 수 있다. 각 컬럼은 비율에 맞게 출력되기 때문에 컨테이너의 너비가 가변해도 열 크기를 수정할 필요가 없다.</li>
<li> <code>repeat()</code> 함수를 사용할 수 있다. 2번째 인수를 반복한다.</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="number">1</span>열크기 <span class="number">2</span>열크기 ...;</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: [선이름] <span class="number">1</span>열크기 [선이름] <span class="number">2</span>열크기 [선이름] ...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="grid-template-areas"><a href="#grid-template-areas" class="headerlink" title="grid-template-areas"></a>grid-template-areas</h3><p>지정된 그리드 영역 이름(<code>grid-area</code>)을 참조해 그리드 템플릿을 생성한다.</p>
<ul>
<li>Grid Item에 적용하는 속성이다.</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-template-rows: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">100px</span>);</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">  grid-template-areas:</span><br><span class="line">    <span class="string">&quot;header header header&quot;</span></span><br><span class="line">    <span class="string">&quot;main main aside&quot;</span></span><br><span class="line">    <span class="string">&quot;footer footer footer&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">header</span> &#123; grid-area: header; &#125;</span><br><span class="line"><span class="selector-tag">main</span>   &#123; grid-area: main;   &#125;</span><br><span class="line"><span class="selector-tag">aside</span>  &#123; grid-area: aside;  &#125;</span><br><span class="line"><span class="selector-tag">footer</span> &#123; grid-area: footer; &#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/grid_template_areas.jpg" alt="grid-template-areas"></p>
<ul>
<li><code>.</code>(마침표)를 사용하거나 명시적으로 <code>none</code>을 입력해 빈 영역을 정의할 수 있다.</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-template-rows: <span class="built_in">repeat</span>(<span class="number">4</span>, <span class="number">100px</span>);</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">  grid-template-areas:</span><br><span class="line">    <span class="string">&quot;header header header&quot;</span></span><br><span class="line">    <span class="string">&quot;main . .&quot;</span></span><br><span class="line">    <span class="string">&quot;main . aside&quot;</span></span><br><span class="line">    <span class="string">&quot;footer footer footer&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">header</span> &#123; grid-area: header; &#125;</span><br><span class="line"><span class="selector-tag">main</span>   &#123; grid-area: main;   &#125;</span><br><span class="line"><span class="selector-tag">aside</span>  &#123; grid-area: aside;  &#125;</span><br><span class="line"><span class="selector-tag">footer</span> &#123; grid-area: footer; &#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/grid_template_areas2.jpg" alt="grid-template-areas"></p>
<h3 id="grid-template"><a href="#grid-template" class="headerlink" title="grid-template"></a>grid-template</h3><p><code>grid-template-rows</code>, <code>grid-template-columns</code> 그리고 <code>grid-template-areas</code>의 단축 속성이다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  grid-template: &lt;grid-template-rows&gt; / &lt;grid-template-columns&gt;;</span><br><span class="line">  grid-template: &lt;grid-template-areas&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  grid-template:</span><br><span class="line">    [<span class="number">1</span>행시작선이름] <span class="string">&quot;AREAS&quot;</span> 행너비 [<span class="number">1</span>행끝선이름]</span><br><span class="line">    [<span class="number">2</span>행시작선이름] <span class="string">&quot;AREAS&quot;</span> 행너비 [<span class="number">2</span>행끝선이름]</span><br><span class="line">    / &lt;grid-template-columns&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-template:</span><br><span class="line">    <span class="string">&quot;header header header&quot;</span> <span class="number">80px</span></span><br><span class="line">    <span class="string">&quot;main main aside&quot;</span> <span class="number">350px</span></span><br><span class="line">    <span class="string">&quot;footer footer footer&quot;</span> <span class="number">130px</span></span><br><span class="line">    / <span class="number">2</span>fr <span class="number">100px</span> <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">header</span> &#123; grid-area: header; &#125;</span><br><span class="line"><span class="selector-tag">main</span>   &#123; grid-area: main; &#125;</span><br><span class="line"><span class="selector-tag">aside</span>  &#123; grid-area: aside; &#125;</span><br><span class="line"><span class="selector-tag">footer</span> &#123; grid-area: footer; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 다음과 같이 해석 가능 */</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-template-rows: <span class="number">80px</span> <span class="number">350px</span> <span class="number">130px</span>;</span><br><span class="line">    grid-template-<span class="attribute">columns</span>: <span class="number">2</span>fr <span class="number">100px</span> <span class="number">1</span>fr;</span><br><span class="line">    grid-template-areas:</span><br><span class="line">    <span class="string">&quot;header header header&quot;</span></span><br><span class="line">    <span class="string">&quot;main main aside&quot;</span></span><br><span class="line">    <span class="string">&quot;footer footer footer&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="row-gap-grid-row-gap"><a href="#row-gap-grid-row-gap" class="headerlink" title="row-gap(grid-row-gap)"></a>row-gap(grid-row-gap)</h3><p>각 행과 행 사이의 간격(Gutter)을 지정한다. 정확하게는 그리드 선(Grid Line)의 크기를 지정.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  row-gap: 크기;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="column-gap-grid-column-gap"><a href="#column-gap-grid-column-gap" class="headerlink" title="column-gap(grid-column-gap)"></a>column-gap(grid-column-gap)</h3><p>각 열과 열 사이의 간격(Gutter)을 지정한다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">column-gap</span>: 크기;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="gap-grid-gap"><a href="#gap-grid-gap" class="headerlink" title="gap(grid-gap)"></a>gap(grid-gap)</h3><p>각 행과 행, 열과 열 사이의 간격(Gutter)을 지정한다.</p>
<blockquote>
<p><code>grid-gap(grid-row-gap</code>, <code>grid-column-gap</code>)의 접두사 <code>grid-</code>는 더 이상 사용되지 않으며(Deprecated), <code>gap(row-gap, column-gap)</code>로 교체되었다.</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  gap: &lt;grid-row-gap&gt; &lt;grid-column-gap&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-template-rows: <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="number">150px</span>);</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">  gap: <span class="number">20px</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 하나의 값으로 통일할 수 있다. */</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  gap: <span class="number">10px</span>;  <span class="comment">/* row-gap: 10px; + column-gap: 10px; */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 하나의 값만 적용하고자 한다면 다음과 같이 사용할 수 있다. */</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  gap: <span class="number">10px</span> <span class="number">0</span>; <span class="comment">/* row-gap */</span></span><br><span class="line">  gap: <span class="number">0</span> <span class="number">10px</span>; <span class="comment">/* column-gap */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/grid_gap.jpg" alt="grid-gap"></p>
<h3 id="grid-auto-rows"><a href="#grid-auto-rows" class="headerlink" title="grid-auto-rows"></a>grid-auto-rows</h3><p>암시적 행(Track)의 크기를 정의한다. 아이템(Item)이 <code>grid-template-rows</code>로 정의한 명시적 행 외부에 배치되는 경우 암시적 행의 크기가 적용된다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-template-rows: <span class="number">100px</span> <span class="number">100px</span>; <span class="comment">/* 명시적 2개 행 정의 */</span></span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="number">150px</span> <span class="number">150px</span>; <span class="comment">/* 명시적 2개 열 정의 */</span></span><br><span class="line">  grid-<span class="attribute">auto</span>-rows: <span class="number">100px</span>; <span class="comment">/* 그 외(암시적) 행의 크기 정의 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span><br><span class="line">  grid-row: <span class="number">3</span> / <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/grid_auto_rows.jpg" alt="grid-auto-rows"></p>
<h3 id="grid-auto-columns"><a href="#grid-auto-columns" class="headerlink" title="grid-auto-columns"></a>grid-auto-columns</h3><p>암시적 열(Track)의 크기를 정의한다. 아이템(Item)이 grid-template-columns로 정의한 명시적 열 외부에 배치되는 경우 암시적 열의 크기가 적용된다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-template-rows: <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="number">150px</span> <span class="number">150px</span>;</span><br><span class="line">  grid-<span class="attribute">auto</span>-rows: <span class="number">100px</span>;</span><br><span class="line">  grid-<span class="attribute">auto</span>-<span class="attribute">columns</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span><br><span class="line">  grid-row: <span class="number">3</span> / <span class="number">4</span>;</span><br><span class="line">  grid-column: <span class="number">3</span> / <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/grid_auto_columns.jpg" alt="grid-auto-columns"></p>
<ul>
<li>아이템이 배치되는 위치에 맞게 암시적 행과 열의 개수가 생성된다.</li>
<li>암시적 크기가 적용된 행과 열은 양수 라인 번호만 사용할 수 있다. (음수 사용 불가)</li>
</ul>
<p><img src="/images/grid_auto_columns2.jpg" alt="grid-auto-columns"></p>
<h3 id="grid-auto-flow"><a href="#grid-auto-flow" class="headerlink" title="grid-auto-flow"></a>grid-auto-flow</h3><p>배치하지 않은 아이템(Item)을 어떤 방식의 ‘자동 배치 알고리즘’으로 처리할지 정의한다. 배치한 아이템은 <code>grid-area</code>(이하 개별 속성 포함)를 사용한 아이템을 의미한다.</p>
<table>
<thead>
<tr>
<th>값</th>
<th>의미</th>
<th>기본값</th>
</tr>
</thead>
<tbody><tr>
<td>row</td>
<td>각 행 축을 따라 차례로 배치</td>
<td>row</td>
</tr>
<tr>
<td>column</td>
<td>각 열 축을 따라 차례로 배치</td>
<td></td>
</tr>
<tr>
<td>row dense(dense)</td>
<td>각 행 축을 따라 차례로 배치, 빈 영역 메움!</td>
<td></td>
</tr>
<tr>
<td>column dense</td>
<td>각 열 축을 따라 차례로 배치, 빈 영역 메움!</td>
<td></td>
</tr>
</tbody></table>
<p><em><strong>row와 row dense</strong></em></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* For row &amp; row dense */</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-template-rows: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">  grid-<span class="attribute">auto</span>-flow: row || row dense || dense;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  grid-column: span <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/grid_auto_flow.jpg" alt="grid-auto-flow"></p>
<p><em><strong>column와 column dense</strong></em></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* For column &amp; column dense */</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-template-rows: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">  grid-<span class="attribute">auto</span>-flow: column || column dense;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  grid-column: <span class="number">2</span> / span <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  grid-column: span <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/grid_auto_flow2.jpg" alt="grid-auto-flow"></p>
<h3 id="grid"><a href="#grid" class="headerlink" title="grid"></a>grid</h3><p><code>grid-template-xxx</code>과 <code>grid-auto-xxx</code>의 단축 속성이다.</p>
<ul>
<li><code>auto-flow</code> 키워드를 사용합니다.</li>
<li><code>/</code>로 구분해 작성하는 위치가 곧 <code>row</code>, <code>column</code> 값을 의미하기 때문에 작성할 필요가 없다.</li>
<li><code>dense</code> 값은 <code>auto-flow</code> 뒤에 붙여준다.</li>
</ul>
<h3 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h3><p>그리드 콘텐츠(Contents)를 수직(열 축) 정렬한다. 그리드 콘텐츠의 세로 너비가 그리드 컨테이너(Container)보다 작아야 한다.</p>
<table>
<thead>
<tr>
<th>값</th>
<th>의미</th>
<th>기본값</th>
</tr>
</thead>
<tbody><tr>
<td>normal</td>
<td>stretch와 같다.</td>
<td>normal</td>
</tr>
<tr>
<td>start</td>
<td>시작점(위쪽) 정렬</td>
<td></td>
</tr>
<tr>
<td>center</td>
<td>수직 가운데 정렬</td>
<td></td>
</tr>
<tr>
<td>end</td>
<td>끝점(아래쪽) 정렬</td>
<td></td>
</tr>
<tr>
<td>space-around</td>
<td>각 행 위아래에 여백을 고르게 정렬</td>
<td></td>
</tr>
<tr>
<td>space-between</td>
<td>첫 행은 시작점에, 끝 행은 끝점에 정렬되고 나머지 여백으로 고르게 정렬</td>
<td></td>
</tr>
<tr>
<td>space-evenly</td>
<td>모든 여백을 고르게 정렬</td>
<td></td>
</tr>
<tr>
<td>stretch</td>
<td>열 축을 채우기 위해 그리드 콘텐츠를 늘림</td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">450px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">450px</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-template-rows: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">100px</span>);</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">100px</span>);</span><br><span class="line">  <span class="attribute">align-content</span>: &lt;align-content&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/grid_align_content.jpg" alt="grid-align-content"></p>
<h3 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h3><p>그리드 콘텐츠(Contents)를 수평(행 축) 정렬한다. 그리드 콘텐츠의 가로 너비가 그리드 컨테이너(Container)보다 작아야 한다.</p>
<table>
<thead>
<tr>
<th>값</th>
<th>의미</th>
<th>기본값</th>
</tr>
</thead>
<tbody><tr>
<td>normal</td>
<td>stretch와 같다.</td>
<td>normal</td>
</tr>
<tr>
<td>start</td>
<td>시작점(왼쪽) 정렬</td>
<td></td>
</tr>
<tr>
<td>center</td>
<td>수평 가운데 정렬</td>
<td></td>
</tr>
<tr>
<td>end</td>
<td>끝점(오른쪽) 정렬</td>
<td></td>
</tr>
<tr>
<td>space-around</td>
<td>각 열 좌우에 여백을 고르게 정렬</td>
<td></td>
</tr>
<tr>
<td>space-between</td>
<td>첫 열은 시작점에, 끝 열은 끝점에 정렬되고 나머지 여백으로 고르게 정렬</td>
<td></td>
</tr>
<tr>
<td>space-evenly</td>
<td>모든 여백을 고르게 정렬</td>
<td></td>
</tr>
<tr>
<td>stretch</td>
<td>행 축을 채우기 위해 그리드 콘텐츠를 늘림</td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">450px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">450px</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-template-rows: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">100px</span>);</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">100px</span>);</span><br><span class="line">  <span class="attribute">justify-content</span>: &lt;justify-content&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/grid_justify_content.jpg" alt="grid-justify-content"></p>
<h3 id="place-content"><a href="#place-content" class="headerlink" title="place-content"></a>place-content</h3><p><code>align-content</code>와 <code>justify-content</code>의 단축 속성이다.</p>
<ul>
<li>하나의 값만 입력하면 두 속성에 모두 적용된다.</li>
<li><strong>Edge(IE) 브라우저에서 지원하지 않는 속성</strong></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  place-<span class="attribute">content</span>: &lt;align-content&gt; &lt;justify-content&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 01 */</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  place-<span class="attribute">content</span>: center space-evenly;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-evenly;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 02 */</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    place-<span class="attribute">content</span>: end;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">align-content</span>: end;</span><br><span class="line">    <span class="attribute">justify-content</span>: end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h3><p>그리드 아이템(Items)들을 수직(열 축) 정렬한다. 그리드 아이템의 세로 너비가 자신이 속한 그리드 행(Track)의 크기보다 작아야 한다.</p>
<table>
<thead>
<tr>
<th>값</th>
<th>의미</th>
<th>기본값</th>
</tr>
</thead>
<tbody><tr>
<td>normal</td>
<td>stretch와 같다.</td>
<td>normal</td>
</tr>
<tr>
<td>start</td>
<td>시작점(위쪽) 정렬</td>
<td></td>
</tr>
<tr>
<td>center</td>
<td>수직 가운데 정렬</td>
<td></td>
</tr>
<tr>
<td>end</td>
<td>끝점(아래쪽) 정렬</td>
<td></td>
</tr>
<tr>
<td>stretch</td>
<td>열 축을 채우기 위해 그리드 아이템을 늘림</td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">450px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">450px</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-template-rows: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">align-items</span>: &lt;align-items&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/grid_align_items.jpg" alt="grid-align-items"></p>
<h3 id="justify-items"><a href="#justify-items" class="headerlink" title="justify-items"></a>justify-items</h3><p>그리드 아이템(Items)들을 수평(행 축) 정렬한다. 그리드 아이템의 가로 너비가 자신이 속한 그리드 열(Track)의 크기보다 작아야 한다.</p>
<table>
<thead>
<tr>
<th>값</th>
<th>의미</th>
<th>기본값</th>
</tr>
</thead>
<tbody><tr>
<td>normal</td>
<td>stretch와 같다.</td>
<td>normal</td>
</tr>
<tr>
<td>start</td>
<td>시작점(왼쪽) 정렬</td>
<td></td>
</tr>
<tr>
<td>center</td>
<td>수평 가운데 정렬</td>
<td></td>
</tr>
<tr>
<td>end</td>
<td>끝점(오른쪽) 정렬</td>
<td></td>
</tr>
<tr>
<td>stretch</td>
<td>행 축을 채우기 위해 그리드 아이템을 늘림</td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">450px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">450px</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-template-rows: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">  justify-items: &lt;justify-items&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/grid_justify_items.jpg" alt="grid-justify-items"></p>
<h3 id="place-items"><a href="#place-items" class="headerlink" title="place-items"></a>place-items</h3><p><code>align-items</code>와 <code>justify-items</code>의 단축 속성이다.</p>
<ul>
<li>하나의 값만 입력하면 두 속성에 모두 적용된다.</li>
<li><strong>Edge(IE) 브라우저에서 지원하지 않는 속성</strong></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  place-items: &lt;align-items&gt; &lt;justify-items&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 01 */</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    place-items: start stretch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">align-items</span>: start;</span><br><span class="line">    justify-items: stretch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 02 */</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    place-items: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    justify-items: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Grid-Items"><a href="#Grid-Items" class="headerlink" title="Grid Items"></a>Grid Items</h2><p>정의된 컨테이너의 자식 요소들은 자동으로 Grid Items(아이템)로 정의된다.</p>
<h3 id="grid-row-start-grid-row-end-grid-column-start-grid-column-end"><a href="#grid-row-start-grid-row-end-grid-column-start-grid-column-end" class="headerlink" title="grid-row-start, grid-row-end, grid-column-start, grid-column-end"></a>grid-row-start, grid-row-end, grid-column-start, grid-column-end</h3><ul>
<li>그리드 아이템(Item)을 배치하기 위해 그리드 선(Line)의 ‘시작 위치’와 ‘끝 위치’를 지정한다.</li>
<li>‘숫자’를 지정하거나, ‘선 이름’을 지정하거나, <code>span</code> 키워드를 사용한다.</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-template-rows: <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="number">1</span>fr);</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  grid-row-start: <span class="number">1</span>;</span><br><span class="line">  grid-row-end: <span class="number">3</span>;</span><br><span class="line">  grid-column-start: <span class="number">2</span>;</span><br><span class="line">  grid-column-end: <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/grid_row_column.jpg" alt="grid-row-column"></p>
<ul>
<li>선의 이름을 지정할 수도 있다.</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-template-rows: [row-<span class="number">1s</span>t] <span class="number">1</span>fr [row-<span class="number">2</span>nd] <span class="number">1</span>fr [row-<span class="number">3</span>rd];</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: [col-<span class="number">1s</span>t] <span class="number">1</span>fr [col-<span class="number">2</span>nd] <span class="number">1</span>fr [col-<span class="number">3</span>rd] <span class="number">1</span>fr [col-<span class="number">4</span>th];</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  grid-row-start: row-<span class="number">2</span>nd;</span><br><span class="line">  grid-row-end: row-<span class="number">3</span>rd;</span><br><span class="line">  grid-column-start: col-<span class="number">2</span>nd;</span><br><span class="line">  grid-column-end: col-<span class="number">4</span>th;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/grid_row_column2.jpg" alt="grid-row-column"></p>
<ul>
<li><code>span</code> 키워드를 사용하면 좀 더 쉽게 배치할 수 있다.</li>
<li><code>span</code> 키워드와 ‘숫자’를 조합하면 ‘숫자’만큼 라인을 확장하는(<code>+</code>) 개념이다.</li>
<li>명시하지 않으면 <code>span</code> 1이 기본값.</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="comment">/* Row 1번에서 3번(1+2=3)까지 */</span></span><br><span class="line">  grid-row-start: <span class="number">1</span>;</span><br><span class="line">  grid-row-end: span <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Column 2번에서 3번(2+1=3)까지 */</span></span><br><span class="line">  grid-column-start: <span class="number">2</span>;</span><br><span class="line">  <span class="comment">/* grid-column-end: span 1; (생략) */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/grid_row_column3.jpg" alt="grid-row-column"></p>
<ul>
<li><code>span</code> 키워드를 ‘시작 위치’에 작성하고, ‘끝 위치’를 명시해서 확장할(<code>-</code>) 수도 있다.</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="comment">/* Column 3번에서 2번(3-1=2)까지 */</span></span><br><span class="line">  <span class="comment">/* grid-row-start: span 1; (생략) */</span></span><br><span class="line">  grid-row-end: <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Column 4번에서 2번(4-2=2)까지 */</span></span><br><span class="line">  grid-column-start: span <span class="number">2</span>;</span><br><span class="line">  grid-column-end: <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/grid_row_column4.jpg" alt="grid-row-column"></p>
<h3 id="grid-row"><a href="#grid-row" class="headerlink" title="grid-row"></a>grid-row</h3><p><code>grid-row-start</code>과 <code>grid-row-end</code>의 단축 속성이다. 각 속성을 <code>/</code>로 구분하는 것에 주의.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  grid-row: &lt;grid-row-start&gt; / &lt;grid-row-end&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 01 */</span></span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    grid-row-start: <span class="number">1</span>;</span><br><span class="line">    grid-row-end: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    grid-row: <span class="number">1</span> / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 02 */</span></span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    grid-row-start: <span class="number">2</span>;</span><br><span class="line">    grid-row-end: span <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    grid-row: <span class="number">2</span> / span <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    grid-row: <span class="number">2</span> / <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 03 */</span></span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    grid-row-start: span <span class="number">3</span>;</span><br><span class="line">    grid-row-end: <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    grid-row: span <span class="number">3</span> / <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    grid-row: <span class="number">1</span> / <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="grid-column"><a href="#grid-column" class="headerlink" title="grid-column"></a>grid-column</h3><ul>
<li><code>grid-column-start</code>과 <code>grid-column-end</code>의 단축 속성이다. 각 속성을 <code>/</code>로 구분하는 것에 주의.</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    grid-column: &lt;grid-column-start&gt; / &lt;grid-column-end&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>음수 결과를 위해 <code>span</code> 키워드를 ‘시작 위치’에 작성함에 주의.</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 01 */</span></span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  grid-column-start: -<span class="number">1</span>;</span><br><span class="line">  grid-column-end: -<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  grid-column: -<span class="number">1</span> / -<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="comment">/* Column -1번에서 -3번(-1-2=-3)까지 */</span></span><br><span class="line">  grid-column: span <span class="number">2</span> / -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 02 */</span></span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    grid-column-start: <span class="number">2</span>;</span><br><span class="line">    grid-column-end: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="comment">/* Column 2번에서 끝(-1번)까지 */</span></span><br><span class="line">    grid-column: <span class="number">2</span> / -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="grid-area"><a href="#grid-area" class="headerlink" title="grid-area"></a>grid-area</h3><p><code>grid-row-start</code>, <code>grid-column-start</code>, <code>grid-row-end</code> 그리고 <code>grid-column-end</code>의 단축 속성이다.</p>
<ul>
<li><code>grid-template-areas</code>가 참조할 영역(Area) 이름을 설정할 수 있다.</li>
<li>영역 이름을 설정할 경우 <code>grid-row</code>와 <code>grid-column</code> 개념은 무시된다.</li>
<li>영역 이름을 지정해 <code>grid-template-areas</code>에서 참조할 수 있다.</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  grid-area: &lt;grid-row-start&gt; / &lt;grid-column-start&gt; / &lt;grid-row-end&gt; / &lt;grid-column-end&gt;;</span><br><span class="line">  grid-area: 영역이름;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  grid-row: <span class="number">2</span> / <span class="number">3</span>;</span><br><span class="line">  grid-column: span <span class="number">2</span> / -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="comment">/* &#x27;시작 / 시작 / 끝 / 끝&#x27;임에 주의합시다! */</span></span><br><span class="line">  grid-area: <span class="number">2</span> / span <span class="number">2</span> / <span class="number">3</span> / -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>다음과 같이 영역 이름을 지정해 <code>grid-template-areas</code>에서 참조할 수 있다.</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>HEADER<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">main</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>MAIN<span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>ASIDE<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>FOOTER<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-template-rows: <span class="built_in">repeat</span>(<span class="number">4</span>, <span class="number">90px</span>);</span><br><span class="line">    grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">    grid-template-areas:</span><br><span class="line">    <span class="string">&quot;header header header&quot;</span></span><br><span class="line">    <span class="string">&quot;main main aside&quot;</span></span><br><span class="line">    <span class="string">&quot;main main .&quot;</span></span><br><span class="line">    <span class="string">&quot;footer footer footer&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">header</span><span class="selector-class">.item</span> &#123; grid-area: header; &#125;</span><br><span class="line"><span class="selector-tag">main</span><span class="selector-class">.item</span>   &#123; grid-area: main;   &#125;</span><br><span class="line"><span class="selector-tag">aside</span><span class="selector-class">.item</span>  &#123; grid-area: aside;  &#125;</span><br><span class="line"><span class="selector-tag">footer</span><span class="selector-class">.item</span> &#123; grid-area: footer; &#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/grid_area.jpg" alt="grid-area"></p>
<h3 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h3><p>단일 그리드 아이템(Item)을 수직(열 축) 정렬한다. 그리드 아이템의 세로 너비가 자신이 속한 그리드 행(Track)의 크기보다 작아야 한다.</p>
<table>
<thead>
<tr>
<th>값</th>
<th>의미</th>
<th>기본값</th>
</tr>
</thead>
<tbody><tr>
<td>normal</td>
<td>stretch와 같다.</td>
<td>normal</td>
</tr>
<tr>
<td>start</td>
<td>시작점(위쪽) 정렬</td>
<td></td>
</tr>
<tr>
<td>center</td>
<td>수직 가운데 정렬</td>
<td></td>
</tr>
<tr>
<td>end</td>
<td>끝점(아래쪽) 정렬</td>
<td></td>
</tr>
<tr>
<td>stretch</td>
<td>열 축을 채우기 위해 그리드 아이템을 늘림</td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-template-rows: <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="number">1</span>fr);</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="number">1</span>fr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123; <span class="attribute">align-self</span>: start; &#125;</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123; <span class="attribute">align-self</span>: center; &#125;</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123; <span class="attribute">align-self</span>: end; &#125;</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>) &#123; <span class="attribute">align-self</span>: stretch; &#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/grid_align_self.jpg" alt="grid-align-self"></p>
<h3 id="justify-self"><a href="#justify-self" class="headerlink" title="justify-self"></a>justify-self</h3><p>단일 그리드 아이템(Item)을 수평(행 축) 정렬한다. 그리드 아이템의 가로 너비가 자신이 속한 그리드 열(Track)의 크기보다 작아야 한다.</p>
<table>
<thead>
<tr>
<th>값</th>
<th>의미</th>
<th>기본값</th>
</tr>
</thead>
<tbody><tr>
<td>normal</td>
<td>stretch와 같다.</td>
<td>normal</td>
</tr>
<tr>
<td>start</td>
<td>시작점(왼쪽) 정렬</td>
<td></td>
</tr>
<tr>
<td>center</td>
<td>수평 가운데 정렬</td>
<td></td>
</tr>
<tr>
<td>end</td>
<td>끝점(오른쪽) 정렬</td>
<td></td>
</tr>
<tr>
<td>stretch</td>
<td>행 축을 채우기 위해 그리드 아이템을 늘림</td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-template-rows: <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="number">1</span>fr);</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="number">1</span>fr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123; justify-self: start; &#125;</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123; justify-self: center; &#125;</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123; justify-self: end; &#125;</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>) &#123; justify-self: stretch; &#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/grid_justify_self.jpg" alt="grid-justify-self"></p>
<h3 id="place-self"><a href="#place-self" class="headerlink" title="place-self"></a>place-self</h3><p><code>align-self</code>와 <code>justify-self</code>의 단축 속성이다.</p>
<ul>
<li>하나의 값만 입력하면 두 속성에 모두 적용된다.</li>
<li><strong>Edge(IE) 브라우저에서 지원하지 않는 속성</strong></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  place-self: &lt;align-self&gt; &lt;justify-self&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 01 */</span></span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  place-self: start end;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">align-self</span>: start;</span><br><span class="line">  justify-self: end;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 02 */</span></span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    place-self: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">align-self</span>: center;</span><br><span class="line">    justify-self: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="order"><a href="#order" class="headerlink" title="order"></a>order</h3><p>그리드 아이템이 자동 배치되는 순서를 변경할 수 있다. 숫자가 작을수록 앞서 배치된다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-template-rows: <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="number">1</span>fr);</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123; <span class="attribute">order</span>: <span class="number">1</span>; &#125;</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123; <span class="attribute">order</span>: <span class="number">5</span>; &#125;</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>) &#123; <span class="attribute">order</span>: -<span class="number">1</span>; &#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/grid_order.jpg" alt="grid-order"></p>
<h3 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h3><p><code>z-index</code> 속성을 이용해 아이템이 쌓이는 순서를 변경할 수 있다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  grid-area: <span class="number">1</span> / <span class="number">1</span> / <span class="number">2</span> / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  grid-area: <span class="number">1</span> / <span class="number">2</span> / <span class="number">3</span> / <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span><br><span class="line">  grid-area: <span class="number">2</span> / <span class="number">2</span> / <span class="number">3</span> / <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/grid_zindex.jpg" alt="grid-zindex"></p>
<h2 id="Grid-Functions"><a href="#Grid-Functions" class="headerlink" title="Grid Functions"></a>Grid Functions</h2><h3 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h3><ul>
<li><code>repeat()</code> 함수는 행/열(Track)의 크기 정의를 반복한다.</li>
<li>‘반복되는 횟수’와 ‘행/열의 크기 정의’를 인수로 사용한다.</li>
<li><code>grid-template-rows</code>와 <code>grid-template-columns</code>에서 사용한다.</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 9컬럼 그리드 */</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(<span class="number">9</span>, <span class="number">100px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  grid-template-rows: [row-start] <span class="number">200px</span> [row-end row-start] <span class="number">200px</span> [row-end];</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: [col-start] <span class="number">100px</span> [col-end col-start] <span class="number">100px</span> [col-end col-start] <span class="number">100px</span> [col-end];</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  grid-template-rows: <span class="built_in">repeat</span>(<span class="number">2</span>, [row-start] <span class="number">200px</span> [row-end]);</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, [col-start] <span class="number">100px</span> [col-end]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  grid-template: <span class="built_in">repeat</span>(<span class="number">2</span>, [row-start] <span class="number">200px</span> [row-end]) / <span class="built_in">repeat</span>(<span class="number">3</span>, [col-start] <span class="number">100px</span> [col-end]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="comment">/* 12컬럼 그리드 */</span></span><br><span class="line">    grid-template-<span class="attribute">columns</span>: <span class="number">1</span>fr <span class="number">2</span>fr <span class="number">1</span>fr <span class="number">2</span>fr <span class="number">1</span>fr <span class="number">2</span>fr <span class="number">1</span>fr <span class="number">2</span>fr <span class="number">1</span>fr <span class="number">2</span>fr <span class="number">1</span>fr <span class="number">2</span>fr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(<span class="number">6</span>, <span class="number">1</span>fr <span class="number">2</span>fr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="minmax"><a href="#minmax" class="headerlink" title="minmax"></a>minmax</h3><ul>
<li><code>minmax()</code> 함수는 행/열(Track)의 ‘최소/최대 크기’를 정의한다.</li>
<li>첫 번째 인수는 ‘최솟값’이고 두 번째 인수는 ‘최댓값’이다.</li>
<li><code>grid-template-rows</code>, <code>grid-template-columns</code>, <code>grid-auto-rows</code> 그리고 <code>grid-auto-columns</code>에서 사용한다.</li>
<li>일반 요소에 <code>min-width</code>와 <code>max-width</code> 속성을 동시 지정하는 것과 유사하다.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">  grid-template-columns: minmax(100px, 1fr) minmax(200px, 1fr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/grid_minmax.jpg" alt="grid-minmax"></p>
<ul>
<li><code>minmax()</code>를 통해 암시적 행/열(Track) 크기를 좀 더 유연하게 사용할 수 있다.</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  grid-<span class="attribute">auto</span>-rows: <span class="built_in">minmax</span>(<span class="number">200px</span>, auto);</span><br><span class="line">  grid-<span class="attribute">auto</span>-<span class="attribute">columns</span>: <span class="built_in">minmax</span>(<span class="number">300px</span>, auto);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="fit-content"><a href="#fit-content" class="headerlink" title="fit-content"></a>fit-content</h3><ul>
<li><code>fit-content()</code> 함수는 행/열(Track)의 크기를 그리드 아이템(Item)이 포함하는 내용(Contents) 크기에 맞춘다.</li>
<li>‘내용의 최대 크기’를 인수로 사용한다.</li>
<li><code>minmax(auto, max-content)</code>와 유사하다.</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="built_in">fit-content</span>(<span class="number">300px</span>) <span class="built_in">fit-content</span>(<span class="number">300px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/grid_fit_content.jpg" alt="grid-fit-content"></p>
<h2 id="Grid-Units"><a href="#Grid-Units" class="headerlink" title="Grid Units"></a>Grid Units</h2><h3 id="fr"><a href="#fr" class="headerlink" title="fr"></a>fr</h3><p><code>fr</code>(fractional unit)은 사용 가능한 공간에 대한 비율을 의미한다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 3번째 컬럼에 100px, 4번째 컬럼에 25%를 사용하고 */</span></span><br><span class="line"><span class="comment">/* 남은 공간을 1번째 컬럼에 ‘1/3’, 2번째 컬럼에 ‘2/3’ 만큼 사용 */</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="number">1</span>fr <span class="number">2</span>fr <span class="number">100px</span> <span class="number">25%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/grid_fr.jpg" alt="grid-fr"></p>
<h3 id="min-content"><a href="#min-content" class="headerlink" title="min-content"></a>min-content</h3><p>그리드 아이템이 포함하는 내용(Contents)의 최소 크기를 의미한다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>lorem ipsum<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: min-content <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/grid_min_content.jpg" alt="grid-min-content"></p>
<ul>
<li>한글을 사용하는 경우 <code>word-break: keep-all;</code>를 설정하면 정상적으로 동작한다.</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>내용의 최소 크기<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/grid_min_content2.jpg" alt="grid-min-content"></p>
<h3 id="max-content"><a href="#max-content" class="headerlink" title="max-content"></a>max-content</h3><p>그리드 아이템이 포함하는 내용(Contents)의 최대 크기를 의미한다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>Hello HEROPY~<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: max-content <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/grid_max_content.jpg" alt="grid-max-content"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(<span class="number">4</span>, <span class="built_in">minmax</span>(max-content, <span class="number">1</span>fr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>그리드 함수들과 같이 더 유용하게 활용할 수 있다.</li>
<li>총 4컬럼 그리드를 생성하며 각 열(Track)은 최대 1fr 크기를 가지지만, <code>max-content</code>를 통해 포함된 그리드 아이템의 내용보다 작아질 수 없다.</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(<span class="number">4</span>, <span class="built_in">minmax</span>(max-content, <span class="number">1</span>fr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="auto-fill-auto-fit"><a href="#auto-fill-auto-fit" class="headerlink" title="auto-fill, auto-fit"></a>auto-fill, auto-fit</h3><p>행/열(Track)의 개수를 그리드 컨테이너(Container) 및 행/열 크기에 맞게 자동으로(암시적) 조정한다.<br><code>repeat()</code> 함수와 같이 사용하며, 행/열과 아이템(Item) 개수가 명확할 필요가 없거나 명확하지 않은 경우 유용하다. (반응형 그리드)<br><code>auto-fill</code>과 <code>auto-fit</code>은 간단한 차이점을 제외하면 동일하게 동작한다.</p>
<p><em><strong>예제01</strong></em></p>
<ul>
<li>다음 4컬럼 그리드 예제에서 컨테이너의 크기가 아이템들을 수용하기 충분하지 않은 경우 아이템은 넘치기 시작한다.</li>
<li>아이템의 최소 크기가 120px이다.</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(<span class="number">4</span>, <span class="built_in">minmax</span>(<span class="number">120px</span>, <span class="number">1</span>fr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/grid_fill_fit.jpg" alt="grid-fill-fit"></p>
<p><em><strong>예제02</strong></em></p>
<ul>
<li>만약 4컬럼 그리드를 고집할 필요가 없다면, 다음과 같이 ‘반복횟수’(<code>repeat()</code> 함수의 첫 번째 인수)를 <code>auto-fill</code>이나 <code>auto-fit</code>으로 수정할 수 있다.</li>
<li>컨테이너의 크기가 아이템들을 수용하기 충분하지 않을 경우 아이템을 자동으로 줄 바꿈 처리하며, 그에 맞게 암시적 행/열도 자동으로 수정한다.</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(auto-fill, <span class="built_in">minmax</span>(<span class="number">120px</span>, <span class="number">1</span>fr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/grid_fill_fit2.jpg" alt="grid-fill-fit"></p>
<p><em><strong>auto-fill과 auto-fit의 차이</strong></em></p>
<ul>
<li><code>auto-fill</code>과 <code>auto-fit</code>은 차이점은 그리드 컨테이너가 하나의 행/열(Track)에 모든 아이템을 수용하고 남는 공간이 있을 때 발생한다.</li>
<li><code>auto-fill</code>은 남는 공간(빈 트랙)을 그대로 유지하고, <code>auto-fit</code>은 남는 공간을 축소한다.</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span><span class="selector-class">.auto-fill</span> &#123;</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(auto-fill, <span class="built_in">minmax</span>(<span class="number">120px</span>, <span class="number">1</span>fr));</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span><span class="selector-class">.auto-fit</span> &#123;</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(auto-fit, <span class="built_in">minmax</span>(<span class="number">120px</span>, <span class="number">1</span>fr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/grid_fill_fit3.jpg" alt="grid-fill-fit"></p>
<h2 id="주요-용어-정리"><a href="#주요-용어-정리" class="headerlink" title="주요 용어 정리"></a>주요 용어 정리</h2><h3 id="Track"><a href="#Track" class="headerlink" title="Track"></a>Track</h3><p>트랙(Track)은 하나의 행(Row) 혹은 열(Column)을 의미한다.</p>
<p><img src="/images/grid_track.jpg" alt="grid-fill-fit"></p>
<h3 id="Line"><a href="#Line" class="headerlink" title="Line"></a>Line</h3><p>선(Line)은 일반적으로 거터(Gutter)라고 하는 트랙과 트랙 사이의 간격을 의미한다.</p>
<p><img src="/images/grid_line.jpg" alt="grid-fill-fit"></p>
<h3 id="Cell-Area"><a href="#Cell-Area" class="headerlink" title="Cell, Area"></a>Cell, Area</h3><ul>
<li>셀(Cell)은 아이템(Item)이 배치되는 최소 단위의 영역(Area)이다.</li>
<li>영역(Area)은 아이템이 배치되는, 하나 이상의 셀(Cell)로 이루어진 영역이다.</li>
</ul>
<p><img src="/images/grid_cell_area.jpg" alt="grid-fill-fit"></p>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://heropy.blog/2019/08/17/css-grid/">https://heropy.blog/2019/08/17/css-grid/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>grid</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 네이밍</title>
    <url>/2021/12/09/css-naming/</url>
    <content><![CDATA[<h2 id="BEM"><a href="#BEM" class="headerlink" title="BEM"></a>BEM</h2><ul>
<li>Block: 재사용 가능한 독립적인 블록.</li>
<li>Element: 블록을 구성하는 종속적인 하위 요소.</li>
<li>Modifier: 블록 또는 요소의 변형(모양, 상태, 동작) → 확장할 때 이용</li>
</ul>
<a id="more"></a>

<ol>
<li><p>의미론적 클래스 선택자 작명 규칙. (약어 선택 피함)</p>
</li>
<li><p>다른 형식의 선택자 사용을 제한.(<code>--</code>, <code>__</code> 제외하고 다른 형식의 기호 피함)</p>
</li>
<li><p>전역에서 유일한 이름 권장.</p>
</li>
<li><p>낮은 선택자 특이성 유지.</p>
</li>
<li><p>HTML/CSS 연결이 느슨하고 병렬 개발이 가능.</p>
</li>
<li><p>두개의 언더바(<code>__*</code>)는 하위 요소를 의미</p>
</li>
<li><p>두개의 하이픈(<code>--*</code>)은 상태 변형을 의미 </p>
</li>
<li><p>하나의 이름에 요소, 변형은 각 한 번만 허용 (두개 이상 연속 불가)</p>
</li>
</ol>
<ul>
<li>변형 클래스 단독적으로 사용 불가</li>
<li>타입 선택자는 안티 패턴</li>
</ul>
<h2 id="Atomic-Utility-First-CSS"><a href="#Atomic-Utility-First-CSS" class="headerlink" title="Atomic / Utility First CSS"></a>Atomic / Utility First CSS</h2><ol>
<li>라이브러리 타입으로 빠른 스타일 구축 가능.</li>
<li>다른 방법론과 함께 사용 가능.</li>
<li>스타일 관점의 작명. 의미론을 사용하지 않음.</li>
<li>HTML 코드에 스타일이 강하게 연결됨.</li>
<li>HTML/CSS 병렬 개발 불가능. 소규모 팀 또는 단일 엔지니어 개발에 적합.</li>
</ol>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>패스트 캠퍼스 The RED : 견고한 UI 설계를 위한 마크업 가이드 _ 정찬명 강사님</p>
</blockquote>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>the red</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS OOCSS 방법론</title>
    <url>/2020/11/10/css-oocss-methodology/</url>
    <content><![CDATA[<p>Object Oriented CSS의 약자이며 Nicole Sullivan에 의해 개발된 프레임워크이다. CSS를 모듈 방식으로 코딩하여 중복을 최소화하는 기법이다.</p>
<a id="more"></a>

<h2 id="기본-원칙"><a href="#기본-원칙" class="headerlink" title="기본 원칙"></a>기본 원칙</h2><ul>
<li><p><strong>구조(structure)와 모양(skin)의 분리</strong>: 반복적인 시각적 기능(배경, 테두리 등)을 별도의 “스킨”으로 정의하여 다양한 객체와 혼합한다. 중복 코드 없이 시각적 다양성을 표현할 수 있다.</p>
</li>
<li><p><strong>콘테이너와 콘텐츠의 분리</strong>: 스타일을 정의할 때 의존적인 스타일을 사용하지 않는다. 사물의 모양은 어디에 위치하던간에 동일하게 보인다.</p>
<ul>
<li>ex. <code>h2</code>에 <code>.title</code>(클래스 이름)을 부여하여 사용하면 클래스가 없는 <code>h2</code>와 <code>.title</code> 클래스 역시 동일하게 보이기 때문에 불필요한 스타일을 중복해서 정의할 필요가 없다.</li>
</ul>
</li>
</ul>
<h2 id="네이밍-방법"><a href="#네이밍-방법" class="headerlink" title="네이밍 방법"></a>네이밍 방법</h2><ul>
<li>가능하면 짧고 간결하게 작성한다.</li>
<li>동작과 형태가 예상이 가능하도록 명확하게 작성한다.</li>
<li>어떻게 생겼는지보다는 어떤 목적인지 알 수 있도록 의미가 있게 작성한다.</li>
<li>지나치게 구체적이지 않고 일반적으로 사용 가능하도록 작성한다.</li>
<li>종이나 다른 매체가 아닌 모니터를 중심으로 작성한다.</li>
</ul>
<h2 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h2><ul>
<li>많은 CSS 코드를 재사용하면서 코드 길이가 줄어들기 때문에 CSS 파일 크기가 작아진다. 속도를 향상시킬 수 있다.</li>
<li>새로운 요소를 추가할 때 기존 모듈을 통해서 재사용이 가능하고 쉽게 확장 가능하여 유지보수성이 높아진다.</li>
</ul>
<h2 id="단점"><a href="#단점" class="headerlink" title="단점"></a>단점</h2><ul>
<li>복잡해지는 HTML이 오히려 유지보수를 어렵게 한다는 의견이 있다.</li>
<li>가독성이 떨어진다.</li>
<li>미디어 객체와 같은 일부 모듈에 적용하기 좋아보이지만 프로젝트 전반적으로 적용하기 어렵다.</li>
<li>non-semantic한 클래스를 사용한다.</li>
<li>Sass와 함께 사용하게 되면 단점을 보완할 수 있다.</li>
</ul>
<hr>
<blockquote>
<p><strong>REFERENCE</strong></p>
</blockquote>
<ul>
<li><a href="https://medium.com/witinweb/css-%EB%B0%A9%EB%B2%95%EB%A1%A0-2-oocss-object-oriented-css-4064e1119354">https://medium.com/witinweb/css-%EB%B0%A9%EB%B2%95%EB%A1%A0-2-oocss-object-oriented-css-4064e1119354</a></li>
<li><a href="https://wit.nts-corp.com/2015/04/16/3538">https://wit.nts-corp.com/2015/04/16/3538</a></li>
</ul>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>methodology</tag>
        <tag>OOCSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 레이아웃 여백</title>
    <url>/2021/12/11/css-layout-space/</url>
    <content><![CDATA[<ul>
<li>vmin, vmax: viewfort-min, viewfort-max</li>
<li>padding의 %값: 컨테이너 블럭의 너비값을 참조한다. (padding-top이든, padding-left이든 너비를 참조함)</li>
<li>margin의  %값: 컨테이너 블럭의 너비값을 참조한다.</li>
</ul>
<a id="more"></a>

<h2 id="종횡비-기법"><a href="#종횡비-기법" class="headerlink" title="종횡비 기법"></a>종횡비 기법</h2><p><strong>1</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">iframe</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100vw</span>; <span class="comment">/* Check margin or scroll */</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">56.25vw</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>마진이 있을 경우 그만큼 밀려남.</li>
<li>영상을 뷰포트에 맞춤하는 경우 유용</li>
</ul>
<p><strong>2</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">iframe</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: auto;</span><br><span class="line">    aspect-ratio: <span class="number">100</span> / <span class="number">56.25</span>; <span class="comment">/* check caniuse*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>사파리, 삼성 인터넷 지원 확인 필요</li>
</ul>
<p><strong>3</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.utube</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">56.25%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.utube_iframe</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;<span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="종횡비-유지-유용성"><a href="#종횡비-유지-유용성" class="headerlink" title="종횡비 유지 유용성"></a>종횡비 유지 유용성</h3><ul>
<li>누적 배치 변경(CLS) 문제 해결 (Cumulative Layout Shift)</li>
<li>스켈레톤 ui를 제공할 때</li>
<li>이미지 지연 로딩 기법을 사용할 때</li>
<li>content-visibility: auto; 속성을 사용할 때</li>
<li>요소와 문서 전체 높이를 일정하게 유지하는 데 필요하다.</li>
</ul>
<h2 id="수직-마진-병합-예외"><a href="#수직-마진-병합-예외" class="headerlink" title="수직 마진 병합 예외"></a>수직 마진 병합 예외</h2><ul>
<li>최상위 요소(body)의 수직 마진</li>
<li>부모의 <code>display: flow-root</code></li>
<li>부모의 <code>overflow:hidden | auton | scroll</code></li>
<li>부모의 <code>padding-top/bottom</code> 값이 0이 아닌</li>
<li>부모의 <code>border-top/bottom</code> 값이 0이 아닌</li>
<li><code>display: inline | inline-*</code></li>
<li><code>float: left | right</code></li>
</ul>
<h3 id="수직-마진을-병합하려는-이유"><a href="#수직-마진을-병합하려는-이유" class="headerlink" title="수직 마진을 병합하려는 이유"></a>수직 마진을 병합하려는 이유</h3><ul>
<li>필요 이상의 과도한 마진이 발생하는 것을 상쇄하려는 목적을 가지고 있다.</li>
<li>UA 초기 스타일에 수직 마진이 있는 요소<ul>
<li>h1~6, ul, ol, dl, p, blockquote, figure, hr</li>
</ul>
</li>
</ul>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>패스트 캠퍼스 The RED : 견고한 UI 설계를 위한 마크업 가이드 _ 정찬명 강사님</p>
</blockquote>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>the red</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 레이아웃 배치</title>
    <url>/2021/12/10/css-layout-arrange/</url>
    <content><![CDATA[<h2 id="display"><a href="#display" class="headerlink" title="display"></a>display</h2><blockquote>
<p><strong>inline</strong>, <strong>block</strong>, list-item, <strong>inline-block</strong>, table, inline-table, table-row-group, table-header-group, table-footer-group, table-row, table-column-group, table-column, table-cell, tabel-caption, <strong>none</strong>, inherit</p>
</blockquote>
<a id="more"></a>

<h3 id="Lv3에서-새로-추가된-값들"><a href="#Lv3에서-새로-추가된-값들" class="headerlink" title="Lv3에서 새로 추가된 값들"></a>Lv3에서 새로 추가된 값들</h3><blockquote>
<p>run-in, flow, <strong>flow-root</strong>, <strong>flex</strong>, <strong>grid</strong>, ruby, ruby-base, ruby-text, ruby-base-container, ruby-text-container, <strong>contents</strong>, inline-table, inline-flex, inline-grid</p>
</blockquote>
<ul>
<li><code>positin: absolute | fixed</code>나 <code>float: left | right</code>인 경우 강제적으로 <code>display: block</code>이 된다.</li>
<li><code>hidden</code>이라는 속성을 사용할 수도 있다. (<code>&lt;p class=&quot;desc&quot; hidden&gt;</code>)</li>
</ul>
<h3 id="flow-root"><a href="#flow-root" class="headerlink" title="flow-root"></a>flow-root</h3><ul>
<li>블록 컨테이너가 된다.</li>
<li>포함 콘텐츠는 새 블록 문맥(block formatting context)가 된다.</li>
<li>float, margin 속성을 다르게 처리</li>
<li>블록이 된다.</li>
<li>포함한 float 요소는 컨테이너 끝에서 clear가 된다.</li>
<li>부모 자식 요소의 수직 마진을 병합하지 않는다.</li>
</ul>
<h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><ul>
<li>flex 컨테이너 박스를 생성한다.</li>
<li>flex 형식 문맥을 형성한다.</li>
<li>포함 아이템을 1차원 기반으로 배치.</li>
</ul>
<h3 id="grid"><a href="#grid" class="headerlink" title="grid"></a>grid</h3><ul>
<li>grid 컨테이너 박스를 생성한다.</li>
<li>grid 형식 문맥을 설정한다.</li>
<li>포함 아이템을 2차원 기반으로 배치.</li>
</ul>
<h2 id="position"><a href="#position" class="headerlink" title="position"></a>position</h2><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><ul>
<li>left, right, top, bottom, z-index (X)</li>
<li>배치기준 없음. 흐름에 따라 배치.</li>
</ul>
<h3 id="relative"><a href="#relative" class="headerlink" title="relative"></a>relative</h3><ul>
<li>left, right, top, bottom, z-index, inset (O)</li>
<li>박스 현재 위치가 배치의 기준.</li>
<li>배치를 변경할 때 다른 박스의 흐름을 깨지 않음.</li>
<li>자식 또는 자손 요소의 absolute 배치 기준이 됨.</li>
<li>inset: 4개의 값을 입력할 수 있다. 하나만 입력하면 네곳을 하나의 값으로 함.</li>
</ul>
<h3 id="absolute"><a href="#absolute" class="headerlink" title="absolute"></a>absolute</h3><ul>
<li>left, right, top, bottom, z-index, inset (O)</li>
<li>일반적인 흐름에서 완전히 이탈.</li>
<li>부모, 형제의 크기나 위치에 전혀 영향을 미치지 않음.</li>
<li>조상 박스가 relative, absolute, fixed, transform일 때 조상 기준으로 배치.</li>
<li>inset:0, margin:auto를 이용하면 박스가 가운데에 온다.</li>
</ul>
<h3 id="fixed"><a href="#fixed" class="headerlink" title="fixed"></a>fixed</h3><ul>
<li>left, right, top, bottom, z-index, inset (O)</li>
<li>뷰포트가 배치 기준.</li>
<li>조상 요소에 transform 속성이 있으면 transform 속성이 있는 요소가 배치 기준.</li>
</ul>
<h3 id="sticky"><a href="#sticky" class="headerlink" title="sticky"></a>sticky</h3><ul>
<li>left, right, top, bottom, z-index, inset (O)</li>
<li>스크롤 포트가 배치 기준</li>
<li>부모 요소가 스크롤 포트에 보이는 동안 스크롤 포트 기준으로 고정</li>
<li>부모 요소가 스크롤 밖으로 이탈하면 고정을 멈춤</li>
</ul>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>패스트 캠퍼스 The RED : 견고한 UI 설계를 위한 마크업 가이드 _ 정찬명 강사님</p>
</blockquote>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>the red</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 최적화</title>
    <url>/2021/12/16/css-optimization/</url>
    <content><![CDATA[<ul>
<li>사용하지 않는 CSS 제거</li>
<li>렌더 차단 리소스 제거</li>
</ul>
<a id="more"></a>

<h2 id="사용하지-않는-CSS"><a href="#사용하지-않는-CSS" class="headerlink" title="사용하지 않는 CSS"></a>사용하지 않는 CSS</h2><ul>
<li>css는 페이지 렌더링을 차단하는 리소스. 브라우저가 스타일을 계산하는데 잠재적으로 더 많은 시간을 소비한다.</li>
<li>구글 라이트하우스는 2KB 이상 미사용 CSS가 포함된 파일을 검출한다.</li>
</ul>
<h2 id="렌더-차단-리소스"><a href="#렌더-차단-리소스" class="headerlink" title="렌더 차단 리소스"></a>렌더 차단 리소스</h2><ul>
<li>브라우저가 외부 리소스를 다운로드 하고 파싱하는 동안 페이지 콘텐츠를 파싱하거나 렌더링하지 않기 때문에 페이지 표시 속도 저하의 원인이 된다.</li>
<li>unused css는 render blocking을 가중시키는 요인.</li>
<li>렌더 블로킹 리소스 표시 조건<ul>
<li><code>defer</code>, <code>async</code> 속성이 없는 <code>head</code> 요소의 <code>script</code> 태그</li>
<li><code>media</code> 속성과 <code>&lt;link rel=&quot;stylesheet&quot;&gt;</code> 태그</li>
</ul>
</li>
</ul>
<h3 id="렌더-차단-스크립트"><a href="#렌더-차단-스크립트" class="headerlink" title="렌더 차단 스크립트"></a>렌더 차단 스크립트</h3><ol>
<li>필수 스크립트는 html에 <code>&lt;script&gt;</code> 형식으로 작성</li>
<li>기타 스크립트는 <code>&lt;/body&gt;</code> 종료 태그 직전에 선언</li>
<li>마지막에 파싱해도 문제 없으면 <code>defer</code> 속성</li>
<li>가능한 빠른 시점에 실행 필요하면 <code>async</code> 속성</li>
</ol>
<h3 id="렌더-차단-lt-link-rel-quot-stylesheet-quot-gt"><a href="#렌더-차단-lt-link-rel-quot-stylesheet-quot-gt" class="headerlink" title="렌더 차단 &lt;link rel=&quot;stylesheet&quot;&gt;"></a>렌더 차단 <code>&lt;link rel=&quot;stylesheet&quot;&gt;</code></h3><ul>
<li><code>media</code> 속성이 없거나 값이 <code>all</code>이면 렌더 차단 리소스</li>
</ul>
<ol>
<li>반응형 웹인 경우 해상도 구간 별로 css 파일을 분리하고 <code>media</code> 속성으로 분기<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;*.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">media</span>=<span class="string">&quot;max-width:639px&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;*.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">media</span>=<span class="string">&quot;min-width:640px&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>필수 스타일은 페이지 <code>&lt;head&gt;</code>에 <code>&lt;style&gt;</code>형식으로 작성<ul>
<li>지연 스타일은 <code>&lt;link rel=&quot;preload&quot;&gt;</code> 속성으로 병렬 로딩후 지연 적용</li>
<li><code>this.onload=null</code> 할당 이유: <code>rel</code> 속성을 변경할 때 일부 브라우저가 다시 <code>onload</code> 실행하는 것을 방어하는 코드</li>
<li>외부 스타일 파일이 렌더링(FCP)을 차단하지 않음<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="comment">/* 필수 스타일 여기 */</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preload&quot;</span> <span class="attr">as</span>=<span class="string">&quot;style&quot;</span> <span class="attr">href</span>=<span class="string">&quot;x.css&quot;</span> <span class="attr">onload</span>=<span class="string">&quot;this.onload=null;this.rel=&#x27;stylesheet&#x27;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>패스트 캠퍼스 The RED : 견고한 UI 설계를 위한 마크업 가이드 _ 정찬명 강사님</p>
</blockquote>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>the red</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS overflow</title>
    <url>/2020/11/14/css-overflow/</url>
    <content><![CDATA[<p><code>text-overflow</code> CSS 속성은 숨겨진 오버플로우 콘텐츠가 사용자에게 어떻게 보여지는지 설정한다. 잘라내거나, 줄임표(‘…’)로 표시하거나, 맞춤 문자열을 표시할 수 있다.</p>
<a id="more"></a>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-overflow</span>: clip;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line"><span class="attribute">text-overflow</span>: <span class="string">&quot;-&quot;</span>;</span><br><span class="line"><span class="attribute">text-overflow</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>text-overflow</code> 속성으로는 오버플로우가 발생하지 않는다.  텍스트가 컨테이너에 넘치게 하려면 다른 CSS 속성(오버플로 및 화이트 스페이스)을 설정해야 한다. 인라인 진행 방향으로 블록 컨테이너 요소를 넘치고 있는 내용에만 영향을 미친다(예: 상자 하단에 텍스트가 넘치는 것은 아님).</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br></pre></td></tr></table></figure>

<h2 id="문법"><a href="#문법" class="headerlink" title="문법"></a>문법</h2><p>하나 또는 두 개의 값을 사용하여 지정할 수 있다. 하나의 값이 주어지면, 선의 끝에 대해 오버플로우 동작을 지정한다.</p>
<h3 id="값"><a href="#값" class="headerlink" title="값"></a>값</h3><p><em><strong>clip</strong></em></p>
<p>속성의 기본값. 키워드 값은 내용 영역의 한도에서 텍스트를 잘라서 문자 중간에 잘릴 수 있다. 문자 간 전환 시 클립으로 텍스트 오버플로(<code>text-overflow: &#39;&#39;;</code>)를 대상 브라우저에서 지원하는 경우 빈 문자열로 지정할 수 있다.</p>
<p><em><strong>ellipsis</strong></em><br>이 키워드 값은 잘린 텍스트를 나타내는 줄임표(‘…’, U+2026 수평 줄임표)를 표시한다. 내용 영역 내에 줄임표가 표시되어 표시되는 텍스트의 양을 감소시킨다. 타원을 표시할 공간이 충분하지 않으면 잘린다.</p>
<p><em><strong>string</strong></em></p>
<p>잘린 텍스트를 나타내는 데 사용된다. 문자열은 내용 영역 내에 표시되며, 표시되는 텍스트의 크기를 줄인다. 문자열 자체를 표시할 공간이 부족하면 잘린다.</p>
<p><em><strong>fade</strong></em></p>
<p>넘쳐나는 인라인 콘텐츠를 클립하고 가장자리에 완전한 투명도를 가진 라인 박스 가장자리 근처에 페이드 아웃 효과를 적용한다.</p>
<p><em><strong>fade(<code>&lt;length&gt;</code>/<code>&lt;percentage&gt;</code>)</strong></em></p>
<p>넘치는 인라인 콘텐츠를 클립으로 고정하고 가장자리에 완전한 투명도를 가진 라인 박스 가장자리 근처에 페이드 아웃 효과를 적용한다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[ clip | ellipsis | &lt;string&gt; ]&#123;1,2&#125;</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/text-overflow#fade(%20%3Clength%3E%20|%20%3Cpercentage%3E%20)">https://developer.mozilla.org/en-US/docs/Web/CSS/text-overflow#fade(%20%3Clength%3E%20|%20%3Cpercentage%3E%20)</a></p>
</blockquote>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>overflow</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 미디어쿼리</title>
    <url>/2020/11/08/css-mediaquery/</url>
    <content><![CDATA[<p>다양한 미디어 유형이나 장치에 따라 서로 다른 스타일 규칙을 적용할 수 있다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">media 미디어타입 and (미디어특성) &#123;</span><br><span class="line">    CSS 코드</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="미디어-타입"><a href="#미디어-타입" class="headerlink" title="미디어 타입"></a>미디어 타입</h2><table>
<thead>
<tr>
<th>타입</th>
<th>의미</th>
<th>기본값</th>
</tr>
</thead>
<tbody><tr>
<td><code>all</code></td>
<td>모든 미디어 타입에 적용</td>
<td>all</td>
</tr>
<tr>
<td><code>screen</code></td>
<td>컴퓨터 화면, 태블릿, 스마트폰 등</td>
<td></td>
</tr>
<tr>
<td><code>print</code></td>
<td>인쇄 전용</td>
<td></td>
</tr>
</tbody></table>
<h2 id="미디어-특성"><a href="#미디어-특성" class="headerlink" title="미디어 특성"></a>미디어 특성</h2><table>
<thead>
<tr>
<th>특성</th>
<th>의미</th>
</tr>
</thead>
<tbody><tr>
<td><code>width</code></td>
<td>뷰포트 가로 너비</td>
</tr>
<tr>
<td><code>max-width</code></td>
<td>뷰포트 최대 가로 너비(이하)</td>
</tr>
<tr>
<td><code>min-width</code></td>
<td>뷰포트 최소 가로 너비(이상)</td>
</tr>
<tr>
<td><code>height</code></td>
<td>뷰포트 세로 너비</td>
</tr>
<tr>
<td><code>max-height</code></td>
<td>뷰포트 최대 세로 너비(이하)</td>
</tr>
<tr>
<td><code>min-height</code></td>
<td>뷰포트 최대 세로 너비(이상)</td>
</tr>
<tr>
<td><code>orientation</code></td>
<td>뷰포트 방향(<code>portrait</code>, <code>landscape</code>)</td>
</tr>
<tr>
<td>기타</td>
<td>다른 특성들</td>
</tr>
</tbody></table>
<h2 id="Miead-Grid-options"><a href="#Miead-Grid-options" class="headerlink" title="Miead(Grid) options"></a>Miead(Grid) options</h2><table>
<thead>
<tr>
<th>종류</th>
<th>디바이스</th>
<th>단위(px)</th>
</tr>
</thead>
<tbody><tr>
<td>Large Devices</td>
<td>Desktops</td>
<td>1024px 이상</td>
</tr>
<tr>
<td>Medium Devices</td>
<td>Desktops + Tablets</td>
<td>1024px 이하</td>
</tr>
<tr>
<td>Small evices</td>
<td>Tablets</td>
<td>992px 이하</td>
</tr>
<tr>
<td>Extra Small Devices</td>
<td>Phones</td>
<td>768px 이하</td>
</tr>
</tbody></table>
<h2 id="미디어쿼리-파일-관리"><a href="#미디어쿼리-파일-관리" class="headerlink" title="미디어쿼리 파일 관리"></a>미디어쿼리 파일 관리</h2><p>미디어쿼리는 파일을 분리하여 관리할 수 있다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">media</span>=<span class="string">&quot;미디어타입 and (미디어특성)&quot;</span> <span class="attr">href</span>=<span class="string">&quot;파일명&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>패스트 캠퍼스 온라인 강의 HTML &amp; CSS _ 박영웅 강사님</p>
</blockquote>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>media query</tag>
        <tag>responsive</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 이벤트 제어 속성</title>
    <url>/2020/12/09/css-pointer-events/</url>
    <content><![CDATA[<p>요소에 부여된 이벤트를 제거하거나 활성화시켜야 하는 경우가 있는데 이럴 때 <code>pointer-events</code> 속성을 사용한다. 요소들의 마우스/터치 이벤트들의 응답을 조절할 수 있다.</p>
<a id="more"></a>

<h2 id="HTML-요소에서-사용-가능한-속성값"><a href="#HTML-요소에서-사용-가능한-속성값" class="headerlink" title="HTML 요소에서 사용 가능한 속성값"></a>HTML 요소에서 사용 가능한 속성값</h2><ul>
<li><code>none</code> : 요소가 포인터 이벤트의 대상이 되지 않는다. 해당 요소의 자손이 다른 <code>pointer-events</code> 값을 가지고 있는 경우 그 자손은 대상이 될 수 있다.</li>
<li><code>auto</code> : 요소가 <code>pointer-events</code> 속성을 지정하지 않은 것처럼 한다. <code>svg</code>에서는 <code>auto</code>와 <code>visiblePainted</code>가 동일한 효과를 지닌다.</li>
<li><code>inherit</code> : 부모 요소로부터  <code>pointer-events</code> 속성값을 상속받는다.</li>
</ul>
<blockquote>
<p>IE9와 IE10에서 <code>pointer-events</code>가 작동하지 않으므로 <code>visibility: hidden</code>과 함께 사용하는 것을 고려해야 한다.</p>
</blockquote>
<h2 id="SVG-전용-속성값"><a href="#SVG-전용-속성값" class="headerlink" title="SVG 전용 속성값"></a>SVG 전용 속성값</h2><ul>
<li>visiblePainted</li>
<li>visibleFill</li>
<li>visibleStroke</li>
<li>visible</li>
<li>painted</li>
<li>fill</li>
<li>stroke</li>
<li>all</li>
</ul>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://developer.mozilla.org/ko/docs/Web/CSS/pointer-events">https://developer.mozilla.org/ko/docs/Web/CSS/pointer-events</a></p>
</blockquote>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>overflow</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS의 절대 권력, 초기화</title>
    <url>/2021/12/08/css-reset/</url>
    <content><![CDATA[<ul>
<li>대부분의 초기화 스타일은 쓸모 없거나 덮어쓴다.</li>
<li>개발자 도구에서 <code>coverage</code>를 검색해 사용되지 않는 CSS를 확인할 수 있다.</li>
</ul>
<a id="more"></a>

<h2 id="넣으면-적절할-것-같은-코드들"><a href="#넣으면-적절할-것-같은-코드들" class="headerlink" title="넣으면 적절할 것 같은 코드들"></a>넣으면 적절할 것 같은 코드들</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">overflow-wrap</span>: break-word;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* DO NOT BREAK KOREAN WORDS */</span></span><br><span class="line"><span class="selector-pseudo">:lang</span>(ko) &#123;</span><br><span class="line">    <span class="attribute">word-break</span>: keep-all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>클래스로 reset 하는 경우가 좋을 수도 있다.<ul>
<li>클래스<code>:where</code>(선택자): 선택자 정수, 선택자의 특이성을 증가시키지 않음</li>
<li>ex) <code>class:where(ol, ul) &#123;list-style: none;&#125;</code> -&gt; ol, ul에 클래스가 들어가있는 곳만 초기화</li>
<li><code>is</code>도 같은 기능을 하고 있지만, 특이성을 증가시킴</li>
<li><code>is</code>, <code>where</code>은 아직 삼성 브라우저에서 작동하지 않음.</li>
</ul>
</li>
</ul>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>패스트 캠퍼스 The RED : 견고한 UI 설계를 위한 마크업 가이드 _ 정찬명 강사님</p>
</blockquote>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>the red</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 셀렉터</title>
    <url>/2020/10/29/css-selecter/</url>
    <content><![CDATA[<p>style을 적용하고자 하는 HTML 요소를 선택할 때 셀렉터를 사용하며 선택한 요소에 스타일을 정의한다. 여러개의 셀렉터를 함께 사용할 수 있고 쉼표(<code>,</code>)로 구분한다.</p>
<a id="more"></a>

<p><img src="/images/css3-selector.jpg" alt="CSS3 셀렉터"></p>
<h2 id="셀렉터-Selector"><a href="#셀렉터-Selector" class="headerlink" title="셀렉터 (Selector)"></a>셀렉터 (Selector)</h2><table>
<thead>
<tr>
<th>패턴</th>
<th>설명</th>
</tr>
</thead>
<tbody><tr>
<td>*</td>
<td><strong>전체 셀렉터 (Universal Selector)</strong>: head 요소와 html 요소를 포함한 모든 요소를 선택한다.</td>
</tr>
<tr>
<td>태그명</td>
<td><strong>태그 셀렉터 (Type Selector)</strong>: 지정된 태그명을 가지는 요소를 선택한다.</td>
</tr>
<tr>
<td>#id 어트리뷰트 값</td>
<td><strong>ID 셀렉터 (ID Selector)</strong>: id 어트리뷰트 값(중복될 수 없다)을 지정하여 일치하는 요소를 선택한다.</td>
</tr>
<tr>
<td>.class 어트리뷰트 값</td>
<td><strong>클래스 셀렉터 (Class Selector)</strong>: class 어트리뷰트 값(중복이 가능하다)을 지정하여 일치하는 요소를 선택한다. 재사용의 측면에서 유용하다.</td>
</tr>
<tr>
<td>셀렉터[어트리뷰트]</td>
<td><strong>어트리뷰트 셀렉터 (Attribute Selector)</strong>: 지정된 어트리뷰트를 갖는 모든 요소를 선택한다.</td>
</tr>
<tr>
<td>셀렉터[어트리뷰트=”값”]</td>
<td><strong>어트리뷰트 셀렉터 (Attribute Selector)</strong>: 지정된 어트리뷰트를 가지며 지정된 값과 어트리뷰트의 값이 일치하는 모든 요소를 선택한다.</td>
</tr>
<tr>
<td>셀렉터[어트리뷰트~=”값”]</td>
<td><strong>어트리뷰트 셀렉터 (Attribute Selector)</strong>: 지정된 어트리뷰트의 값이 지정된 값을 (공백으로 분리된) 단어로 포함하는 요소를 선택한다.</td>
</tr>
<tr>
<td>셀렉터[어트리뷰트│=”값”]</td>
<td><strong>어트리뷰트 셀렉터 (Attribute Selector)</strong>: 지정된 어트리뷰트의 값과 일치하거나 지정 어트리뷰트 값 뒤 연이은 하이픈(“값-“)으로 시작하는 요소를 선택한다.</td>
</tr>
<tr>
<td>셀렉터[어트리뷰트^=”값”]</td>
<td><strong>어트리뷰트 셀렉터 (Attribute Selector)</strong>: 지정된 어트리뷰트 값으로 시작하는 요소를 선택한다.</td>
</tr>
<tr>
<td>셀렉터[어트리뷰트$=”값”]</td>
<td><strong>어트리뷰트 셀렉터 (Attribute Selector)</strong>: 지정된 어트리뷰트 값으로 끝나는 요소를 선택한다.</td>
</tr>
<tr>
<td>셀렉터[어트리뷰트*=”값”]</td>
<td>지정된 어트리뷰트 값을 포함하는 요소를 선택한다.</td>
</tr>
</tbody></table>
<h2 id="복합-셀렉터-Combinator"><a href="#복합-셀렉터-Combinator" class="headerlink" title="복합 셀렉터 (Combinator)"></a>복합 셀렉터 (Combinator)</h2><h3 id="후손-셀렉터-Descendant-Combinator"><a href="#후손-셀렉터-Descendant-Combinator" class="headerlink" title="후손 셀렉터 (Descendant Combinator)"></a>후손 셀렉터 (Descendant Combinator)</h3><p>셀렉터A의 모든 후손(하위) 요소중 셀렉터B와 일치하는 요소를 선택한다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">셀렉터A 셀렉터B</span><br></pre></td></tr></table></figure>

<h3 id="자식-셀렉터-Child-Combinator"><a href="#자식-셀렉터-Child-Combinator" class="headerlink" title="자식 셀렉터 (Child Combinator)"></a>자식 셀렉터 (Child Combinator)</h3><p>셀렉터A의 모든 자식 요소 중 셀렉터B와 일치하는 요소를 선택한다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">셀렉터A &gt; 셀렉터B</span><br></pre></td></tr></table></figure>

<h3 id="형제-동위-셀렉터-Sibling-Combinator"><a href="#형제-동위-셀렉터-Sibling-Combinator" class="headerlink" title="형제(동위) 셀렉터 (Sibling Combinator)"></a>형제(동위) 셀렉터 (Sibling Combinator)</h3><p>형제 관계(동위 관계)에서 뒤에 위치하는 요소를 선택할 때 사용한다.</p>
<p><em><strong>인접 형제 셀렉터(Adjacent Sibling Combinator)</strong></em></p>
<p>셀렉터A의 형제 요소 중 셀렉터A 바로 뒤에 위치하는 셀렉터B 요소를 선택한다. A와 B 사이에 다른 요소가 존재하면 선택되지 않는다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">셀렉터A + 셀렉터B</span><br></pre></td></tr></table></figure>

<p><em><strong>일반 형제 셀렉터(General Sibling Combinator)</strong></em></p>
<p>셀렉터A의 형제 요소 중 셀렉터A 뒤에 위치하는 셀렉터B 요소를 모두 선택한다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">셀렉터A ~ 셀렉터B</span><br></pre></td></tr></table></figure>


<h2 id="가상-클래스-셀렉터-Pseudo-Class-Selector"><a href="#가상-클래스-셀렉터-Pseudo-Class-Selector" class="headerlink" title="가상 클래스 셀렉터 (Pseudo-Class Selector)"></a>가상 클래스 셀렉터 (Pseudo-Class Selector)</h2><p>가상 클래스는 요소의 특정 상태에 따라 스타일을 정의할 때 사용된다. 가상 클래스는 마침표(<code>.</code>) 대신 콜론(<code>:</code>)을 사용하며 미리 정의된 이름이 있기 때문에 임의의 이름을 사용할 수 없다.</p>
<ul>
<li>마우스가 올라와 있을때</li>
<li>링크를 방문했을 때와 아직 방문하지 않았을 때</li>
<li>포커스가 들어와 있을 때</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">selector:pseudo-class &#123;</span><br><span class="line">  property: value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="링크-셀렉터-Link-pseudo-classes-동적-셀렉터-User-action-pseudo-classes"><a href="#링크-셀렉터-Link-pseudo-classes-동적-셀렉터-User-action-pseudo-classes" class="headerlink" title="링크 셀렉터(Link pseudo-classes), 동적 셀렉터(User action pseudo-classes)"></a>링크 셀렉터(Link pseudo-classes), 동적 셀렉터(User action pseudo-classes)</h3><table>
<thead>
<tr>
<th>pseudo-class</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>:link</td>
<td>셀렉터가 방문하지 않은 링크일 때</td>
</tr>
<tr>
<td>:visited</td>
<td>셀렉터가 방문한 링크일 때</td>
</tr>
<tr>
<td>:hover</td>
<td>셀렉터에 마우스가 올라와 있을 때</td>
</tr>
<tr>
<td>:active</td>
<td>셀렉터가 클릭된 상태일 때</td>
</tr>
<tr>
<td>:focus</td>
<td>셀렉터에 포커스가 들어와 있을 때</td>
</tr>
</tbody></table>
<h3 id="UI-요소-상태-셀렉터-UI-element-states-pseudo-classes"><a href="#UI-요소-상태-셀렉터-UI-element-states-pseudo-classes" class="headerlink" title="UI 요소 상태 셀렉터(UI element states pseudo-classes)"></a>UI 요소 상태 셀렉터(UI element states pseudo-classes)</h3><table>
<thead>
<tr>
<th>pseudo-class</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>:checked</td>
<td>셀렉터가 체크 상태일 때</td>
</tr>
<tr>
<td>:enabled</td>
<td>셀렉터가 사용 가능한 상태일 때</td>
</tr>
<tr>
<td>:disabled</td>
<td>셀렉터가 사용 불가능한 상태일 때</td>
</tr>
</tbody></table>
<h3 id="구조-가상-클래스-셀렉터-Structural-pseudo-classes"><a href="#구조-가상-클래스-셀렉터-Structural-pseudo-classes" class="headerlink" title="구조 가상 클래스 셀렉터(Structural pseudo-classes)"></a>구조 가상 클래스 셀렉터(Structural pseudo-classes)</h3><table>
<thead>
<tr>
<th>pseudo-class</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>:first-child</td>
<td>셀렉터에 해당하는 모든 요소 중 첫번째 자식인 요소를 선택한다.</td>
</tr>
<tr>
<td>:last-child</td>
<td>셀렉터에 해당하는 모든 요소 중 마지막 자식인 요소를 선택한다.</td>
</tr>
<tr>
<td>:nth-child(n)</td>
<td>셀렉터에 해당하는 모든 요소 중 앞에서 n번째 자식인 요소를 선택한다.</td>
</tr>
<tr>
<td>:nth-last-child(n)</td>
<td>셀렉터에 해당하는 모든 요소 중 뒤에서 n번째 자식인 요소를 선택한다.</td>
</tr>
</tbody></table>
<h3 id="부정-셀렉터-Negation-pseudo-class"><a href="#부정-셀렉터-Negation-pseudo-class" class="headerlink" title="부정 셀렉터(Negation pseudo-class)"></a>부정 셀렉터(Negation pseudo-class)</h3><table>
<thead>
<tr>
<th>pseudo-class</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>:not(셀렉터)</td>
<td>셀렉터에 해당하지 않는 모든 요소를 선택한다.</td>
</tr>
</tbody></table>
<h3 id="정합성-체크-셀렉터-validity-pseudo-class"><a href="#정합성-체크-셀렉터-validity-pseudo-class" class="headerlink" title="정합성 체크 셀렉터(validity pseudo-class)"></a>정합성 체크 셀렉터(validity pseudo-class)</h3><table>
<thead>
<tr>
<th>pseudo-class</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>:valid(셀렉터)</td>
<td>정합성 검증이 성공한 input 요소 또는 form 요소를 선택한다.</td>
</tr>
<tr>
<td>:invalid(셀렉터)</td>
<td>정합성 검증이 실패한 input 요소 또는 form 요소를 선택한다.</td>
</tr>
</tbody></table>
<h2 id="가상-요소-셀렉터-Pseudo-Element-Selector"><a href="#가상-요소-셀렉터-Pseudo-Element-Selector" class="headerlink" title="가상 요소 셀렉터 (Pseudo-Element Selector)"></a>가상 요소 셀렉터 (Pseudo-Element Selector)</h2><p>가상 요소는 요소의 특정 부분에 스타일을 적용하기 위하여 사용된다. 가상 요소에는 두개의 콜론(<code>::</code>)을 사용한다. CSS 표준에 의해 미리 정의된 이름이 있기 때문에 임의의 이름을 사용할 수 없다.</p>
<ul>
<li>요소 콘텐츠의 첫글자 또는 첫줄</li>
<li>요소 콘텐츠의 앞 또는 뒤</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">selector::pseudo-element &#123;</span><br><span class="line">  property:value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>pseudo-class</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>::first-letter</td>
<td>콘텐츠의 첫글자를 선택한다.</td>
</tr>
<tr>
<td>::first-line</td>
<td>콘텐츠의 첫줄을 선택한다. 블록 요소에만 적용할 수 있다.</td>
</tr>
<tr>
<td>::after</td>
<td>콘텐츠의 뒤에 위치하는 공간을 선택한다. 일반적으로 content 어트리뷰트와 함께 사용된다.</td>
</tr>
<tr>
<td>::before</td>
<td>콘텐츠의 앞에 위치하는 공간을 선택한다. 일반적으로 content 어트리뷰트와 함께 사용된다.</td>
</tr>
<tr>
<td>::selection</td>
<td>드래그한 콘텐츠를 선택한다. iOS Safari 등 일부 브라우저에서 동작 않는다.</td>
</tr>
</tbody></table>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://poiemaweb.com/css3-selector">https://poiemaweb.com/css3-selector</a></p>
</blockquote>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSS3</tag>
        <tag>selector</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS SMACSS 방법론</title>
    <url>/2020/11/11/css-smacss-methodology/</url>
    <content><![CDATA[<p>SMACSS(스메스)는 대규모 프로젝트를 위한 스타일링 지침이다. 스타일을 다섯가지로 분류하고 각 유형에 맞는 선택자(selector)와 작명법(naming convention), 코딩 기법을 제시한다.</p>
<a id="more"></a>

<h2 id="스타일의-다섯가지-유형"><a href="#스타일의-다섯가지-유형" class="headerlink" title="스타일의 다섯가지 유형"></a>스타일의 다섯가지 유형</h2><ol>
<li>기초 (Base)</li>
<li>레이아웃 (Layout)</li>
<li>모듈 (Module)</li>
<li>상태 (States)</li>
<li>테마 (Theme)</li>
</ol>
<h3 id="기초-스타일"><a href="#기초-스타일" class="headerlink" title="기초 스타일"></a>기초 스타일</h3><ul>
<li>흔히 말하는 reset 스타일(Reset, Default, Variables, Mixins)을 말한다.</li>
<li>기본 스타일에는 <code>!important</code>를 쓸 필요가 없다.</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-tag">form</span> &#123; <span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>; &#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=text]</span> &#123; <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#999</span>; &#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123; <span class="attribute">color</span>: <span class="number">#039</span> &#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123; <span class="attribute">color</span>: <span class="number">#03C</span>; &#125;</span><br></pre></td></tr></table></figure>

<h3 id="레이아웃-스타일"><a href="#레이아웃-스타일" class="headerlink" title="레이아웃 스타일"></a>레이아웃 스타일</h3><ul>
<li>레이아웃과 관련된 스타일을 정의한다.</li>
<li>클래스명에 suffix “l-“를 붙인다.</li>
<li>재사용성에 따라 큰 레이아웃 스타일과 작은 레이아웃 스타일로 구분된다.</li>
</ul>
<p><em><strong>큰 레이아웃 스타일</strong></em></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#header</span>, <span class="selector-id">#article</span>, <span class="selector-id">#footer</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">960px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>작은 레이아웃 스타일</strong></em></p>
<p><code>960.gs</code>와 같은 레이아웃 프레임 워크를 쓸 경우 아이디가 아니라 클래스를 매겨 요소를 재사용한다. 아이디를 매기기 전에 해당 요소의 재사용성을 숙고하여야 한다. 재사용성이 증가하면 코드를 중복하지 않아도 되고, 선택자의 우선 순위 점수를 줄일 수 있기 때문에 레이아웃을 확장하기 좋다.</p>
<h3 id="모듈-스타일"><a href="#모듈-스타일" class="headerlink" title="모듈 스타일"></a>모듈 스타일</h3><ul>
<li>모듈 관련 스타일. 스타일 재사용을 위한 요소(네비게이션 바, 말풍선, 대화 상자, 위젯 등)이다.</li>
<li>Block, Element, Module</li>
<li>재사용을 하기 위해서 id 셀렉터와 element를 사용하지 않는다. element 셀렉터를 사용해야 한다면, <code>.box &gt; span</code> 처럼 child 셀렉터를 사용한다.</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.pod</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pod</span> <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pod-constrained</span> <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pod-callout</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pod-callout</span> <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">180px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="상태별-스타일"><a href="#상태별-스타일" class="headerlink" title="상태별 스타일"></a>상태별 스타일</h3><ul>
<li>상태를 나타내는 스타일. (펼침과 접힘, 성공과 실패 등)</li>
<li>Hidden, expend, active, hover 등의 상태에서 사용한다.</li>
<li><strong>선택자</strong><ul>
<li>클래스 선택자 하나</li>
<li><code>!important</code>를 사용할 수도 있다(최소화 할 것)</li>
<li>같은 모듈에 두 상태를 적용하지 말것</li>
</ul>
</li>
<li><strong>작명법</strong><ul>
<li>Class명에 suffix “is-“ 또는 “s-“를 붙여서 사용한다.</li>
<li>특정 모듈에 한정된 상태는 모듈 이름도 그 뒤에 붙인다. (ex. <code>is-tab-active</code>)</li>
</ul>
</li>
<li><strong>유의</strong>: 전역 상태 스타일은 모듈 상태 스타일과 구분한다. 모듈 상태 스타일은 모듈 스타일과 병기한다.</li>
</ul>
<h3 id="테마-스타일"><a href="#테마-스타일" class="headerlink" title="테마 스타일"></a>테마 스타일</h3><ul>
<li>사이트 전반적 look and feel을 제어한다.</li>
<li>색상이나 이미지를 불변하는 스타일과 분리하여 기존 스타일을 재선언후에 사용할 수 있다.</li>
<li>적용범위가 넓은 테마는 <code>theme-</code> suffix를 붙여 사용한다.</li>
<li><code>i18n</code> 등을 염두에 두고 글꼴도 사용자가 변경할 수 있게 하기 위해 글꼴 스타일도 따로 분류할 수 있다. 다만 굳이 글꼴별로 클래스를 만들 필요는 없다.</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 모듈 스타일 */</span></span><br><span class="line"><span class="selector-class">.mod</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 테마 스타일 */</span></span><br><span class="line"><span class="selector-class">.mod</span> &#123;</span><br><span class="line">    <span class="attribute">border-color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="유의사항"><a href="#유의사항" class="headerlink" title="유의사항"></a>유의사항</h2><ul>
<li>파생된 CSS 셀렉터는 사용할 수 없다.</li>
<li>ID 셀렉터를 사용하지 않는다.</li>
<li><code>!important</code>를 사용하지 않는다.</li>
<li><code>Class</code> 이름은 의미있게, 다른 개발자가 이해할 수 있도록 선언한다.</li>
</ul>
<hr>
<blockquote>
<p><strong>REFERENCE</strong></p>
</blockquote>
<ul>
<li><a href="https://wit.nts-corp.com/2015/04/16/3538">https://wit.nts-corp.com/2015/04/16/3538</a></li>
<li><a href="https://webmaster.wspaper.org/archives/devsharing/smacss-%EC%9C%A0%EC%97%B0%ED%95%98%EA%B3%A0-%EB%AA%A8%EB%93%88%ED%99%94%EB%90%9C-css-%EB%B0%A9%EB%B2%95%EB%A1%A0-%ED%95%99%EC%8A%B5-1-%EC%8A%A4%ED%83%80%EC%9D%BC%EC%9D%98">https://webmaster.wspaper.org/archives/devsharing/smacss-%EC%9C%A0%EC%97%B0%ED%95%98%EA%B3%A0-%EB%AA%A8%EB%93%88%ED%99%94%EB%90%9C-css-%EB%B0%A9%EB%B2%95%EB%A1%A0-%ED%95%99%EC%8A%B5-1-%EC%8A%A4%ED%83%80%EC%9D%BC%EC%9D%98</a></li>
</ul>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>methodology</tag>
        <tag>SMACSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 트랜지션</title>
    <url>/2020/12/11/css-transition/</url>
    <content><![CDATA[<p>CSS 트랜지션은 CSS 속성을 변경할 때 애니메이션 속도를 조절하는 방법을 제공한다. 속성 변경이 즉시 일어나는 것이 아니라 그 속성의 변화가 일정 기간에 걸쳐 일어나도록 할 수 있다. 명시적으로 리스트를 작성해서 어떤 속성을 움직이게 할지, 딜레이를 설정해서 언제 애니메이션이 시작할지, 지속 시간을 설정해서 트랜지션을 얼마나 지속할지, 타이밍 함수를 사용해서 어떻게 트랜지션을 실행하는지 결정하게 한다.</p>
<a id="more"></a>

<h2 id="애니메이션-가능한-CSS-속성"><a href="#애니메이션-가능한-CSS-속성" class="headerlink" title="애니메이션 가능한 CSS 속성"></a>애니메이션 가능한 CSS 속성</h2><p>어떤 속성을 어떤 방식으로 움직일지를 정의할 수 있다. 애니메이션 가능한 속성의 집합은 유한한 집합으로 제한된다. <strong>애니메이션 가능한 속성의 집합은 변할 수 있기</strong> 때문에 주의하여 진행하여야 한다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">border-style</span>: solid;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#0000FF</span>;</span><br><span class="line">    -webkit-<span class="attribute">transition</span>:width <span class="number">2s</span>, height <span class="number">2s</span>, background-color <span class="number">2s</span>, -webkit-transform <span class="number">2s</span>;</span><br><span class="line">    <span class="attribute">transition</span>:width <span class="number">2s</span>, height <span class="number">2s</span>, background-color <span class="number">2s</span>, transform <span class="number">2s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#FFCCCC</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">180deg</span>);</span><br><span class="line">    <span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">180deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="트랜지션-정의에-사용한-CSS-속성"><a href="#트랜지션-정의에-사용한-CSS-속성" class="headerlink" title="트랜지션 정의에 사용한 CSS 속성"></a>트랜지션 정의에 사용한 CSS 속성</h2><p>CSS 트랜지션은 단축(shorthand) 속성 <code>transition</code>을 사용하여 제어한다. 트랜지션을 설정하는 가장 좋은 방법이며, 파라미터 목록의 길이가 싱크가 맞지 않는 것을 피하기가 더 쉬워지기 때문이다.</p>
<p><em><strong>transition-property</strong></em><br>트랜지션을 적용해야 하는 CSS 속성의 이름(들)을 명시한다. 나열된 속성만 트랜지션하는 동안 움직인다. 나머지 속성 변화들은 보통 때와 같이 즉시 발생한다.</p>
<p><em><strong>transition-duration</strong></em><br>트랜지션이 일어나는 지속 시간을 명시한다. 트랜지션동안 모든 속성에 적용하는 단일 지속시간을 명시하거나, 다른 주기로 각 속성이 트랜지션하게 하는 여러 지속 시간을 명시할 수 있다.</p>
<p><em><strong>transition-timing-function</strong></em><br>속성의 중간값을 계산한느 방법을 정의하는 함수를 명시한다. 트랜지션의 중간값을 계산하는 방법을 결정하며, 대부분의 타이밍 함수는 큐빅 베이지어(cubic bezier)를 정의하는 네 점에 의해 정의되기 때문에 상응하는 함수의 그래프로 제공하여 명시할 수 있다.</p>
<p><em><strong>transition-delay</strong></em><br>속성이 변한 시점과 트랜지션이 실제로 시작하는 사이에 기다리는 시간을 정의한다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 단축문법</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: &lt;property&gt; &lt;duration&gt; &lt;timing-function&gt; &lt;delay&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="트랜지션-완료-감지하기"><a href="#트랜지션-완료-감지하기" class="headerlink" title="트랜지션 완료 감지하기"></a>트랜지션 완료 감지하기</h2><p><code>element.addEventListener()</code> 메소드를 사용하여 이 이벤트를 모니터링할 수 있다.</p>
<p><em><strong>propertyName</strong></em><br>트랜지션을 완료한 CSS 속성의 이름을 나타내는 문자열.</p>
<p><em><strong>elapsedTime</strong></em><br>이벤트가 발생한 시점에 해당 트랜지션이 진행된 시간을 초로 나타내는 실수. 이 값은 <code>transition-delay</code> 값에 영향을 받지 않는다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">el.addEventListener(<span class="string">&quot;transitionend&quot;</span>, updateTransition, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions">https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions</a></p>
</blockquote>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>transition</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 벤더 프리픽스</title>
    <url>/2020/12/27/css-vendor-prefix/</url>
    <content><![CDATA[<p>CSS3 표준으로 확정이 되기 이전 혹은 브라우저 개발사가 실험적으로 제공하는 기능을 사용할 경우 벤더 프리픽스를 이용하여야 한다. 브라우저의 버전이 올라감에 따라 벤더 프리픽스를 사용하지 않아도 될 수 있지만 구형 브라우저 지원을 위해 사용할 필요가 있다.</p>
<a id="more"></a>

<h2 id="브라우저별-벤더-프리픽스"><a href="#브라우저별-벤더-프리픽스" class="headerlink" title="브라우저별 벤더 프리픽스"></a>브라우저별 벤더 프리픽스</h2><table>
<thead>
<tr>
<th>브라우저</th>
<th>벤더 프리픽스</th>
</tr>
</thead>
<tbody><tr>
<td>IE / Edge</td>
<td>-ms-</td>
</tr>
<tr>
<td>Chrome</td>
<td>-webkit-</td>
</tr>
<tr>
<td>Firefox</td>
<td>-moz-</td>
</tr>
<tr>
<td>Safari</td>
<td>-webkit-</td>
</tr>
<tr>
<td>Opera</td>
<td>-o-</td>
</tr>
<tr>
<td>iOS Safari</td>
<td>-webkit-</td>
</tr>
<tr>
<td>Android Browser</td>
<td>-webkit-</td>
</tr>
<tr>
<td>Chrome for Android</td>
<td>-webkit-</td>
</tr>
</tbody></table>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  -webkit-user-select: none;  <span class="comment">/* Chrome all / Safari all */</span></span><br><span class="line">  -moz-user-select: none;     <span class="comment">/* Firefox all */</span></span><br><span class="line">  -ms-user-select: none;      <span class="comment">/* IE 10+ */</span></span><br><span class="line">  user-select: none;          <span class="comment">/* Likely future */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Prefix-Free-라이브러리"><a href="#Prefix-Free-라이브러리" class="headerlink" title="Prefix Free 라이브러리"></a>Prefix Free 라이브러리</h2><p>브라우저들을 맞추기 위해 하나하나 벤더 프리픽스를 사용하게 될 경우 코드의 양이 늘며, 브라우저의 업데이트가 빈번하게 이뤄지고 있으므로 불필요한 코드가 존재하게 될 경우가 많다. 사용하지 않아도 될 벤더 프리픽스를 사용하는 것은 성능에도 영향을 줄 수 있기 때문에 <a href="https://projects.verou.me/prefixfree/"><code>Prefix Free 라이브러리</code></a>를 사용하는 것도 유용하다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;prefixfree.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://poiemaweb.com/css3-vendor-prefix">https://poiemaweb.com/css3-vendor-prefix</a></p>
</blockquote>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>vendor prefix</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 웹폰트</title>
    <url>/2020/11/30/css-webfont/</url>
    <content><![CDATA[<p>웹브라우저는 로컬 소프트웨어이므로 로컬 환경의 리소스만 사용 가능하다. 로컬 환경에 존재하는 폰트는 사용할 수 없다. 사용자가 어떤 디바이스, 어떤 OS를 사용하여 웹페이지에 접근하는지 알 수 없다. 웹페이지와 같이 폰트도 서버에서 클라이언트로 다운로드되어 실행될 수 있다면 문제는 해결 가능하다. 이러한 문제를 해결할 수 있는 방법이 웹폰트이다. (클라이언트에 해당 폰트가 존재하지 않을 경우 전송되는 방식)</p>
<a id="more"></a>



<h2 id="CDN-Content-Delivery-Network-링크-방식"><a href="#CDN-Content-Delivery-Network-링크-방식" class="headerlink" title="CDN(Content Delivery Network) 링크 방식"></a>CDN(Content Delivery Network) 링크 방식</h2><p>가장 간단한 방법은 CDN 링크를 사용하는 것이다. <a href="https://fonts.google.com/">구글에서 제공하는 웹폰트</a>가 대표적이다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(<span class="attribute">http</span>://fonts.googleapis.com/earlyaccess/nanumgothic.css);</span><br><span class="line"></span><br><span class="line">* &#123; <span class="attribute">font-family</span>: <span class="string">&#x27;Nanum Gothic&#x27;</span>, sans-serif; &#125;</span><br></pre></td></tr></table></figure>

<h2 id="서버-폰트-로딩-방식"><a href="#서버-폰트-로딩-방식" class="headerlink" title="서버 폰트 로딩 방식"></a>서버 폰트 로딩 방식</h2><p>CDN 링크를 사용하는 방법은 간편하지만 로컬 폰트를 사용하는 것에 비해 로딩 속도가 느리다. 폰트를 여러 개 사용하면 할 수록 로딩에 더욱 시간이 걸리며 CDN 링크를 제공하지 않는 폰트는 사용할 방법이 없다. 이러한 단점을 보완한 방법이 서버 폰트 로딩 방법이다. 폰트 파일을 서버에 두고 요청이 오면 클라이언트로 전송하는 방식이다.</p>
<p>※ 영문과 한글을 혼용하는 경우 먼저 영문 폰트, 그 다음 한글 폰트를 지정하여야 한다. 한글 폰트부터 지정하면 영문에도 한글 폰트가 적용된다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: myFontName;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&quot;myFont.woff&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">* &#123; <span class="attribute">font-family</span>: myFontName, sans-serif; &#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th></th>
<th>EOT</th>
<th>WOFF</th>
<th>SVG</th>
<th>OTF/TTF</th>
</tr>
</thead>
<tbody><tr>
<td>IE 6~8</td>
<td>O</td>
<td>X</td>
<td>X</td>
<td>X</td>
</tr>
<tr>
<td>IE 9+</td>
<td>O</td>
<td>O</td>
<td>X</td>
<td>X</td>
</tr>
<tr>
<td>Firefox</td>
<td>X</td>
<td>O</td>
<td>X</td>
<td>O</td>
</tr>
<tr>
<td>Safari</td>
<td>X</td>
<td>O</td>
<td>O</td>
<td>O</td>
</tr>
<tr>
<td>Chrome</td>
<td>X</td>
<td>O</td>
<td>O</td>
<td>O</td>
</tr>
<tr>
<td>Opera</td>
<td>X</td>
<td>O</td>
<td>O</td>
<td>O</td>
</tr>
</tbody></table>
<p><em><strong>일반적으로 사용되는 검증된 웹폰트 사용방법</strong></em></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>:<span class="string">&quot;Nanum Gothic&quot;</span>;</span><br><span class="line">  <span class="attribute">src</span>:<span class="built_in">url</span>(<span class="string">&quot;NanumGothic.eot&quot;</span>);</span><br><span class="line">  <span class="comment">/* IE 9 호환성 보기 모드 대응 */</span></span><br><span class="line">  <span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&quot;☺&quot;</span>),</span><br><span class="line">  /* local font 사용 방지. 생략 가능 */</span><br><span class="line">      <span class="built_in">url</span>(<span class="string">&quot;NanumGothic.eot?#iefix&quot;</span>) <span class="built_in">format</span>(<span class="string">&#x27;embedded-opentype&#x27;</span>),</span><br><span class="line">      /* IE <span class="number">6</span>~<span class="number">8</span> */</span><br><span class="line">      <span class="built_in">url</span>(<span class="string">&quot;NanumGothic.woff&quot;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>);</span><br><span class="line">      <span class="comment">/* 표준 브라우저 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">* &#123; <span class="attribute">font-family</span>: <span class="string">&quot;Nanum Gothic&quot;</span>, sans-serif; &#125;</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://poiemaweb.com/css3-webfont">https://poiemaweb.com/css3-webfont</a></p>
</blockquote>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSS3</tag>
        <tag>font</tag>
        <tag>web font</tag>
        <tag>typography</tag>
      </tags>
  </entry>
  <entry>
    <title>장고 앱(App) 구조</title>
    <url>/2023/08/19/django-app-structure/</url>
    <content><![CDATA[<h2 id="Project와-App의-차이"><a href="#Project와-App의-차이" class="headerlink" title="Project와 App의 차이"></a>Project와 App의 차이</h2><p>Django에서 웹 서비스 각각의 기능은 앱 단위로 구현한다. 실제로 하나의 프로젝트는 여러 개의 앱과 약간의 설정 파일들로 구성되어 있고 하나의 앱은 여러 개의 프로젝트에서 사용할 수 있다.</p>
<a id="more"></a>

<h2 id="App-생성하기"><a href="#App-생성하기" class="headerlink" title="App 생성하기"></a>App 생성하기</h2><p>Django에서 앱을 생성할 때는 <strong>manage.py</strong> 를 이용한다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python manage.py startapp &#123;생성할 App 이름&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Django-App-구조"><a href="#Django-App-구조" class="headerlink" title="Django App 구조"></a>Django App 구조</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;app_name&#125;&#x2F;</span><br><span class="line">    __init__.py</span><br><span class="line">    admin.py</span><br><span class="line">    apps.py</span><br><span class="line">    migrations&#x2F;</span><br><span class="line">        __init__.py</span><br><span class="line">    models.py</span><br><span class="line">    tests.py</span><br><span class="line">    views.py</span><br></pre></td></tr></table></figure>

<ul>
<li><em><strong>admin.py</strong></em> : 각각의 앱을 Django의 관리자 기능과 연결하거나 관리자 기능에 대해 설정을 하는 파일이다.</li>
<li><em><strong>apps.py</strong></em> : 각각의 App마다 추가적인 기능 및 설정을 넣어 주기 위한 파일이다.</li>
<li><em><strong>migrations 디렉토리</strong></em> : Django 앱의 데이터 구조에 대한 변경 사항인 migration 파일이 저장되는 디렉토리이다.</li>
<li><em><strong>models.py</strong></em> : 앱에서 사용하는 데이터 구조를 정의하고 데이터베이스와의 소통을 담당하는 파일이다.</li>
<li><em><strong>tests.py</strong></em> : 앱에 대한 테스트 코드를 작성하는 파일이다. Django 프로젝트의 모든 기능이 의도한 대로 잘 동작하는지 체크하는 것을 말한다.</li>
<li><em><strong>views.py</strong></em> : 앱에서 어떤 기능을 할지에 대한 메인 로직을 담당하는 파일이다.</li>
</ul>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>코드잇 온라인 강의 Django 웹 개발 시작하기</p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
        <category>django</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>장고 개요</title>
    <url>/2023/08/03/django-overview/</url>
    <content><![CDATA[<h2 id="diango-개발환경-구성하기"><a href="#diango-개발환경-구성하기" class="headerlink" title="diango 개발환경 구성하기"></a>diango 개발환경 구성하기</h2><ol>
<li><p><code>Homebrew</code>를 설치후 버전을 확인한다.</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;bin&#x2F;bash -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;HEAD&#x2F;install.sh)&quot;</span><br></pre></td></tr></table></figure>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew --version</span><br></pre></td></tr></table></figure>
<a id="more"></a></li>
<li><p><code>pyenv</code>, <code>pyenv-virtualenv</code>를 설치한다.</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install pyenv </span><br></pre></td></tr></table></figure>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install pyenv-virtualenv</span><br></pre></td></tr></table></figure></li>
<li><p><code>pyenv-virtualenv</code>의 설치가 다 됐다면 설정을 한다.</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo $SHELL</span><br></pre></td></tr></table></figure>
<blockquote>
<p>pyenv 설정하기 (bash)</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &#39;export PYENV_ROOT&#x3D;&quot;$HOME&#x2F;.pyenv&quot;&#39; &gt;&gt; ~&#x2F;.profile</span><br><span class="line">echo &#39;export PATH&#x3D;&quot;$PYENV_ROOT&#x2F;bin:$PATH&quot;&#39; &gt;&gt; ~&#x2F;.profile</span><br><span class="line">echo &#39;eval &quot;$(pyenv init --path)&quot;&#39; &gt;&gt; ~&#x2F;.profile</span><br><span class="line">echo &#39;if [ -n &quot;$PS1&quot; -a -n &quot;$BASH_VERSION&quot; ]; then source ~&#x2F;.bashrc; fi&#39; &gt;&gt; ~&#x2F;.profile</span><br><span class="line">echo &#39;eval &quot;$(pyenv init -)&quot;&#39; &gt;&gt; ~&#x2F;.bashrc</span><br><span class="line">echo &#39;eval &quot;$(pyenv virtualenv-init -)&quot;&#39; &gt;&gt; ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>pyenv 설정하기 (zsh)</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &#39;eval &quot;$(pyenv init --path)&quot;&#39; &gt;&gt; ~&#x2F;.zprofile</span><br><span class="line">echo &#39;eval &quot;$(pyenv init -)&quot;&#39; &gt;&gt; ~&#x2F;.zshrc</span><br><span class="line">echo &#39;eval &quot;$(pyenv virtualenv-init -)&quot;&#39; &gt;&gt; ~&#x2F;.zshrc</span><br></pre></td></tr></table></figure></blockquote>
</li>
<li><p>설정 후 버전을 확인한다.</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pyenv --version</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="pyenv를-이용한-파이썬-설치"><a href="#pyenv를-이용한-파이썬-설치" class="headerlink" title="pyenv를 이용한 파이썬 설치"></a>pyenv를 이용한 파이썬 설치</h2><ol>
<li><p><code>pyenv</code>를 이용하여 python 버전을 확인한다.</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pyenv install --list</span><br></pre></td></tr></table></figure></li>
<li><p>python 버전을 선택하여 설치한다.</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pyenv install &#123;파이썬 버전&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>python 버전을 확인한다.</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pyenv versions</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="pyenv-virtualenv를-이용한-가상환경-생성"><a href="#pyenv-virtualenv를-이용한-가상환경-생성" class="headerlink" title="pyenv-virtualenv를 이용한 가상환경 생성"></a>pyenv-virtualenv를 이용한 가상환경 생성</h2><ol>
<li><code>pyenv virtualenv</code>을 입력하고 python의 버전과 생성할 가상 환경의 입력한다.<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pyenv virtualenv &#123;python 버전&#125; &#123;가상 환경 이름&#125;</span><br></pre></td></tr></table></figure></li>
<li>가상환경을 삭제하고 싶을 시에는 <code>pyenv uninstall</code>과 가상 환경 이름을 기재한다.<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pyenv uninstall &#123;가상 환경 이름&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="pyenv로-설치한-파이썬-적용-및-django-2-2-설치"><a href="#pyenv로-설치한-파이썬-적용-및-django-2-2-설치" class="headerlink" title="pyenv로 설치한 파이썬 적용 및 django 2.2 설치"></a>pyenv로 설치한 파이썬 적용 및 django 2.2 설치</h2><ul>
<li>컴퓨터 전역에 적용하고 싶을 때는 <code>global</code>을, 해당 폴더 내에만 적용하고 싶을 때에는 <code>local</code>을 적용한다.</li>
<li><em><strong>global</strong></em><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pyenv global &#123;가상 환경 이름&#125;</span><br></pre></td></tr></table></figure></li>
<li><em><strong>local</strong></em><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pyenv local &#123;가상 환경 이름&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="django-설치"><a href="#django-설치" class="headerlink" title="django 설치"></a>django 설치</h2><ol>
<li>다음 커맨드를 입력하여 django를 입력한다. 디렉토리에 django를 설치하는 것이 아니라 django-envs 환경에 django를 설치하는 것을 유의한다.<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install django&#x3D;&#x3D;2.2</span><br></pre></td></tr></table></figure></li>
<li>설치가 잘 되었는지 확인한다.<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">django-admin --version</span><br></pre></td></tr></table></figure></li>
<li>설치되어 있는 파키지 패키지 목록을 확인한다.<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 list</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="runserver"><a href="#runserver" class="headerlink" title="runserver"></a>runserver</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">django-admin runserver</span><br><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">django-admin runserver &#123;ip:port&#125;</span><br><span class="line">python manage.py runserver &#123;ip:port&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Django-프로젝트-생성하기"><a href="#Django-프로젝트-생성하기" class="headerlink" title="Django 프로젝트 생성하기"></a>Django 프로젝트 생성하기</h2><h3 id="프로젝트-생성"><a href="#프로젝트-생성" class="headerlink" title="프로젝트 생성"></a>프로젝트 생성</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">django-admin startproject &#123;프로젝트명&#125;</span><br></pre></td></tr></table></figure>

<h3 id="프로젝트-구조"><a href="#프로젝트-구조" class="headerlink" title="프로젝트 구조"></a>프로젝트 구조</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">codeit_proj&#x2F; #프로젝트명</span><br><span class="line">    manage.py</span><br><span class="line">    codeit_proj&#x2F; # 프로젝트명</span><br><span class="line">        __init__.py</span><br><span class="line">        settings.py</span><br><span class="line">        urls.py</span><br><span class="line">        wsgi.py</span><br></pre></td></tr></table></figure>
<ul>
<li><em><strong>Project Root</strong></em> : 최상위 프로젝트명 디렉토리는 <code>Project Root</code>라고 한다.</li>
<li><em><strong>manage.py</strong></em> : Django 앱을 만들거나, 데이터베이스 관련 기능을 수행하거나, 개발 서버를 실행하는 등의 여러기능을 실행 할 수 있는 프로젝트 관리를 위한 명령 유틸리티. <code>django-admin</code>이 동일한 기능을 한다.</li>
<li><em><strong>ProjectApp (Django Root)</strong></em> : Django 프로젝트를 위한 여러 파일이 담겨 있는 디렉토리.</li>
<li><em><strong><strong>init</strong>.py</strong></em> : <code>__init__.py</code> 파일이 포함된 디렉토리를 Python의 패키지로 인식하게끔 하기 위해서 사용한다. python 3.3 이후 버전부터는 이 파일이 없어도 패키지로 인식되지만 하위 버전 호환을 위해 작성하는 것이 좋다.</li>
<li><em><strong>settings.py</strong></em> : Django 프로젝트의 여러 가지 설정을 담고 있는 파일이다.</li>
<li><em><strong>urls.py</strong></em> :  Django 프로젝트로 들어온 url을 보고 알맞은 로직(View)으로 연결해주는 역할을 하는 파일이다.</li>
<li><em><strong>wsgi.py</strong></em> : 웹 서버와 Django 어플리케이션을 연결해주는 역할을 한다.</li>
</ul>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>코드잇 온라인 강의 Django 웹 개발 시작하기</p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
        <category>django</category>
      </categories>
      <tags>
        <tag>overview</tag>
        <tag>Python</tag>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 브랜치</title>
    <url>/2020/08/28/git-branch/</url>
    <content><![CDATA[<p>똑같은 코드를 동시에 고칠 가능성이 있기 때문에, 브랜치를 분기를 나누어 작업을 진행한다. 분기를 나누어 작업한 후에, 추후에 합친다. 충돌이 일어난다고 하더라도 명시적으로 충돌을 해결할 수 있다.</p>
<a id="more"></a>

<blockquote>
<p><a href="https://ko.atlassian.com/software/sourcetree">소스트리</a>(sourceTree): 버튼 클릭으로 Git 명령을 실행하는 도구.</p>
</blockquote>
<h2 id="브랜치-Branch-생성"><a href="#브랜치-Branch-생성" class="headerlink" title="브랜치(Branch) 생성"></a>브랜치(Branch) 생성</h2><p><em>브랜치 만들기</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch develop</span><br></pre></td></tr></table></figure>

<p><em>만든 브랜치로 이동하기</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout develop</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>master 브랜치</strong>: 기본 브랜치.</p>
</blockquote>
<blockquote>
<p><strong>HEAD</strong>: 내가 지금 작업하고 있는 로컬 브랜치를 가르키고 있다.</p>
</blockquote>
<h2 id="머지-Merge-로-브랜치-합치기"><a href="#머지-Merge-로-브랜치-합치기" class="headerlink" title="머지(Merge)로 브랜치 합치기"></a>머지(Merge)로 브랜치 합치기</h2><ol>
<li>master 브랜치의 최신 커밋(base)에 develop 브랜치의 최신 커밋(compare)을 합치려고 한다.</li>
<li>base가 될 master 브랜치로 이동한다.</li>
<li>compare 브랜치인 develop와 합치라는 명령을 내린다.<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git merge develop</span><br></pre></td></tr></table></figure></li>
<li>합쳐진 결과는 develop 커밋이 된다.</li>
</ol>
<ul>
<li>develop은 master +a가 되어 둘이 합쳐진 결과물은 develop이 된다. 그래서 develop과 master 브랜치 모두 develop을 가르키게 된다.</li>
</ul>
<h2 id="브랜치-충돌-Conflict-시에-해결-방법"><a href="#브랜치-충돌-Conflict-시에-해결-방법" class="headerlink" title="브랜치 충돌(Conflict)시에 해결 방법"></a>브랜치 충돌(Conflict)시에 해결 방법</h2><p>머지(Merge)할 때 두 버전이 같은 곳을 수정했다면 충돌이 난다. 충돌이 났을 경우 이를 직접 수정하여 고쳐주어야 한다. 위가 기존 버전, 아래가 본인이 수정했던 버전이다.</p>
<p><em>충돌시 나오는 코드</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Lorem Ipsum is simply dummy text of the printing and typesetting industry.</span><br><span class="line"></span><br><span class="line">&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">Lorem Ipsum has been the industry&#39;s standard dummy text.</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">It was popularised in the 1960s.</span><br><span class="line">&gt;&gt;&gt;&gt; develop</span><br></pre></td></tr></table></figure>

<p><em>코드 수정</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Lorem Ipsum is simply dummy text of the printing and typesetting industry.</span><br><span class="line"></span><br><span class="line">It was popularised in the 1960s.</span><br></pre></td></tr></table></figure>


<h2 id="다른-사람의-저장소를-통째로-복사하여-포크-Fork-하기"><a href="#다른-사람의-저장소를-통째로-복사하여-포크-Fork-하기" class="headerlink" title="다른 사람의 저장소를 통째로 복사하여 포크(Fork)하기"></a>다른 사람의 저장소를 통째로 복사하여 포크(Fork)하기</h2><p><strong><u>다른 사람의 저장소를 통째로 본인의 계정으로 복제해온 후, 복제해온 본인의 저장소에 자유롭게 커밋, 푸시를 한다.</u></strong> 포크를 했을 경우 소스코드를 망치더라도 원본 코드에는 아무런 영향이 가지 않는다. GitHub의 세팅에서 <strong>Collaborators</strong> 을 설정하여 오픈소스에 기여할 수 있다.</p>
<p><em>포크(Fork)하는 방법</em></p>
<ol>
<li>원본 저장소의 주소를 복사한다.</li>
<li>본인의 로컬에 폴더를 만들어 해당 저장소를 clone한다.</li>
<li>새 계정을 추가하고 디폴트 계정으로 설정한다.</li>
<li>작업후 커밋 및 푸시를 진행한다.</li>
<li>GitHub에서 커밋이 제대로 되었는지 확인한다.</li>
</ol>
<h2 id="병합-요청-Pull-Request-보내기"><a href="#병합-요청-Pull-Request-보내기" class="headerlink" title="병합 요청(Pull Request) 보내기"></a>병합 요청(Pull Request) 보내기</h2><ol>
<li>포크한 저장소에서 기능 개발을 끝낸다.</li>
<li>그 후 머지하고 싶은 두 브랜치를 선택하고 어떤 변경을 진행했는지 제목과 내용에 기재한다.</li>
<li>단일 저장소에서 보낼 수도 있고, 포크한 저장소에서도 보낼 수 있다.</li>
</ol>
<h2 id="브랜치-관리하기"><a href="#브랜치-관리하기" class="headerlink" title="브랜치 관리하기"></a>브랜치 관리하기</h2><ol>
<li>한 사람이 개발하는 기능 브랜치를 생성한다.</li>
<li>작업이 끝나면 master 브랜치로 Pull Request를 보낸다.</li>
<li>master 브랜치에서 대략적인 작업이 전부 머지되면 release 브랜치로 머지시키고 실서버에 배포한다.</li>
<li>직접 커밋은 본인이 개발하는 기능 브랜치에만 진행한다.</li>
<li>master, release 브랜치에는 직접 커밋하지 않고 머지만 진행한다.</li>
</ol>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>패스트 캠퍼스 온라인 강의 처음 배우는 Git &amp; GitHub _ 진유림 강사님</p>
</blockquote>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>git add / commit / push 취소하기</title>
    <url>/2021/07/15/git-cancel-add-commit-push/</url>
    <content><![CDATA[<p>git add /commit / push 취소를 진행할 수 있다.</p>
<a id="more"></a>

<h2 id="git-add-취소"><a href="#git-add-취소" class="headerlink" title="git add 취소"></a>git add 취소</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">git reset HEAD [file]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>파일명이 없을 시 add한 파일 전체를 취소한다.</p>
</blockquote>
<h2 id="git-commit-취소"><a href="#git-commit-취소" class="headerlink" title="git commit 취소"></a>git commit 취소</h2><p><em><strong>[방법1]</strong></em> commit을 취소하고 staged 상태로 워킹 디렉토리에 보존한다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">git reset --soft HEAD^</span><br></pre></td></tr></table></figure>

<p><em><strong>[방법2]</strong></em> commit을 취소하고 unstaged 상태로 워킹 디렉토리에 보존한다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">git reset --mixed HEAD^</span><br><span class="line">git reset HEAD^</span><br></pre></td></tr></table></figure>

<p><em><strong>[방법2-1]</strong></em> 마지막 커밋 두개를 취소한다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">git reset HEAD~2</span><br></pre></td></tr></table></figure>
<p><em><strong>[방법3]</strong></em>  commit을 취소하고 unstaged 상태로 워킹 디렉토리에서 삭제한다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br></pre></td></tr></table></figure>

<h2 id="git-push-취소"><a href="#git-push-취소" class="headerlink" title="git push 취소"></a>git push 취소</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">git push &lt;원격 저장소 이름&gt; &lt;브랜치 이름&gt; -f</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>Git cherry-pick</title>
    <url>/2020/11/07/git-cherry-pick/</url>
    <content><![CDATA[<p>코드 관리를 하다 보면 커밋을 다른 브랜치에 잘못 하거나 코드 의존성 때문에 다른 사람의 커밋중 일부를 가져와야 하는 경우가 생긴다. <code>git rebase</code>나 <code>git cherry-pick</code>을 사용한다.</p>
<a id="more"></a>

<h2 id="git-cherry-pick"><a href="#git-cherry-pick" class="headerlink" title="git cherry-pick"></a>git cherry-pick</h2><p>다른 브랜치에 있는 커밋을 선택적으로 내 브랜치에 적용시킬 때 사용하는 명령어이다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git cherry-pick &lt;commit_hash_1&gt; &lt;commit_hash_2&gt;…</span><br></pre></td></tr></table></figure>

<h2 id="–continue-or-–abort"><a href="#–continue-or-–abort" class="headerlink" title="–continue or –abort"></a>–continue or –abort</h2><p>cherry-pick하려는 커밋과 내 브랜치 사이에 conflict가 발생하는 경우 두가지 옵션이 있다.</p>
<ol>
<li><p>Conflict를 해결하고 cherry-pick을 진행시킨다. 코드를 수정하고 <code>git add &lt;path&gt;</code> 명령어로 수정된 코드를 올린다. <code>git cherry-pick --continue</code> 명령어를 사용하면 다시 진행이 시작된다.</p>
</li>
<li><p>cherry-pick을 중단한다. <code>git cherry-pick --abort</code> 명령어를  사용해 cherry-pick을 중단하면 cherry-pick을 하기 전 상태로 돌아갈 수 있다.</p>
</li>
</ol>
<h2 id="chery-pick-merge"><a href="#chery-pick-merge" class="headerlink" title="chery-pick merge"></a>chery-pick merge</h2><p>merge commit을 cherry-pick 하고 싶을 때 사용한다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git cherry-pick -m 1 &lt;merge_commit_hash&gt;</span><br></pre></td></tr></table></figure>


<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://imasoftwareengineer.tistory.com/7">https://imasoftwareengineer.tistory.com/7</a></p>
</blockquote>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>cherry-pick</tag>
      </tags>
  </entry>
  <entry>
    <title>git ignore</title>
    <url>/2021/08/10/git-ignore/</url>
    <content><![CDATA[<p>올리지 않아도 되는 확장자나 폴더를 제외하는 git 명령어.</p>
<a id="more"></a>

<ol>
<li><code>.gitignore</code> 파일을 생성한다. (맨 앞에 <code>.</code>을 입력하여 생성하면 숨김파일로 생성된다.)</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi .gitignore</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>제외하고 싶은 확장자나 폴더를 기재한다.</li>
<li>git add → commit → push를 진행한다.</li>
</ol>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>ignore</tag>
      </tags>
  </entry>
  <entry>
    <title>Git &amp; GitHub 개요</title>
    <url>/2020/08/27/git-overview/</url>
    <content><![CDATA[<p>현대 개발 팀 프로젝트에서 버전관리와 클라우드 저장소는 꼭 필요한 것이며, 버전관리를 위해서 Git, 클라우드 저장을 위해서 Github를 익히면 팀프로젝트 때 효율적인 개발 협업을 할 수 있다.</p>
<a id="more"></a>

<h2 id="다수의-개발자가-하나의-서비스를-만드려면"><a href="#다수의-개발자가-하나의-서비스를-만드려면" class="headerlink" title="다수의 개발자가 하나의 서비스를 만드려면?"></a>다수의 개발자가 하나의 서비스를 만드려면?</h2><ol>
<li>각자 개발하다가 메일이나 USB 등으로 보내서 합친다.</li>
<li>에러를 대비해 백업본을 만들어둔다.</li>
<li>상대방의 파일을 수정시에 따로 언급한다.</li>
<li>코드를 합칠 때 내 코드에도 반영한다.</li>
</ol>
<p>→ <strong>따로 작업하다가 내가 원할 때 코드를 합칠 수 있는 방법</strong>: 깃 (분산 버전 관리 시스템)</p>
<h2 id="버전-관리-시스템-Git"><a href="#버전-관리-시스템-Git" class="headerlink" title="버전 관리 시스템 Git"></a>버전 관리 시스템 Git</h2><p>내가 만든 버전과 동료가 만든 버전을 비교해서 최신본으로 코드를 업데이트할 수 있다. 저장할 공간만 있다면 어디서나 사용이 가능하다. <strong>CLI</strong>(Command-line interface), <strong>GUI</strong>(graphical user interface)를 사용할 수 있다.</p>
<h2 id="Github에-코드를-올리는-과정"><a href="#Github에-코드를-올리는-과정" class="headerlink" title="Github에 코드를 올리는 과정"></a>Github에 코드를 올리는 과정</h2><ol>
<li>해당 프로젝트 폴더에서 사용할 것이라고 명령</li>
<li>작업 후 변경한 파일중 올리고 싶은 것을 선택</li>
<li>선택한 파일을 하나의 버전으로 만들어주고 설명을 기재</li>
<li>GitHub 사이트에서 프로젝트 저장소 생성</li>
<li>내 컴퓨터에서 만들었던 덩어리 작업물 GitHub에 업데이트</li>
</ol>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>패스트 캠퍼스 온라인 강의 처음 배우는 Git &amp; GitHub _ 진유림 강사님</p>
</blockquote>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>overview</tag>
        <tag>git</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub 버전 생성</title>
    <url>/2020/09/02/git-process/</url>
    <content><![CDATA[<p><a href="https://github.com/">GitHub</a>는 오픈 소스에서 비즈니스에 이르기까지 4천만 명의 개발자와 함께 코드를 호스트하고 검토하고 프로젝트를 관리하며 소프트웨어를 구축할 수 있는 개발 플랫폼이다.</p>
<a id="more"></a>

<h2 id="GitHub-버전-생성"><a href="#GitHub-버전-생성" class="headerlink" title="GitHub 버전 생성"></a>GitHub 버전 생성</h2><p><em>Git 초기화와 로컬 저장소</em></p>
<ol>
<li><strong>원하는 폴더에서 Git 초기화를 하면 버전 관리를 할 수 있다.</strong><ul>
<li>Git 초기화를 하면 .git이라는 숨겨진 폴더(로컬 저장소)가 만들어진다.</li>
<li>로컬 저장소에 내가 만든 버전 정보, 원격 저장소 주소 등이 저장된다.</li>
<li>원격 저장소에서 내 컴퓨터로 코드를 받아오면 로컬 저장소가 자동으로 생긴다.</li>
<li>한 폴더 하나의 로컬 저장소만 유지해야 한다.</li>
</ul>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<p><em>첫번째 버전 만들기</em></p>
<ol start="2">
<li><strong>코딩을 진행한 후, 내가 변경한 파일중에 올리기를 원하는 것만 선택한다.</strong></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>선택한 파일들을 하나의 버전으로 만들고 설명을 라벨링한다.</strong></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit -m&quot;설명 라벨링&quot;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><strong>생성한 커밋을 확인한다.</strong><ul>
<li>커밋은 ‘의미 있는 변동사항’을 묶어야 한다.</li>
<li>추후 수정할 때 어떤 파일을 수정했는지 쉽게 파악이 가능하다.</li>
<li>커밋 메시지는 바로 어떤 내용을 작업했는지 파악할 수 있도록 최소한이라도 기재해준다.</li>
<li>Git에서 커밋이란 변경 사항이 아니라 최종 코드의 모음이다.</li>
<li>변경되지 않은 파일은 ‘변경되지 않았다’라고만 저장되어 용량을 크게 차지하지 않는다.</li>
</ul>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure>

<p><em>만든 버전 GitHub에 올리기</em></p>
<ol start="5">
<li><strong>GitHub 사이트에서 프로젝트 저장소를 생성한다.</strong></li>
</ol>
<ul>
<li><strong>New repository</strong>: 새로운 저장소 만들기</li>
<li><strong>Import repository</strong>: 저장소 가져오기</li>
<li><strong>New gist</strong>: 코드 조각을 올리고 싶을 때 사용</li>
<li><strong>New organization</strong>: 팀프로젝트를 할 때 진행</li>
<li><strong>New project</strong></li>
</ul>
<ol start="6">
<li><strong>내 컴퓨터 프로젝트 폴더에 GitHub 저장소 주소를 알려준다.</strong></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add origin https:&#x2F;&#x2F;github.com&#x2F;&#x2F;아이디&#x2F;이름.git</span><br></pre></td></tr></table></figure>

<ol start="7">
<li><strong>내컴퓨터에 만들었던 커밋을 GitHub에 올린다.</strong></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push master</span><br></pre></td></tr></table></figure>

<h2 id="타인의-저장소-활용"><a href="#타인의-저장소-활용" class="headerlink" title="타인의 저장소 활용"></a>타인의 저장소 활용</h2><p><em>Clone</em></p>
<ul>
<li>내 컴퓨터에 폴더를 생성하고 GitHub의 저장소를 받아온다.<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;아이디&#x2F;이름.git</span><br></pre></td></tr></table></figure></li>
<li>app.js 파일 생성 후 add → commit → push</li>
<li>GitHub에서 새 커밋을 확인한다.</li>
</ul>
<p><em>pull</em></p>
<ul>
<li>원격 저장소의 데이터를 가져온다.<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="깃-명령어"><a href="#깃-명령어" class="headerlink" title="깃 명령어"></a>깃 명령어</h2><ul>
<li><strong>git init</strong>: 이제부터 깃을 시작하겠다 선언</li>
<li><strong>git status</strong>: 현재 깃 상태</li>
<li><strong>git add</strong>: 깃에 파일 추가<ul>
<li>ex) git add 파일명 : 파일추가</li>
<li>ex) git add . : 폴더+파일 추가</li>
</ul>
</li>
<li><strong>git remote (주소)</strong>: 데이터 전송</li>
<li><strong>git remote</strong>: 전송되었는지 확인 가능</li>
<li><strong>git commit</strong>: 라벨링<ul>
<li>첫줄이 제목, 다다음줄이 내용</li>
<li>제목은 현재형으로, 구나 절로 적용(문장말고)</li>
<li>git commit -m “docs: edit” → vim 열지 않고 내용 넣을 수 있음</li>
</ul>
</li>
<li><strong>git push { } master</strong>: 보내기</li>
<li><strong>git push -u { } master</strong>:맨처음 보낼 때 -u master 넣어주어야 함</li>
<li><strong>git remote remove { }</strong>: 리모트 삭제</li>
<li><strong>git clone</strong>: 서버에서 로컬로 가져오기</li>
</ul>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>패스트 캠퍼스 온라인 강의 처음 배우는 Git &amp; GitHub _ 진유림 강사님</p>
</blockquote>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>git stash</title>
    <url>/2020/09/08/git-stash/</url>
    <content><![CDATA[<p><code>git stash</code>는 하던 작업을 임시로 저장해두고 싶을 때 사용하는 명령어이다.</p>
<a id="more"></a>

<h2 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h2><p>새로운 stash 스택에 만들어 진행하던 작업을 임시저장한다. 먼저 작업한던 파일을 <code>add</code>한 후에 <code>stash</code>해야 한다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git stash</span><br><span class="line">$ git stash save</span><br></pre></td></tr></table></figure>

<h2 id="git-stash-list"><a href="#git-stash-list" class="headerlink" title="git stash list"></a>git stash list</h2><p>저장한 stash 목록을 확인한다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git stash list</span><br></pre></td></tr></table></figure>

<h2 id="git-stash-apply"><a href="#git-stash-apply" class="headerlink" title="git stash apply"></a>git stash apply</h2><p>했던 작업을 다시 가져온다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 가장 최근의 stash를 가져와 적용한다</span><br><span class="line">$ git stash apply</span><br><span class="line">&#x2F;&#x2F; stash 이름에 해당하는 stash를 적용한다</span><br><span class="line">$ git stash apply [stash 이름]</span><br><span class="line">&#x2F;&#x2F; staged 상태까지 저장. 인덱스로 가져올 수 있다</span><br><span class="line">$ git stash apply --index</span><br></pre></td></tr></table></figure>

<h2 id="git-stash-drop"><a href="#git-stash-drop" class="headerlink" title="git stash drop"></a>git stash drop</h2><p>apply는 단순히 stash를 적용하는 것으로 해당 stash는 스택에 여전히 남아있다. 스택에 남아있는 stash는 명령어를 사용해서 제거 가능하다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 가장 최근의 stash를 제거한다.</span><br><span class="line">$ git stash drop</span><br><span class="line">&#x2F;&#x2F; stash 이름(ex. stash@&#123;2&#125;)에 해당하는 stash를 제거한다.</span><br><span class="line">$ git stash drop [stash 이름]</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://gmlwjd9405.github.io/2018/05/18/git-stash.html">https://gmlwjd9405.github.io/2018/05/18/git-stash.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>git 커밋 되돌리기 (reset / revert)</title>
    <url>/2021/01/02/git-reset/</url>
    <content><![CDATA[<p><code>commit</code> 혹은 <code>push</code>했던 내용이 잘못되었을 때 이전으로 되돌려야하는 경우 종종 있다. 로컬에 <code>commit</code>만 할 경우 <code>reset</code>, <code>push</code>까지 된 경우 <code>revert</code>를 사용한다.</p>
<a id="more"></a>

<h2 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h2><ul>
<li>최근 커밋을 작업트리까지 버리고 롤백한다.</li>
<li><strong>reset –hard</strong> : 복구된 이력 이후의 내용을 모두 삭제후 초기화</li>
<li><strong>reset –Soft</strong> : 복구된 이력 이후의 내용을 모두 유지</li>
<li><strong>reset –mixed</strong> : 복구된 이력 이후 내용을 모두 유지하지만 인덱스를 초기화한다. (변경 내용을 다시 추가해야 함)</li>
<li><strong>reset HEAD~&lt;돌아가고 싶은 커밋 이전 이력&gt;</strong>: 현재부터 돌아가고 싶은 커밋 이전 이력으로 돌아가라고 지정할 수 도 있다.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset &lt;옵션&gt; &lt;돌아가고 싶은 커밋&gt;</span><br></pre></td></tr></table></figure>

<h2 id="revert"><a href="#revert" class="headerlink" title="revert"></a>revert</h2><ul>
<li>상태는 되돌리지만(<code>undo</code>) <strong>이전 이력은 그대로 보존</strong> 한다. (롤백 이력도 남긴다)</li>
<li>되돌릴 커밋이 여러개라면 범위를 주어 여러개를 선택할 수도 있다.</li>
<li>이미 <code>push</code>한 코드라면 <code>revert</code>를 진행하여야 한다.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git revert &lt;되돌릴 커밋&gt;</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://niceman.tistory.com/187">https://niceman.tistory.com/187</a></p>
</blockquote>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>reset</tag>
        <tag>revert</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo</title>
    <url>/2021/02/07/hexoblog/</url>
    <content><![CDATA[<p><a href="https://hexo.io/ko/">Hexo</a>는 <code>마크다운</code> 또는 다른 언어를 사용하여 포스트를 작성할 수 있는 블로그 프레임워크이다.</p>
<a id="more"></a>

<h2 id="Hexo-블로그-생성"><a href="#Hexo-블로그-생성" class="headerlink" title="Hexo 블로그 생성"></a>Hexo 블로그 생성</h2><p><em><strong>요구사항</strong></em></p>
<ul>
<li>Node.js</li>
<li>Git</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>

<h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><p><code>_config.yml</code> 파일의 사이트 환경설정을 수정할 수 있다.</p>
<h3 id="Site"><a href="#Site" class="headerlink" title="Site"></a>Site</h3><table>
<thead>
<tr>
<th>설정</th>
<th>설멍</th>
</tr>
</thead>
<tbody><tr>
<td>title</td>
<td>웹 사이트의 제목</td>
</tr>
<tr>
<td>subtitle</td>
<td>웹 사이트의 부제</td>
</tr>
<tr>
<td>description</td>
<td>웹 사이트에 대한 설명</td>
</tr>
<tr>
<td>keywords</td>
<td>웹사이트의 키워드</td>
</tr>
<tr>
<td>author</td>
<td>작성자 이름</td>
</tr>
<tr>
<td>language</td>
<td>웹 사이트의 <a href="https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes">주 사용언어</a>. 기본값은 en.</td>
</tr>
<tr>
<td>timezone</td>
<td>웹 사이트에서 사용하는 timezone. Hexo는 기본적으로 PC의 시간값을 사용한다.</td>
</tr>
</tbody></table>
<h2 id="Commands"><a href="#Commands" class="headerlink" title="Commands"></a>Commands</h2><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><ul>
<li>웹사이트를 초기화한다.</li>
<li><code>folder</code>가 없을 경우 현재 디렉토리에서 세팅한다.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo init [folder]</span><br></pre></td></tr></table></figure>

<h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><ul>
<li>새 블로그 글을 생성한다.</li>
<li><code>layout</code>을 공란으로 둘 경우 <code>_config.yml</code>에 정의된 <code>default_layout</code>을 사용한다.</li>
<li><code>title</code>에 공백이 포함될 시 따옴표로 감싼다.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>레이아웃</th>
<th>경로</th>
</tr>
</thead>
<tbody><tr>
<td><code>post</code></td>
<td><code>source/_posts</code></td>
</tr>
<tr>
<td><code>page</code></td>
<td><code>source</code></td>
</tr>
<tr>
<td><code>draft</code></td>
<td><code>source/_drafts</code></td>
</tr>
</tbody></table>
<h3 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h3><p>정적 파일을 생성한다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<h3 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h3><p><code>draft</code>로 작성한 내용을 배포한다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure>

<h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<h3 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h3><p>웹사이트를 deploy한다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><p>파일을 렌더링한다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure>

<h3 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h3><p>다른 블로그 시스템의 내용을 Hexo로 마이그레이션한다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo migrate &lt;type&gt;</span><br></pre></td></tr></table></figure>

<h3 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h3><p>캐시파일(<code>db.json</code>) 및 생성된 파일들(<code>public</code>)을 삭제한다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>

<h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>경로(route) 목록을 보여준다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo list &lt;type&gt;</span><br></pre></td></tr></table></figure>

<h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><p>버전 정보를 보여준다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo version</span><br></pre></td></tr></table></figure>

<h3 id="안전모드"><a href="#안전모드" class="headerlink" title="안전모드"></a>안전모드</h3><p>플러그인과 스크립트를 불러오지 않는다. 새로운 플러그인을 설치후 문제가 발생할 경우 사용한다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo --safe</span><br></pre></td></tr></table></figure>

<h3 id="디버그-모드"><a href="#디버그-모드" class="headerlink" title="디버그 모드"></a>디버그 모드</h3><p>터미널에 <code>verbose</code> 로그 메시지를 출력하고 <code>debug.log</code> 파일에 저장한다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo --debug</span><br></pre></td></tr></table></figure>

<h3 id="Silent-모드"><a href="#Silent-모드" class="headerlink" title="Silent 모드"></a>Silent 모드</h3><p>터미널에 내용을 출력하지 않는다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo --silent</span><br></pre></td></tr></table></figure>

<h3 id="설정-파일의-변경-customizing"><a href="#설정-파일의-변경-customizing" class="headerlink" title="설정 파일의 변경(customizing)"></a>설정 파일의 변경(customizing)</h3><p><code>_config.yml</code> 대신 커스터미이징한 설정 파일을 사용할 수 있다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo --config custom.yml</span><br></pre></td></tr></table></figure>

<h3 id="Draft-포스트-표시"><a href="#Draft-포스트-표시" class="headerlink" title="Draft 포스트 표시"></a>Draft 포스트 표시</h3><p>Draft 포스트를 보여준다. (<code>source/_drafts</code> 폴더)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo --draft</span><br></pre></td></tr></table></figure>


<h3 id="현재-작업-디렉토리의-변경-customizing"><a href="#현재-작업-디렉토리의-변경-customizing" class="headerlink" title="현재 작업 디렉토리의 변경(customizing)"></a>현재 작업 디렉토리의 변경(customizing)</h3><p>현재 작업 디렉토리 경로를 변경할 수 있다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo --cwd &#x2F;path&#x2F;to&#x2F;cwd</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://hexo.io/ko/">https://hexo.io/ko/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/08/08/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>UI 개발 기본 지식</title>
    <url>/2024/05/11/html-basic/</url>
    <content><![CDATA[<p>UI / Front-end develop info.</p>
<a id="more"></a>
<h2 id="Doctype"><a href="#Doctype" class="headerlink" title="Doctype"></a>Doctype</h2><ul>
<li>선언된 페이지의 HTML 버전이 무엇인지를 웹 브라우저에 알려주는 역할을 하는 선언문. 브라우저는 선언된 <code>doctype</code>에 따라 렌더링할 모드를 선택한다.</li>
<li>기재하지 않았을 경우 쿼크모드를 선택하여 렌더링한다.<ul>
<li>쿼크모드: 오래된 웹브라우저를 위하여 디자인된 웹 페이지의 하위 호환성을 유지하기 위해 표준 모드 대신 쓰이는 모드. 브라우저별로 다른 결과물을 출력한다.</li>
<li>표준모드: 브라우저별로 같은 결과물을 출력한다.</li>
</ul>
</li>
</ul>
<h2 id="웹표준과-웹접근성"><a href="#웹표준과-웹접근성" class="headerlink" title="웹표준과 웹접근성"></a>웹표준과 웹접근성</h2><ul>
<li><strong>웹접근성:</strong>  <strong>모두가 차별없이 웹에서 제공하는 정보를 이용할 수 있도록 하는 것.</strong> 정보통신 서비스 제공자는 장애인의 접근성 차별 금지와 의사소통의 편의 제공을 위해 표준 텍스트 파일, 동영상 자막 등 편의 제공 기술 방안을 마련해서 서비스를 제공해야 한다. 장애인과 비장애인이 동등하게 서비스에 접근할 수 있게 만들어줘야 한다. 이런 맥락에서 제시되는 개념이 ‘웹 접근성’(Web Accessibility)이다.</li>
<li><strong>웹표준: 표준화된 언어를 사용함으로써 동일한 결과물을 보여주는 것.</strong> 브라우저 종류 및 버전에 따른 기능 차이에 대하여 호환이 가능하도록 제시된 표준으로, 다른 기종 혹은 플랫폼에 따라 달리 구현되는 기술을 동일하게 구현함과 동시에 어느 한쪽에 최적화되어 치우치지 않도록 공통요소를 사용하여 웹 페이지를 제작하는 기법을 의미한다. 표준화 단체인 W3C(World Wide Consortium)가 권고한 표준안에 따라 웹사이트를 작성할 때 이용하는 HTML, CSS, JavaScript 등에 대한 규정을 담고 있으며 웹 표준의 궁극적인 목적은 웹사이트에 접속한 사용자가 어떠한 운영체제나 브라우저를 사용하더라도 동일한 결과를 보이게 하는 것이다.</li>
<li>다시 말해, 웹접근성과 웹표준의 차이는 어디에 초점이 맞춰져 있냐이다. <strong>웹접근성</strong>은 어느 유저든 간에 접근하는 방식을 보다 쉽게 만들어야 되는데에 초점이 잡혀있고, <strong>웹표준</strong>은 어느 브라우저에서나 동일한 디자인과 기능을 구현하는데에 초점이 잡혀있다.</li>
</ul>
<h2 id="시맨틱태그"><a href="#시맨틱태그" class="headerlink" title="시맨틱태그"></a>시맨틱태그</h2><ul>
<li>의미가 있는 태그를 말한다. 검색엔진 최적화에 도움이 되며 장애가 있는 사용자가 스크린 리더를 사용하여 페이지를 탐색할 때 도움이 된다.</li>
<li>seo: 검색 엔진 최적화라는 말. 태그를 기반으로 페이지 내 검색 키워드의 우선 순위를 판단한다. 검색 엔진 최적화란 웹 페이지 검색엔진이 자료를 수집하고 순위를 매기는 방식에 맞게 웹 페이지를 구성해서 검색 결과의 상위에 나올 수 있게 하는 작업을 말한다.</li>
</ul>
<h2 id="브라우저-렌더링-과정"><a href="#브라우저-렌더링-과정" class="headerlink" title="브라우저 렌더링 과정"></a>브라우저 렌더링 과정</h2><ul>
<li>HTML 파일과 CSS 파일을 파싱해서 각각 Tree를 만든다. (Parsing)</li>
<li>두 Tree를 결합하여 Rendering Tree를 만든다. (Style)</li>
<li>Rendering Tree에서 각 노드의 위치와 크기를 계산한다. (Layout)</li>
<li>계산된 값을 이용해 각 노드를 화면상의 실제 픽셀로 변환하고, 레이어를 만든다. (Paint)</li>
<li>레이어를 합성하여 실제 화면에 나타낸다. (Composite)</li>
</ul>
<h2 id="CSS-방법론"><a href="#CSS-방법론" class="headerlink" title="CSS 방법론"></a>CSS 방법론</h2><ul>
<li>OOCSS: CSS를 모듈화하여 코딩하여, 중복을 최소화한다. 가독성이 떨어지는 문제가 생길 수 있다.</li>
<li>BEM: 블록 엘리먼트 모디파이어의 줄임말이다. 블록 단위로 구분한다.</li>
<li>SMASS: 대규모 스타일 가이드를 만들기 위한 지침이며 스타일을 5가지로 분류하고 각 유형에 맞게 스타일을 선언한다. (기초, 레이아웃, 모듈, 상태, 테마 등이 있다.)</li>
</ul>
<h2 id="CSS-7대-단위"><a href="#CSS-7대-단위" class="headerlink" title="CSS 7대 단위"></a>CSS 7대 단위</h2><p>rem, vh, vw, vmin, vmax, ex, ch</p>
<h2 id="브라우저-저장소의-차이"><a href="#브라우저-저장소의-차이" class="headerlink" title="브라우저 저장소의 차이"></a>브라우저 저장소의 차이</h2><ul>
<li><strong>쿠키</strong>는 만료기간이 있는 키-값 저장소로, 클라이언트에 저장된다. 서버에 요청을 보낼 때마다 자동으로 전송되는 특징을 가지고 있다.</li>
<li><strong>로컬스토리지와 세션스토리지</strong>는 사용자 정보를 키-값 형태로 클라이언트 브라우저에 저장된다.<ul>
<li>로컬스토리지는 브라우저를 종료해도 유지되어 유저가 삭제하지 않는 이상 영구적으로 데이터를 보관할 수 있다.</li>
<li>세션스토리지는 브라우저 종료시 데이터가 사라진다는 특성을 가지고 있다.</li>
</ul>
</li>
<li>기본적으로 쿠키와 로컬 스토리지, 세션 스토리지는 모두 브라우저에서 데이터 저장소의 역할을 하는 것들이다. 웹에서 로그인을 하기 위해서는 토큰을 발급받아 API를 호출해야 한다. 하지만 반복되는 작업을 계속 하게 되는 것이 비효율적이고, 이를 보완하기 위해 쿠키를 서버와 클라이언트에 생성해서 토큰 발급 없이 쿠키만 가지고 서버에 요청을 할 수 있게 된다. 쿠키는 저장 공간이 4KB로 작은 편인데 이러한 단점을 보완하여 만든 것이 웹 스토리지이다. </li>
<li>웹 스토리지는 서버에 클라이언트 데이터를 저장하지 않는다. 웹 스토리지에는 로컬 스토리지와 세션 스토리지가 있는데 로컬 스토리지는 브라우저에 정보가 계속해서 남아있는 반면, 세션 스토리지는 해당 세션이 끝나면, 즉 브라우저가 닫히면 데이터가 사라진다. 웹 스토리지는 데스크탑 기준 5~10MB의 저장 공간을 가지고 있어서 쿠키에 비해 훨씬 저장공간이 크다는 장점이 있다. 웹 스토리지는 반면 HTML5부터 지원하기 때문에 이전 브라우저에서는 지원이 되지 않는다는 단점이 있다.</li>
</ul>
<h2 id="자바스크립트의-비동기-처리-방식"><a href="#자바스크립트의-비동기-처리-방식" class="headerlink" title="자바스크립트의 비동기 처리 방식"></a>자바스크립트의 비동기 처리 방식</h2><ul>
<li> 메인 스레드가 서버로부터 데이터를 받아올 때까지 기다리지 않고 먼저 함수를 반환하고 그 다음 작업을 수행한다. 서버에서 데이터가 수신되면 이를 처리하는 Callback이 비동기 환경에서 별도로 실행된다.</li>
<li>자바스크립트는 단일 스레드로 동작하며, 비동기 환경이 별도로 존재한다. 비동기 환경은 엔진 외부에 위치하며 Event Loop, Task Queue, Job Queue 등으로 구성된다.  setTimeout, Fetch 등 기본으로 제공되는 API 함수나 Promise, Async로 비동기를 사용할 수 있다. <ul>
<li>비동기 처리는 우선순위가 가장 높은 JobQueue에서 작동하며, 요청 처리 후 TaskQueue에 비동기 응답을 처리하는 Callback 함수를 넣는다. </li>
<li>자바스크립트 엔진은 메인스레드의 CallStack이 비워지면 TaskQueue 내의 Callback 함수를 메인스레드에서 실행한다. </li>
<li>비동기 처리를 받지 않더라도, 모든 Callback 함수는 비동기 환경의 TaskQueue에 넣어졌다가, CallStack이 비워지면 CallStack으로 이동되어 처리된다.</li>
</ul>
</li>
</ul>
<h2 id="서버-사이드-렌더링과-클라이언트-사이드-렌더링의-차이"><a href="#서버-사이드-렌더링과-클라이언트-사이드-렌더링의-차이" class="headerlink" title="서버 사이드 렌더링과 클라이언트 사이드 렌더링의 차이"></a>서버 사이드 렌더링과 클라이언트 사이드 렌더링의 차이</h2><p>서버 사이드 렌더링은 전통적인 웹 방식을 의미하며 페이지가 새로고침 될 때마다 서버로부터 리소스를 전달받아 화면에 렌더링 하는 방식이다. 하지만 React, Vue 등의 라이브러리가 등장하면서 훨씬 더 좋은 성능의 SPA 방식의 개발 환경을 선호하기 시작하였다. CSR에서 서버는 단지 JSON 파일을 보내주는 역할만 할 뿐이며, html을 그리는 역할은 클라이언트에서 수행한다. 하지만, CSR은 자바스크립트가 모든 동작을 수행한 후에 화면에 내용이 나타나므로 초기 구동속도는 SSR에 비해 느리다는 단점이 있다. SEO를 할 수 없고 보안적으로 취약하다는 문제점도 나타난다.</p>
<h2 id="data-속성"><a href="#data-속성" class="headerlink" title="data- 속성"></a>data- 속성</h2><p>표준이 아닌 속성이나 추가적인 DOM 속성과 같은 다른 조작을 하지 않고도, 의미론적 표준 HTML 요소에 추가 정보를 저장할 수 있게 도와준다.</p>
<h2 id="프로그레시브-렌더링"><a href="#프로그레시브-렌더링" class="headerlink" title="프로그레시브 렌더링"></a>프로그레시브 렌더링</h2><p>프로그레시브 렌더링은 컨텐츠를 가능한 빨리 표시하기 위해 성능을 향상시키는 기술이다. 인터넷 속도가 느리거나 불안정한 모바일 환경이 아직 많이 남아있기 때문에 이럴 때 유용하게 사용한다. 대표적으로 레이지 로딩이 있다. 이미지를 한 번에 로드하는 것이 아니라, 자바스크립트를 통해 사용자가 표시하려는 부분만 스크롤 시에 이미지를 로드하는 것이다.</p>
<h2 id="최적화-방법"><a href="#최적화-방법" class="headerlink" title="최적화 방법"></a>최적화 방법</h2><ul>
<li>http 요청 수 줄이기<ul>
<li>스크립트 파일 병합</li>
<li>인라인 이미지</li>
<li>이미지 스프라이트</li>
</ul>
</li>
<li>콘텐츠 파일 크기 줄이기<ul>
<li>스크립트 파일 압축 전달</li>
<li>스크립트 파일 최소화</li>
<li>이미지 파일 압축</li>
<li>브라우저가 선호하는 이미지 포맷 사용</li>
<li>큰 파일은 작게 나누어 전송</li>
</ul>
</li>
<li>캐시 최적화하기<ul>
<li>인터넷 캐시 사용</li>
<li>브라우저 캐시 사용</li>
</ul>
</li>
<li>CDN 활용</li>
</ul>
<h2 id="rem-em의-차이"><a href="#rem-em의-차이" class="headerlink" title="rem, em의 차이"></a>rem, em의 차이</h2><ul>
<li>rem: 최상위 요소인 html의 font-size값이 기준이 된다. (root em)</li>
<li>em: 해당 요소의 font-size값이 기준이 된다.</li>
</ul>
<h2 id="meta-tag"><a href="#meta-tag" class="headerlink" title="meta tag"></a>meta tag</h2><ul>
<li>meta 태그에 대해서 조금 더 살펴보면, meta 태그는 head 부분에서 다른 태그들(script, style, link, title 등)로 나타낼 수 없는 메타데이터를 나타내는 태그를 의미한다. <meta name="keywords" content="ABC"> 와 같이 검색 엔진을 위한 키워드나 <meta name="description" content="OWEN">과 같이 문서에 대한 설명 등에 사용된다. 화면에는 별다르게 표시되는 내용이 없지만, 검색 엔진이나 브라우저에서 읽힌다.</li>
<li><code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</code><ul>
<li>IE간의 버전 차이로 인해 똑같은 웹사이트라고 하더라도 다르게 보여지는 경우가 있어 이를 보완하기 위해 MS에서 “호환성 보기”라는 기능을 제공하고 있다. “호환성 보기”는 IE 버전이 상이하더라도 같은 화면을 볼 수 있도록 의미한다. 여기서 <code>content=&quot;IE=Edge&quot;</code>는 각 IE 버전 중 최신 표준 모드를 선택한다는 의미이다.</li>
</ul>
</li>
</ul>
<h2 id="다국어-페이지-제공-방식"><a href="#다국어-페이지-제공-방식" class="headerlink" title="다국어 페이지 제공 방식"></a>다국어 페이지 제공 방식</h2><p>SSR의 경우 HTTP 요청 시 클라이언트에서 Accept-Language 헤더와 같이 기본 언어 설정에 대한 정보를 보낸다. 서버는 이 정보를 사용해 해당 언어로 된 문서 버전을 반환한다. 반환된 문서는 lang 속성을 선언한다. CSR 시 클라이언트 사이드에서 해당 언어 팩(JSON 등)을 가져와 출력한다.</p>
<h2 id="크로스-브라우징"><a href="#크로스-브라우징" class="headerlink" title="크로스 브라우징"></a>크로스 브라우징</h2><p>크로스 브라우징은 웹 표준에 따라 서로 다른 OS 또는 플랫폼에 대응하는 것을 말한다. 브라우저별 렌더링 엔진이 다른 상황 등 어떠한 상황 속에서도 문제 없이 동작하게 하는 것을 목표로 한다. 프론트엔드 개발자는 여러가지 전략을 세울 수가 있는데, feature detection(기능 탐지)을 사용해서 해당 기능이 해당 브라우저에 있는지를 확인하는 방법을 사용할 수도 있다. 특히 한 쪽 환경에 최적화를 하는 것 보다, 전체적인 웹 표준을 지키는 데에 노력해야 한다.</p>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML 콘텐츠 모델</title>
    <url>/2020/10/24/html-content-model/</url>
    <content><![CDATA[<p>HTML5의 요소는 0개 이상의 카테고리에 속하며, 각 카테고리는 특성이 비슷한 요소끼리 묶어둔 분류이다. 특정 요소는 폼 관련 요소로 따로 분류하여 다양한 폼 관리 처리 모델에서 세부적으로 분류된다. 어떤 요소들은 특정 요소만의 요구사항을 가지고 있고, 아무 카테고리에도 해당되지 않는 경우가 있다. 기본 규칙은 Base HTML Element에 나온 규칙을 따른다.</p>
<a id="more"></a>

<p><img src="/images/content-model.jpg" alt="HTML5 Content Model"></p>
<h2 id="메타데이터-콘텐츠-Metadata-Content"><a href="#메타데이터-콘텐츠-Metadata-Content" class="headerlink" title="메타데이터 콘텐츠 (Metadata Content)"></a>메타데이터 콘텐츠 (Metadata Content)</h2><ul>
<li>메타데이터는 나머지 내용의 표현 및 행동을 설정함</li>
<li>다른 문서와의 관계를 설정하거나, 미분류 정보들을 포함한다.</li>
</ul>
<blockquote>
<p>base, command, link, meta, noscript, script, style, title</p>
</blockquote>
<h2 id="플로우-콘텐츠-Flow-Content"><a href="#플로우-콘텐츠-Flow-Content" class="headerlink" title="플로우 콘텐츠 (Flow Content)"></a>플로우 콘텐츠 (Flow Content)</h2><ul>
<li>문서 및 어플리케이션의 Body에서 사용되는 대부분의 요소는 플로우 콘텐츠로 분류.</li>
<li>플로우 콘텐츠 모델을 포함할 수 있는 콘텐츠 모델은 최소한 하나의 공백이 아닌 텍스트 노드를 포함하거나, 최소한 하나의 임베디드 콘텐츠를 포함하여야 한다. 이러한 결과로 del요소 및 그 자식 요소들은 del요소의 부모 엘리먼트가 될 수 없다. (강력하게 지켜야 할 내용은 아님)</li>
<li>스크립트로 데이터를 채우기 위해 자리를 잡아 두는 목적 등의 정당한 이유로 요소가 비어 있을 수 있다.</li>
</ul>
<blockquote>
<p>a, abbr, address, area (map 요소의 자식 요소인 경우), article, aside, audio, b, bdi, bdo, blockquote, br, button, canvas,  cite, code, command, datalist, del, details, dfn, div, dl, em, embed, fieldset, figure, footer, form, h1, h2, h3, h4, h5, h6, header, hgroup, hr, i, iframe, img, input, ins, kbd, keygen, label, map, mark, math, menu, meter, nav, noscript, object, ol, output, p, pre, progress, q, ruby, s, samp, script, section, select, small, span, strong, style (scoped 속성이 있으면), sub, sup, svg, table, textarea, time, ul, var, video, wbr, text</p>
</blockquote>
<h2 id="섹션-콘텐츠-Section-Conetnt"><a href="#섹션-콘텐츠-Section-Conetnt" class="headerlink" title="섹션 콘텐츠 (Section Conetnt)"></a>섹션 콘텐츠 (Section Conetnt)</h2><ul>
<li>헤딩과 푸터의 유효범위를 지정함</li>
<li>제목과 그 내용을 포함하는 범위를 지정함</li>
<li>헤딩과 아웃라인을 포함할 수 있다.</li>
</ul>
<blockquote>
<p>article, aside, nav, section</p>
</blockquote>
<h2 id="헤딩-콘텐츠-Heading-Content"><a href="#헤딩-콘텐츠-Heading-Content" class="headerlink" title="헤딩 콘텐츠 (Heading Content)"></a>헤딩 콘텐츠 (Heading Content)</h2><p>섹션(섹션 콘텐츠나 또는 헤딩 콘텐츠에 의해 암시적으로 마크업 된 영역)의 헤더를 정의한다.</p>
<blockquote>
<p>h1, h2, h3, h4, h5, h6, hgroup</p>
</blockquote>
<h2 id="프레이징-콘텐츠-Phrasing-Content"><a href="#프레이징-콘텐츠-Phrasing-Content" class="headerlink" title="프레이징 콘텐츠 (Phrasing Content)"></a>프레이징 콘텐츠 (Phrasing Content)</h2><ul>
<li>문서의 텍스트이며, 그 텍스트를 단락 내부레벨에서 마크업을 하는 요소</li>
<li>프레이징 콘텐츠가 모여 문단을 구성한다.</li>
</ul>
<blockquote>
<p>a (프레이징 콘텐츠만을 포함하는 경우), abbr, area (map 요소의 자식요소인 경우), audio, b, bdi, bdo, br, button, canvas, cite, code, command, datalist, del (프레이징 콘텐츠을 포함하는 경우), dfn, em, embed, i, iframe, img, input, ins (프레이징 콘텐츠만을 포함하는 경우), kbd, keygen, label, map (프레이징 콘텐츠만을 포함하는 경우), mark, math, meter, noscript, object, output, progress, q, ruby, s, samp, script, select, small, span, strong, sub, sup, svg, textarea, time, var, video, wbr, text</p>
</blockquote>
<h2 id="임베디드-콘텐츠-Embedded-Content"><a href="#임베디드-콘텐츠-Embedded-Content" class="headerlink" title="임베디드 콘텐츠 (Embedded Content)"></a>임베디드 콘텐츠 (Embedded Content)</h2><ul>
<li>다른 리소스(음악, 영상 등)를 문서에 삽입하는 콘텐츠나, 문서에 삽입된 다른 형태에서 유래한 콘텐츠</li>
<li>HTML의 네임스페이스에 속하지 않으면서, 콘텐츠를 포함하고 있지만 메타데이터가 아닌 것들을 임베디드 콘텐츠라 한다. (SVG등)</li>
<li>임베디드 콘텐츠 요소 중 일부는 외부 리소스가 사용이 불가능 할때 사용할 대체 콘텐츠를 갖는다.</li>
</ul>
<blockquote>
<p>audio, canvas, embed, iframe, img, math, object, svg, video</p>
</blockquote>
<h2 id="인터랙티브-콘텐츠-Interactive-Content"><a href="#인터랙티브-콘텐츠-Interactive-Content" class="headerlink" title="인터랙티브 콘텐츠 (Interactive Content)"></a>인터랙티브 콘텐츠 (Interactive Content)</h2><p>사용자와의 상호작용을 위해 사용되는 콘텐츠</p>
<blockquote>
<p>a, audio (controls 속성이 있으면), button, details, embed, iframe, img (usemap 속성이 있으면), input (type 속성이 hidden 상태가 아니면), keygen, label, menu (type 속성이 toolbar 상태면), object (usemap 속성이 있으면), select, textarea, video (controls 속성이 있으면)</p>
</blockquote>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="http://darum.daum.net/convention/html/html5_elements">http://darum.daum.net/convention/html/html5_elements</a></p>
</blockquote>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>HTML5</tag>
        <tag>Content Model</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML &amp; CSS 개요</title>
    <url>/2020/10/20/html-css-overview/</url>
    <content><![CDATA[<p>HTML(Hyper Text Markup Language)는 페이지에 제목, 문단, 표 등을 정의하고 의미를 부여하는 정적 언어이다. CSS(Cascading Style Sheets)는 콘텐츠 구조를 꾸며주는 정적 언어로 웹의 시각적 표현을 담당한다.</p>
<a id="more"></a>

<h2 id="웹접근성"><a href="#웹접근성" class="headerlink" title="웹접근성"></a>웹접근성</h2><p>[웹 접근성 연구소] <a href="https://www.wah.or.kr:444/">https://www.wah.or.kr:444/</a><br>[한국형 웹 콘텐츠 접근성 지침 2.1] <a href="https://www.wah.or.kr:444/Participation/guide.asp">https://www.wah.or.kr:444/Participation/guide.asp</a><br>[웹 콘텐츠 제작기법] <a href="https://www.wah.or.kr:444/Participation/technique.asp">https://www.wah.or.kr:444/Participation/technique.asp</a></p>
<blockquote>
<p><strong>웹 접근성 품질인증 마크</strong><br>장애인이나 고령자가 웹사이트 이용에 불편이 없도록 웹 접근성 표준을 준수한 우수 사이트에 대해 품질을 인증하고 마크를 부여하는 제도.</p>
</blockquote>
<h2 id="에디터"><a href="#에디터" class="headerlink" title="에디터"></a>에디터</h2><p>[Sublime Text] <a href="https://www.sublimetext.com/">https://www.sublimetext.com/</a><br>[Atom] <a href="https://atom.io/">https://atom.io/</a><br>[Brackets] <a href="http://brackets.io/">http://brackets.io/</a><br>[VS Code] <a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a><br>[WebStorm] <a href="https://www.jetbrains.com/webstorm/">https://www.jetbrains.com/webstorm/</a></p>
<h2 id="VS-Code"><a href="#VS-Code" class="headerlink" title="VS Code"></a>VS Code</h2><h3 id="Extensions"><a href="#Extensions" class="headerlink" title="Extensions"></a>Extensions</h3><ul>
<li>Korean Language Pack for Visual Studio Code</li>
<li>Beautify</li>
<li>Live Server</li>
<li>Auto Rename Tag</li>
<li>Terminal</li>
<li>Live Sass Compiler</li>
<li>Turbo Console log</li>
<li>Better Comments</li>
<li>Highlight Matching Tag</li>
<li>GitLens</li>
<li>REST Client</li>
</ul>
<h3 id="단축키"><a href="#단축키" class="headerlink" title="단축키"></a>단축키</h3><table>
<thead>
<tr>
<th>Windows 단축키</th>
<th>macOS 단축키</th>
<th>설명</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + B</td>
<td>Cmd + B</td>
<td>사이드바 열기/닫기</td>
</tr>
<tr>
<td>Ctrl + P</td>
<td>Cmd + P</td>
<td>빠른 열기(파일이나 기호 탐색)</td>
</tr>
<tr>
<td>Ctrl + Shift + P</td>
<td>Cmd + Shift + P</td>
<td>모든 명령 표시(에디터의 모든 명령에 접근)</td>
</tr>
<tr>
<td>Ctrl + F</td>
<td>Cmd + F</td>
<td>찾기(검색)</td>
</tr>
<tr>
<td>Ctrl + H</td>
<td>Cmd + Opt(Alt) + F</td>
<td>찾기(검색)/바꾸기(대체)</td>
</tr>
<tr>
<td>Alt + Up</td>
<td>Alt + Up</td>
<td>줄 위로 이동</td>
</tr>
<tr>
<td>Alt + Down</td>
<td>Alt + Down</td>
<td>줄 아래로 이동</td>
</tr>
<tr>
<td>Shift + Alt + UpArrow</td>
<td>Shift + Alt + UpArrow</td>
<td>위에 줄 복사</td>
</tr>
<tr>
<td>Shift + Alt + DownArrow</td>
<td>Shift + Alt + DownArrow</td>
<td>아래 줄 복사</td>
</tr>
<tr>
<td>Tab</td>
<td>Tab</td>
<td>들여쓰기</td>
</tr>
<tr>
<td>Shift + Tab</td>
<td>Shift + Tab</td>
<td>내어쓰기</td>
</tr>
<tr>
<td>Ctrl + PageUp</td>
<td>Cmd + Shift + [</td>
<td>이전 편집기 열기(좌측 창으로 전환)</td>
</tr>
<tr>
<td>Ctrl + PageDown</td>
<td>Cmd + Shift + ]</td>
<td>다음 편집기 열기(우측 창으로 전환)</td>
</tr>
<tr>
<td>Ctrl + ＼</td>
<td>Cmd + ＼</td>
<td>편집기 분할(백슬래쉬)</td>
</tr>
<tr>
<td>Ctrl + 숫자</td>
<td>Cmd + 숫자</td>
<td>(숫자)번째 분할된 편집기 그룹에 포커스</td>
</tr>
<tr>
<td>Ctrl + W</td>
<td>Cmd + W</td>
<td>편집기 닫기</td>
</tr>
</tbody></table>
<h2 id="오픈소스-라이선스"><a href="#오픈소스-라이선스" class="headerlink" title="오픈소스 라이선스"></a>오픈소스 라이선스</h2><blockquote>
<p>어떤 제품을 개발하는 과정에 필요한 코드 등을 누구나 열람할 수 있도록 공개하는 것</p>
</blockquote>
<p>개인적 이용은 가능하지만 상업적 이용에 한해서는 제한이 있거나 비용을 지불해야 하는 경우가 있다.</p>
<ul>
<li>Apache License: 개인/상업적 이용, 배포, 수정, 특허 신청 가능</li>
<li>MIT License: 개인 소스에 이 라이선스를 사용하고 있다는 표시만 지켜주면 되며 나머지 제약은 없음</li>
<li>BSD License: MIT License와 동일</li>
<li>Beerware: 오픈소스 개발자를 만날 수 있다면 맥주를 사주자!</li>
</ul>
<h2 id="웹표준-검사"><a href="#웹표준-검사" class="headerlink" title="웹표준 검사"></a>웹표준 검사</h2><p>[마크업 유효성 검사] <a href="https://validator.w3.org/">https://validator.w3.org/</a><br>[CSS 유효성 검사 사이트] <a href="https://jigsaw.w3.org/css-validator">https://jigsaw.w3.org/css-validator</a></p>
<h2 id="참고-사이트"><a href="#참고-사이트" class="headerlink" title="참고 사이트"></a>참고 사이트</h2><p>[W3C 웹 표준] <a href="https://www.w3.org/">https://www.w3.org/</a><br>[MDN 웹 문서] <a href="https://developer.mozilla.org/ko/">https://developer.mozilla.org/ko/</a><br>[W3Schools] <a href="https://www.w3schools.com/">https://www.w3schools.com/</a></p>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://heropy.blog/2019/04/24/html-css-starter">https://heropy.blog/2019/04/24/html-css-starter</a></p>
</blockquote>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
      </categories>
      <tags>
        <tag>overview</tag>
        <tag>CSS</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML 이미지 마크업 최적화</title>
    <url>/2021/12/07/html-img-markup/</url>
    <content><![CDATA[<h2 id="이미지-포맷"><a href="#이미지-포맷" class="headerlink" title="이미지 포맷"></a>이미지 포맷</h2><ul>
<li><code>.jpg</code>/<code>.png</code><ul>
<li>모든 브라우저에서 지원하는 폴백 이미지</li>
</ul>
</li>
<li><code>.webp</code> (알파 채널, ie 미지원)<ul>
<li><code>jpg</code>/<code>png</code> 대비 30-70% 수준의 용량</li>
</ul>
</li>
<li><code>.avif</code> (알파채널, 크롬/삼성인터넷 지원)<ul>
<li> 저용량+고품질</li>
</ul>
</li>
</ul>
<a id="more"></a>

<h2 id="이미지-제공-로직"><a href="#이미지-제공-로직" class="headerlink" title="이미지 제공 로직"></a>이미지 제공 로직</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">if (&#x27;avif&#x27;를 지원하면) &#123;</span><br><span class="line">    &#x27;avif&#x27; 출력</span><br><span class="line">&#125; else if (&#x27;webp&#x27;를 지원하면) &#123;</span><br><span class="line">    &#x27;webp&#x27; 출력</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    &#x27;jpg&#x27; 출력</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">picture</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">&quot;x.avif&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/avif&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">&quot;x.webp&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/webp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x.jpg&quot;</span> <span class="attr">alt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>type은 조건절이라고 생각한다. avif를 지원하면 해당 avif를 출력하라. 등등</li>
<li> 세가지 이미지 포맷중에 단 하나의 이미지만 출력한다.</li>
<li>type 뿐만 아니라 media 분기도 가능하다.</li>
</ul>
<p><em><strong>ex</strong></em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">picture</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">&quot;small.webp&quot;</span> <span class="attr">media</span>=<span class="string">&quot;(max-width:960px)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;large.webp&quot;</span> <span class="attr">alt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>resolution 이미지로도 분기 가능하다. img에도 srcset 사용 가능하다.<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">picture</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">&quot;2x.webp _2x, 1x.webp&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/webp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">srcset</span>=<span class="string">&quot;2x.jpg _2x&quot;</span> <span class="attr">src</span>=<span class="string">&quot;1x.jpg&quot;</span> <span class="attr">alt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><code>&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; alt&gt;</code></p>
<ul>
<li>lazy: 로딩 지연 / async: 디코딩 지연</li>
</ul>
<h2 id="debugging"><a href="#debugging" class="headerlink" title="debugging"></a>debugging</h2><ul>
<li><code>currentSrc</code>: 현재 화면에 출력하고 있는 소스</li>
<li><code>intrinsic</code>: 현재 화면에 출력하는 소스의 원본 사이즈</li>
</ul>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>패스트 캠퍼스 The RED : 견고한 UI 설계를 위한 마크업 가이드 _ 정찬명 강사님</p>
</blockquote>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>the red</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML을 어떻게 공부해야 하는가</title>
    <url>/2021/12/04/html-how-to-learn/</url>
    <content><![CDATA[<h2 id="Flow-content-플로우-콘텐츠"><a href="#Flow-content-플로우-콘텐츠" class="headerlink" title="Flow content (플로우 콘텐츠)"></a>Flow content (플로우 콘텐츠)</h2><ul>
<li><code>body</code>에 포함할 수 있는 요소.</li>
<li><code>base</code>, <code>style</code>, <code>title</code> 요소를 제외한 나머지 모든 요소.</li>
</ul>
<a id="more"></a>

<h2 id="Metadata-content-메타-데이터-콘텐츠"><a href="#Metadata-content-메타-데이터-콘텐츠" class="headerlink" title="Metadata content (메타 데이터 콘텐츠)"></a>Metadata content (메타 데이터 콘텐츠)</h2><ul>
<li>콘텐츠와 문서를 구조화하는 요소를 의미</li>
<li>다른 콘텐츠의 표시, 동작, 관계 등을 설정</li>
<li>일부 요소는 경우에 따라 플로우 콘텐츠 (<code>link</code>, <code>meta</code>, <code>noscript</code>, <code>script</code>, <code>template</code>)</li>
<li><code>display: none</code></li>
</ul>
<h2 id="Heading-content-헤딩-콘텐츠"><a href="#Heading-content-헤딩-콘텐츠" class="headerlink" title="Heading content (헤딩 콘텐츠)"></a>Heading content (헤딩 콘텐츠)</h2><ul>
<li>섹셔닝 콘텐츠의 헤더.</li>
<li>섹셔닝 콘텐츠가 없어도 헤딩 콘텐츠가 있으면 암시적으로 섹션(==문서의 개요)이 형성된다.</li>
<li><code>display: block</code></li>
</ul>
<h2 id="Sectioning-content-섹셔닝-콘텐츠"><a href="#Sectioning-content-섹셔닝-콘텐츠" class="headerlink" title="Sectioning content (섹셔닝 콘텐츠)"></a>Sectioning content (섹셔닝 콘텐츠)</h2><ul>
<li><code>article</code>, <code>aside</code>, <code>nav</code>, <code>section</code></li>
<li>문서의 개요를 형성. 헤딩, 헤더, 푸터의 범위가 된다.</li>
<li>각 섹셔닝 콘텐츠는 암시적인 개요를 형성.</li>
<li>섹셔닝 콘텐츠와 헤딩 콘텐츠를 함께 사용하면 명시적인 개요를 형성.</li>
<li><code>display: block</code></li>
</ul>
<h2 id="Phrasing-content-프레이징-콘텐츠"><a href="#Phrasing-content-프레이징-콘텐츠" class="headerlink" title="Phrasing content (프레이징 콘텐츠)"></a>Phrasing content (프레이징 콘텐츠)</h2><ul>
<li>구문 콘텐츠. 단락을 형성하는 콘텐츠.</li>
<li><code>display: inline | inline-block | none</code></li>
<li><code>none</code> = <code>link</code>, <code>meta</code>, <code>noscript</code>, <code>script</code>, <code>template</code></li>
</ul>
<h2 id="Embedded-content-임베디드-콘텐츠"><a href="#Embedded-content-임베디드-콘텐츠" class="headerlink" title="Embedded content (임베디드 콘텐츠)"></a>Embedded content (임베디드 콘텐츠)</h2><ul>
<li>모든 임베디드 콘텐츠는 구문 콘텐츠이다.</li>
<li>외부 자원을 지원하지 않는 겿우 대체 자원을 명시할 수 있다.</li>
<li><code>display: inline | inline-block</code></li>
</ul>
<h2 id="Interactive-content-인터렉티브-콘텐츠"><a href="#Interactive-content-인터렉티브-콘텐츠" class="headerlink" title="Interactive content (인터렉티브 콘텐츠)"></a>Interactive content (인터렉티브 콘텐츠)</h2><ul>
<li>사용자와 상호작용할 수 있는 콘텐츠.</li>
<li>입력장치(키보드, 마우스)로 조작할 수 있다.</li>
<li><code>display: inline | inline-block</code></li>
</ul>
<h2 id="Palpable-content-팰퍼블-콘텐츠"><a href="#Palpable-content-팰퍼블-콘텐츠" class="headerlink" title="Palpable content (팰퍼블 콘텐츠)"></a>Palpable content (팰퍼블 콘텐츠)</h2><ul>
<li>비어있지 않은, 볼 수 있는 콘텐츠.</li>
<li>클릭하거나 드래그하거나 영역 지정을 할 수 있음.</li>
<li><code>hidden</code> 속성이 없는</li>
</ul>
<h2 id="Script-supporting-element-스크립트-지원-요소"><a href="#Script-supporting-element-스크립트-지원-요소" class="headerlink" title="Script-supporting element (스크립트 지원 요소)"></a>Script-supporting element (스크립트 지원 요소)</h2><ul>
<li>렌더링하지 않지만 사용자에게 기능을 제공</li>
<li>script, templeate</li>
</ul>
<h2 id="Transparent-content-models-투명-콘텐츠-모델"><a href="#Transparent-content-models-투명-콘텐츠-모델" class="headerlink" title="Transparent content models (투명 콘텐츠 모델)"></a>Transparent content models (투명 콘텐츠 모델)</h2><ul>
<li>투명 콘텐츠 모델. 부모의 콘텐츠 모델을 따른다.</li>
<li>투명한 요소를 제거해도 부모와 자식 관계가 문법적으로 유효해야 한다.<br><code>a</code>, <code>ins</code>, <code>del</code>, <code>object</code>, <code>video</code>, <code>audio</code>, <code>map</code>, <code>noscript</code>, <code>canvas</code></li>
</ul>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>패스트 캠퍼스 The RED : 견고한 UI 설계를 위한 마크업 가이드 _ 정찬명 강사님</p>
</blockquote>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>the red</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML 인터렉티브 콘텐츠</title>
    <url>/2021/12/06/html-interative-contents/</url>
    <content><![CDATA[<h2 id="a-button"><a href="#a-button" class="headerlink" title="a, button"></a>a, button</h2><ul>
<li>a<ul>
<li>실행 결과를 가리킬 수 있는 url이 있을 때</li>
<li>현재페이지 특정 섹션 스크롤 이동</li>
<li>대화 상자를 참조하는 경우. a 요소의 href 값은 dialog 요소의 id(해시 url)을 참조</li>
<li>링크 열기 가능. (button보다 더 많은 기능을 제공)</li>
</ul>
</li>
<li>button<ul>
<li>참조할 url이 없을 때</li>
</ul>
</li>
<li>pointer: 링크를 의미하기 때문에 button일 때는 pointer 하지 않는 것이 좋음.</li>
</ul>
<a id="more"></a>

<h2 id="a-target"><a href="#a-target" class="headerlink" title="a target"></a>a target</h2><ul>
<li>target=”_blank”: 안전하지 않은 외부 페이지 새창 링크<ul>
<li>새창으로 열린 외부 페이지 B는 자바스크립트 <code>window.opener</code> 객체를 통해 부모 페이지 A의 제어 권한을 획득한다.</li>
<li>사용자는 탭 가로채기(tabnabbing) 공격에 노출될 수 있다.</li>
</ul>
</li>
<li>해당 문제는 <code>rel</code>로 해결할 수 있다. (<code>rel=&quot;noopener noreferrer&quot;</code>)<ul>
<li><code>noopener</code> 값은 <code>window.opener</code> 객체를 제거</li>
<li><code>noreferrer</code>값은 <code>window.opener</code> 제거 불능</li>
<li><code>noopener</code>를 지원하지 않는 낡은 브라우저를 위해 <code>noreferrer</code>를 함께 표기한다.</li>
<li>최신 브라우저는 암시적으로 적용하고 있으나 낡은 브라우저를 위해 명시하는 것이 좋다.</li>
</ul>
</li>
</ul>
<h2 id="details-summary"><a href="#details-summary" class="headerlink" title="details, summary"></a>details, summary</h2><ul>
<li>열림 상태일 때 정보를 표시하는 위젯.</li>
<li>details 요소에 open 속성을 넣으면 열린 상태로 표시.</li>
<li>summary 요소는 details 요소의 나머지 부분에 대한 요약, 캡션, 범례를 의미한다.</li>
<li>숨겨진 폼(form)을 드러내기도 한다.</li>
</ul>
<h2 id="input"><a href="#input" class="headerlink" title="input"></a>input</h2><ul>
<li>search, tel, url, email, date, time, range, color 등등.</li>
<li>attr: required, placeholder(label 대안으로 사용하면 안됨 / 접근성이 떨어짐)</li>
</ul>
<h2 id="datalist"><a href="#datalist" class="headerlink" title="datalist"></a>datalist</h2><ul>
<li>다른 콘트롤을 위해 미리 정의된 옵션 세트를 의미.</li>
<li>숨겨진 상태로 표시된다.</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;local&quot;</span>&gt;</span>지역번호<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;local&quot;</span> <span class="attr">value</span>=<span class="string">&quot;?&quot;</span> <span class="attr">list</span>=<span class="string">&quot;local-list&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;local-list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;02&quot;</span> <span class="attr">label</span>=<span class="string">&quot;서울&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;031&quot;</span> <span class="attr">label</span>=<span class="string">&quot;경기&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>패스트 캠퍼스 The RED : 견고한 UI 설계를 위한 마크업 가이드 _ 정찬명 강사님</p>
</blockquote>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>the red</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML 개요 알고리즘 이해</title>
    <url>/2021/12/05/html-outline-heading/</url>
    <content><![CDATA[<ul>
<li>headingmap</li>
<li>헤딩</li>
<li>섹셔닝</li>
<li>명시적/암시적 섹션</li>
<li>어색한 섹션</li>
</ul>
<a id="more"></a>

<h3 id="SECTIONING-ROOT"><a href="#SECTIONING-ROOT" class="headerlink" title="SECTIONING ROOT"></a>SECTIONING ROOT</h3><ul>
<li>브라우저 제조사가 오랜 시간 HTML5 알고리즘을 구현하지 않았기 때문에 <strong>이 개념을 실무에 사용하는 것을 권장하지 않음</strong>.<ul>
<li><code>body</code></li>
<li><code>blockquote</code></li>
<li><code>details</code></li>
<li><code>dialog</code></li>
<li><code>figure</code></li>
<li><code>fieldset</code></li>
<li><code>td</code></li>
</ul>
</li>
<li>HTML5에서 새롭게 추가된 명세</li>
<li>독립적인 개요를 생성하는 개요 컨테이너</li>
<li>섹셔닝 루트 외부에서 내부 개요에 접근 불가</li>
<li>문맥 아닌 콘텐츠를 전체 개요에서 격리하는 역할<ul>
<li>해당 태그 안에 헤딩을 넣더라도 개요로 취급되지 않는 영역</li>
</ul>
</li>
</ul>
<h3 id="Sectioning-Content"><a href="#Sectioning-Content" class="headerlink" title="Sectioning Content"></a>Sectioning Content</h3><ul>
<li><code>article</code>: 기사, 본문, 맥락 독립적으로 배포 가능</li>
<li><code>aside</code>: 페이지의 주요 내용이 아닌</li>
<li><code>nav</code>: 사이트의 주된 탐색 메뉴</li>
<li><code>section</code>: 주제별로 나누거나 묶는</li>
<li>HTML5에서 새롭게 추가된 명세</li>
<li>명시적 개요를 생성하는 개요 컨테이너</li>
<li>적절한 수준의 헤딩을 자식 요소로 사용하여야 한다</li>
<li><code>HTML5</code> 명세 알고리즘에 의존하면 안된다.</li>
</ul>
<h2 id="명시적-섹션"><a href="#명시적-섹션" class="headerlink" title="명시적 섹션"></a>명시적 섹션</h2><ul>
<li>헤딩과 함께 섹셔닝 콘텐츠(article, aside, nav, section)를 사용하여 섹션의 범위를 명시적으로 알 수 있는 섹션.</li>
</ul>
<h2 id="암시적-섹션"><a href="#암시적-섹션" class="headerlink" title="암시적 섹션"></a>암시적 섹션</h2><ul>
<li>섹셔닝 콘텐츠를 사용하지 않고 헤딩만을 사용하여 암시적으로 개요가 생성된 섹션.</li>
</ul>
<h2 id="어색한-섹션"><a href="#어색한-섹션" class="headerlink" title="어색한 섹션"></a>어색한 섹션</h2><ul>
<li>h1을 건너뛰고 h2부터 출발한다거나 헤딩이 누락된 섹션.</li>
</ul>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>패스트 캠퍼스 The RED : 견고한 UI 설계를 위한 마크업 가이드 _ 정찬명 강사님</p>
</blockquote>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>the red</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML 덩어리 콘텐츠 빨리 그리기</title>
    <url>/2021/12/17/html-largest-contentful-paint/</url>
    <content><![CDATA[<ul>
<li><code>LCP</code>는 구글 핵심 성능 지표에 포함되는 항목</li>
<li><code>lighthouse</code>: 크롬에 내장되어 있음</li>
<li>2.5초 이내에 로드하는 것이 목표</li>
</ul>
<a id="more"></a>

<h2 id="라이브러리-의존-줄이기"><a href="#라이브러리-의존-줄이기" class="headerlink" title="라이브러리 의존 줄이기"></a>라이브러리 의존 줄이기</h2><ul>
<li><a href="https://youmightnotneed.com/">https://youmightnotneed.com</a></li>
</ul>
<h2 id="PreConnect-Preload"><a href="#PreConnect-Preload" class="headerlink" title="PreConnect / Preload"></a>PreConnect / Preload</h2><ul>
<li><code>preconnect</code> : 미리 해당 URL을 연결함<ul>
<li>도메인을 알지만 자원의 최종 경로를 모르는 경우 서버와의 연결을 미리 설정</li>
<li>DNS(Domain Name Server), TCP(Transmission Control Protocol), TLS(Transfer Layer Security) 왕복에 필요한 시간을 단축.</li>
<li>서드 파티 자원에 적합</li>
</ul>
</li>
<li><code>preload</code> : 필요한 자원을 병렬 다운로드<ul>
<li>자원을 로딩하는 동안 렌더링을 차단하지 않음</li>
<li><code>as</code> 속성을 함께 명시해주어야 한다. (예 - <code>as=&quot;style&quot;</code>, <code>as=&quot;script</code>, <code>as=&quot;image</code>)</li>
</ul>
</li>
</ul>
<p><strong>서드파티</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preconnect&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.gstatic.com&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preload&quot;</span> <span class="attr">as</span>=<span class="string">&quot;style&quot;</span> <span class="attr">href</span>=<span class="string">&quot;x.css&quot;</span> <span class="attr">onload</span>=<span class="string">&quot;this.onload=null;this.rel=&#x27;stylesheet&#x27;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>큰 이미지</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preload&quot;</span> <span class="attr">as</span>=<span class="string">&quot;image&quot;</span> <span class="attr">media</span>=<span class="string">&quot;max-width:640px&quot;</span> <span class="attr">href</span>=<span class="string">&quot;small.avif&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preload&quot;</span> <span class="attr">as</span>=<span class="string">&quot;image&quot;</span> <span class="attr">media</span>=<span class="string">&quot;min-width:641px&quot;</span> <span class="attr">href</span>=<span class="string">&quot;large.avif&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="이미지-loading-decoding"><a href="#이미지-loading-decoding" class="headerlink" title="이미지 loading / decoding"></a>이미지 loading / decoding</h2><ul>
<li><code>lazy</code><ul>
<li>뷰포트 밖에 있는 이미지를 로딩하지 않는다.</li>
<li>대략 뷰포트 높이의 1~2배 지점까지 근접하면 로딩됨.</li>
</ul>
</li>
<li><code>async</code><ul>
<li>이미지 디코딩(복호화)을 병렬처리</li>
<li>디코딩을 지연시켜 다른 콘텐츠의 표시 속도가 빨라짐.</li>
</ul>
</li>
<li><code>picture</code> 요소에는 사용하지 않아도 되고, <code>img</code>일 때만 사용<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x.jpg&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">loading</span>=<span class="string">&quot;lazy&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">decoding</span>=<span class="string">&quot;async&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>패스트 캠퍼스 The RED : 견고한 UI 설계를 위한 마크업 가이드 _ 정찬명 강사님</p>
</blockquote>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>the red</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML5 섹션 요소</title>
    <url>/2020/11/13/html-sections-and-outlines/</url>
    <content><![CDATA[<p>HTML5 규격에는 문서를 구성하는 데 도움이 되는 몇 가지 의미 요소가 포함되어 있다. 의미 요소는 특히 브라우저, 개발자, 판독기 및 문서를 해석하는 다른 기술(예: 음성 보조자)에 의미를 전달하도록 설계된다. 예를 들어 <code>&lt;div&gt;</code>는 그 내용에 대한 어떤 의미도 담고 있지 않지만 <code>&lt;figcaption&gt;</code>은 그 내용을 명확하게 기술하고 있다.</p>
<p>HTML5에 새로운 의미 요소를 추가하여 웹 사이트의 구획을 개선하였다. 개발자는 이러한 의미적 요소를 명시적 목적 이외의 목적으로 사용하지 않는 것이 중요하다. 많은 접근성 도구는 의미론적 HTML5 요소에 의존한다.</p>
<a id="more"></a>

<h2 id="HTML5의-섹션-요소"><a href="#HTML5의-섹션-요소" class="headerlink" title="HTML5의 섹션 요소"></a>HTML5의 섹션 요소</h2><ul>
<li><code>&lt;nav&gt;</code>는 사이트에 자주 나타나는 탐색 링크를 포함하는 섹션을 정의한다. 기본 및 보조 메뉴를 사용할 수 있지만, 중첩하거나 삽입할 수 없다. <code>&lt;nav&gt;</code> 요소 안에 <code>&lt;nav&gt;</code> 요소를 넣지 않는다.</li>
<li><code>&lt;article&gt;</code>는 자체 콘텐츠의 한 부분을 정의한다. 주요 내용만을 언급하지는 않으며, 코멘트나 위젯에 사용할 수 있다.</li>
<li><code>&lt;section&gt;</code>는 의미적 의미의 관련 그룹을 나타내는 문서의 섹션을 정의한다. 상위 요소로부터 추가 컨텍스트를 제공하는 단면 요소를 활용하는 것이 좋다.</li>
<li><code>&lt;aside&gt;</code>는 설명 상자나 광고처럼 기본 흐름에 속하지 않는 부분을 정의한다. 그것은 그 자체의 윤곽을 가지고 있지만, 주요한 것에 속하지는 않는다.</li>
<li><code>&lt;body&gt;</code>는 문서의 모든 내용을 정의한다. 모든 컨텐츠와 HTML태그를 포함하고 있다.</li>
<li><code>&lt;header&gt;</code>는 일반적으로 로고, 제목 및 내비게이션을 포함하는 페이지를 정의한다. <code>&lt;article&gt;</code>, <code>&lt;section&gt;</code>, <code>&lt;aside&gt;</code>, <code>&lt;nav&gt;</code>는 그들만의 <code>&lt;header&gt;</code>를 가질 수 있다. 이름에도 불구하고 반드시 페이지나 섹션의 시작 부분에 위치하지 않는다.</li>
<li><code>&lt;footer&gt;</code>는 일반적으로 저작권, 법적 고지 및 때로는 섹션 바닥글을 포함하는 페이지 바닥글을 정의하고 있으며, 여기에는 섹션의 출판 날짜, 라이센스 정보 등이 포함될 수 있다. <code>&lt;article&gt;</code>, <code>&lt;section&gt;</code>, <code>&lt;aside&gt;</code>, <code>&lt;nav&gt;</code>는 그들 자신의 <code>&lt;footer&gt;</code>를 가질 수 있다. 반드시 페이지 끝이나 섹션에 위치하지 않는다.</li>
</ul>
<h2 id="모던-브라우저-이외에서-HTML5요소-사용"><a href="#모던-브라우저-이외에서-HTML5요소-사용" class="headerlink" title="모던 브라우저 이외에서 HTML5요소 사용"></a>모던 브라우저 이외에서 HTML5요소 사용</h2><p>특정 대상 중 상당한 비율이 InternetExplorer8 이하를 사용하는 경우 다음 지침에 따라 예상대로 작동하도록 할 수 있다. HTML5의미 요소에는 특별한 DOM인터페이스가 필요하지 않지만 명시적으로 지원하지 않는 이전 브라우저에서 특정 CSS스타일이 필요하다.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">article</span>, <span class="selector-tag">aside</span>, <span class="selector-tag">footer</span>, <span class="selector-tag">header</span>, <span class="selector-tag">nav</span>, <span class="selector-tag">section</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>DOM에서 지원되지 않는 요소의 인스턴스를 만들지 않는 한 이전 IE버전에서는 지원되지 않는 요소의 스타일 지정을 허용하지 않는다. 다음과 같이 특정 스크립트를 추가하여 이를 허용할 수 있다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.createElement(<span class="string">&quot;article&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.createElement(<span class="string">&quot;aside&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.createElement(<span class="string">&quot;footer&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.createElement(<span class="string">&quot;header&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.createElement(<span class="string">&quot;nav&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.createElement(<span class="string">&quot;section&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.createElement(<span class="string">&quot;time&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><code>[head]</code>요소에 명시적인<code>&lt;noscript&gt;</code>요소를 추가하여 JavaScript가 비활성화된 사용자에게 페이지가 JavaScript에 의존함을 경고할 수 있다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>This web page requires JavaScript to be enabled.<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>JavaScript is an object-oriented computer programming language </span><br><span class="line">    commonly used to create interactive effects within web browsers.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://goo.gl/koeeaJ&quot;</span>&gt;</span>How to enable JavaScript?<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Using_HTML_sections_and_outlines">https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Using_HTML_sections_and_outlines</a></p>
</blockquote>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>sections</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML 의미론</title>
    <url>/2021/12/06/html-semantics/</url>
    <content><![CDATA[<ul>
<li><code>div</code>, <code>span</code>은 아무 의미가 없다.</li>
</ul>
<h2 id="sectioning"><a href="#sectioning" class="headerlink" title="sectioning"></a>sectioning</h2><ul>
<li>hx, hgroup, header, footer → 섹셔닝은 아니지만 함께 쓰는 요소</li>
<li>article, aside, nav, section → 섹셔닝 요소</li>
</ul>
<a id="more"></a>

<h2 id="header-footer"><a href="#header-footer" class="headerlink" title="header, footer"></a>header, footer</h2><ul>
<li>여러번 사용해도 됨</li>
</ul>
<h2 id="section-article"><a href="#section-article" class="headerlink" title="section, article"></a>section, article</h2><ul>
<li>section: 제목이 있는 주제별 콘텐츠 그룹</li>
<li>article: 섹션 요소 중 독립적으로 배포 가능한 완결형 콘텐츠. 뉴스 기사, 블로그 본문, 사용자의 댓글 등.</li>
<li>h1~6 요소 사용을 강력하게 권장, header / footer 요소 사용은 선택사항</li>
<li>중첩 허용 (section 안 section, article 안 article)</li>
</ul>
<h2 id="nav"><a href="#nav" class="headerlink" title="nav"></a>nav</h2><ul>
<li>현재 사이트 또는 현재 페이지 일부를 링크하고 있는 주요 탐색 섹션.</li>
<li>빵부스러기 링크, 약관, 저작권 고지 같은 링크는 적절하지 않음.</li>
<li>h1~6 요소 사용을 강력하게 권장</li>
</ul>
<h2 id="aside"><a href="#aside" class="headerlink" title="aside"></a>aside</h2><ul>
<li>페이지의 주된 내용과 관련이 약해서 구분할 필요가 있는 섹션</li>
<li>부수적인 콘텐츠, 관련기사, 광고 등의 내용을 포함할 수 있다</li>
<li>h1~6 요소 사용을 강력하게 권장</li>
</ul>
<h2 id="main"><a href="#main" class="headerlink" title="main"></a>main</h2><ul>
<li>문서의 핵심 주제 또는 애플리케이션의 핵심 기능과 직접 관련있는 콘텐츠 영역을 의미.</li>
<li>페이지마다 반복되지 않는 내용을 포함하여야 한다.</li>
<li>섹셔닝 콘텐츠가 아니므로 h1~6, header, footer 요소의 범위와 관련없음.</li>
<li>하나의 페이지 안에서 하나의 main 요소만 표시 가능</li>
<li>섹셔닝 관련 요소의 자식이 될 수 없다.</li>
<li>body, div 요소를 제외한 다른 요소의 자손이 될 수 없다.</li>
</ul>
<h2 id="dialog"><a href="#dialog" class="headerlink" title="dialog"></a>dialog</h2><ul>
<li>사용자와 상호 작용하는 응용 프로그램(대화상자)을 의미</li>
<li>보통 입력 양식과 콘트롤을 포함하고 있으며 닫기 기능을 제공한다.</li>
<li>키보드 초점이 요소 내부에서 순환하도록 처리하여야 한다.</li>
</ul>
<h2 id="figure-figcation"><a href="#figure-figcation" class="headerlink" title="figure, figcation"></a>figure, figcation</h2><ul>
<li>figcation을 사용하는 것이 적절하다.</li>
<li>단 한번 자손으로 인정</li>
</ul>
<h2 id="mark"><a href="#mark" class="headerlink" title="mark"></a>mark</h2><ul>
<li>독자의 주의를 끌기 위한 하이라이트.</li>
<li>현재 독자의 행위나 관심에 따라 강조한 것.</li>
<li>검색 결과 목록에서 사용자가 입력한 키워드.</li>
</ul>
<h2 id="address"><a href="#address" class="headerlink" title="address"></a>address</h2><ul>
<li>가까운 조상 article 또는 body 요소를 범위로 하는 관련 연락처 정보.</li>
<li>p 요소의 자손이 될 수 없음 (프레이징 요소가 아니므로)</li>
</ul>
<h2 id="ins-del"><a href="#ins-del" class="headerlink" title="ins, del"></a>ins, del</h2><ul>
<li>ins: 추가한 내용을 의미</li>
<li>del: 삭제한 내용을 의미</li>
<li>콘텐츠 모델이 투명해서 어떤 요소라도 포함할 수 있음</li>
<li>여러 단락을 한번에 포함하는 것은 부적절하다.</li>
</ul>
<h2 id="progress"><a href="#progress" class="headerlink" title="progress"></a>progress</h2><ul>
<li>계산 또는 사용자 과업의 진척도</li>
<li>원격 호스트의 응답을 기다려야 하는 경우도 있기 때문에 정확하지 않을 수 있다.</li>
<li>오래된 브라우저를 위해 value 값과 별도로 콘텐츠를 제공하는 것이 좋다.</li>
</ul>
<h2 id="b-i-s-u"><a href="#b-i-s-u" class="headerlink" title="b, i, s, u"></a>b, i, s, u</h2><ul>
<li>b: 강조할 의도가 없는 볼드. strong 요소 고려</li>
<li>i: 현재 맥락과 다른 분위기. em 요소 고려</li>
<li>s: 정확하지 않거나 관련 없는. del 요소 고려</li>
<li>u: 오타, 중국 고유명사 등의 표기. ins 요소를 고려</li>
</ul>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>패스트 캠퍼스 The RED : 견고한 UI 설계를 위한 마크업 가이드 _ 정찬명 강사님</p>
</blockquote>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>the red</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML 검색엔진</title>
    <url>/2021/12/04/html-seo/</url>
    <content><![CDATA[<h2 id="SEO에-영향을-주는-요인들"><a href="#SEO에-영향을-주는-요인들" class="headerlink" title="SEO에 영향을 주는 요인들"></a>SEO에 영향을 주는 요인들</h2><ul>
<li>검색 결과 페이지(SERP) 노출 대비 클릭률</li>
<li>백링크(BACKLINK): 다른 웹페이지로부터 인용(링크)되는 횟수</li>
<li>도메인 권력(Domain authority): 검색결과 페이지 순위 예측 점수</li>
<li>페이지 타이틀</li>
<li>메타 디스크립션</li>
<li>로딩속도</li>
<li>SSL(https) 사용 여부</li>
<li>콘텐츠의 양, 질, 개연성</li>
<li>사용자 경험: LCP(최대 콘텐츠 블럭 그리기), CLS(누적 배치 변경) - 페이지가 덜컥덜컥 열리면 안됨</li>
</ul>
<a id="more"></a>

<h2 id="페이지-타이틀-명세"><a href="#페이지-타이틀-명세" class="headerlink" title="페이지 타이틀 명세"></a>페이지 타이틀 명세</h2><ul>
<li>분류: 메타 데이터 콘텐츠</li>
<li>문맥: HEAD 요소의 자식</li>
<li>콘텐츠 모델: 텍스트. 공백만으로 구성할 수 없음</li>
<li>태그 생략: 시작태그와 종료태그 모두 생략 불가능</li>
</ul>
<blockquote>
<p>light house / Alexa Extention</p>
</blockquote>
<h3 id="페이지-타이틀"><a href="#페이지-타이틀" class="headerlink" title="페이지 타이틀"></a>페이지 타이틀</h3><ul>
<li>페이지 타이틀은 음성으로 전달 받을 수 있다.</li>
<li>구분자: <code>-</code>(대시), <code>|</code>(파이프), <code>:</code>(콜론)을 추천 / <code>_</code>(언더바)는 인접 키워드를 하나로 연결하기 때문에 추천하지 않음.</li>
<li>검색 로봇은 JavaScript에 의해 동적으로 생성한 페이지 타이틀도 크롤링한다.</li>
<li>본문을 가장 잘 설명하는 <strong>키워드</strong> 중심으로.</li>
<li>페이지마다 <strong>구체적</strong> 이고 <strong>고유한</strong> 키워드를 사용.</li>
<li>페이지마다 <strong>반복</strong> 하는 키워드 <strong>최소화</strong>.</li>
<li>구체적인 키워드를 앞으로 <strong>배치</strong>.</li>
<li>가능한 <strong>짧게</strong>. 2~3단계정도만.</li>
</ul>
<h2 id="메타데이터"><a href="#메타데이터" class="headerlink" title="메타데이터"></a>메타데이터</h2><ul>
<li>lang</li>
<li>charset</li>
<li>description: 검색 엔진의 검색 결과 화면에 노출되는 텍스트</li>
<li>viewport</li>
<li>title</li>
</ul>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>패스트 캠퍼스 The RED : 견고한 UI 설계를 위한 마크업 가이드 _ 정찬명 강사님</p>
</blockquote>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>the red</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML 웹접근성</title>
    <url>/2020/12/27/html-web-accessibility/</url>
    <content><![CDATA[<blockquote>
<p><strong>차별 및 제한 없이 동등하게</strong><br>The power of the Web is in its universality. Access by everyone regardless of disability is an essential aspect. (웹의 힘은 보편성에 있다. 장애에 관계없이 모든 사람이 접근할 수 있도록 하는 것은 필수적인 요소이다.)<br>─ Tim Berners-Lee</p>
</blockquote>
<a id="more"></a>

<h2 id="웹접근성-web-accessibility"><a href="#웹접근성-web-accessibility" class="headerlink" title="웹접근성 (web accessibility)"></a>웹접근성 (web accessibility)</h2><p>웹사이트에서 제공하는 정보를 신체적 조건이나 환경적 조건에 관계 없이 웹에 접근해 동등하게 이용할 수 있도록 보장하는 것.</p>
<ul>
<li>장애인 및 고령자를 포함한 모든 사람</li>
<li>다양한 플랫폼 및 디바이스와 웹브라우저 등 모든 환경</li>
</ul>
<h3 id="보이스오버"><a href="#보이스오버" class="headerlink" title="보이스오버"></a>보이스오버</h3><p>시각장애인에 맞춰 스마트폰 설정을 바꿔주는 기능. 이 기능을 사요하면 텍스트를 음성으로 읽어주는 기능이기 때문에 시각장애인도 게임 등을 즐길 수 있다.</p>
<h2 id="웹접근성-향상을-위한-방법"><a href="#웹접근성-향상을-위한-방법" class="headerlink" title="웹접근성 향상을 위한 방법"></a>웹접근성 향상을 위한 방법</h2><p>비장애인은 이용할 수 있지만 장애인은 이용할 수 있다면 장애인을 위한 별도의 서비스를 제공해주면 된다. 서로 다른 환경을 사용하고 있다면 환경에 적합한 서비스를 <code>별도</code>로 제공해주면 된다.</p>
<blockquote>
<p><strong>웹접근성을 향상시키기 위한 방법</strong></p>
<ul>
<li>웹접근성 지침 준수</li>
<li>웹표준 기술의 활용</li>
</ul>
</blockquote>
<h3 id="웹접근성-지침-WCAG"><a href="#웹접근성-지침-WCAG" class="headerlink" title="웹접근성 지침 (WCAG)"></a>웹접근성 지침 (WCAG)</h3><p>W3C 웹 콘텐츠 접근성 가이드라인 표준 권고안은 <strong>웹사이트/ 애플리케이션에서 충족해야 하는 기준을 정의</strong> 하여 <strong>장애가 있는 사용자가 보다 쉽게 이용할 수 있도록 준수해야 하는 지침</strong> 으로 웹 서비스를 제작하는 사람들이 기획/디자인/개발 과정에서 고려해야할 요구사항이다. 접근성은 시각, 청각, 지체, 음성, 인지, 언어, 학습 및 신경 장애를 포함한 광범위한 장애를 포함한다.</p>
<table>
<thead>
<tr>
<th>원칙</th>
<th>설명</th>
</tr>
</thead>
<tbody><tr>
<td>인식</td>
<td>모든 사용자는 서비스 콘텐츠를 인식할 수 있어야 한다</td>
</tr>
<tr>
<td>운용</td>
<td>모든 사용자는 서비스의 기능을 운용할 수 있어야 한다</td>
</tr>
<tr>
<td>이해</td>
<td>모든 사용자가 서비스의 콘텐츠, 기능 사용법 등을 이해하기 쉬워야 한다</td>
</tr>
<tr>
<td>견고</td>
<td>사용자가 이용하는 모든 기기 및 브라우저에서 접근, 사용 가능하여야 한다</td>
</tr>
</tbody></table>
<h3 id="웹표준-기술"><a href="#웹표준-기술" class="headerlink" title="웹표준 기술"></a>웹표준 기술</h3><p>웹에서 표준적으로 사용되는 기술이나 규칙.</p>
<ul>
<li>견고한 구조 설계를 위한 HTML: 콘텐츠의 구조를 설계하고 의미를 부여하는 기술</li>
<li>레이아웃 및 스타일을 위한 CSS: 콘텐츠의 배치 및 스타일 위한 기술</li>
<li>동작 및 제어를 위한 DOM과 Javascript: 콘텐츠의 기능을 구현하는 기술</li>
<li>WAI-ARIA: RIA를 위한 웹접근성 관련 기술</li>
</ul>
<blockquote>
<p><strong>WAI-AREA</strong><br>기존에 HTML에서 부족했던 부분을 보완하고 웹 접근성을 준수할 수 있도록 역할 모델이나 속성, 상태 정보 등을 추가할 수 있다.</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 메뉴 닫기 버튼 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">title</span>=<span class="string">&quot;메뉴 닫기&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;메뉴 닫기&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 스크린 리더기가 읽지 않도록 aria-hidden을 적용 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span>X<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="웹접근성을-고려한-HTML-마크업"><a href="#웹접근성을-고려한-HTML-마크업" class="headerlink" title="웹접근성을 고려한 HTML 마크업"></a>웹접근성을 고려한 HTML 마크업</h2><h3 id="기본-언어-설정-lang-및-문서-제목-title"><a href="#기본-언어-설정-lang-및-문서-제목-title" class="headerlink" title="기본 언어 설정(lang) 및 문서 제목(title)"></a>기본 언어 설정(<code>lang</code>) 및 문서 제목(<code>title</code>)</h3><ul>
<li>주로 사용하는 언어를 명시하여야 한다. (원칙3 이해의 요의성)</li>
<li>페이지, 프레임, 콘텐츠 블록에는 적절한 제목을 제공해야 한다. (원칙 2 운용의 용의성)</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 언어 설정 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko-KR&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 제목 설정 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>제목입니다<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="콘텐츠-구조-설계-HTML5"><a href="#콘텐츠-구조-설계-HTML5" class="headerlink" title="콘텐츠 구조 설계 (HTML5)"></a>콘텐츠 구조 설계 (HTML5)</h3><ul>
<li>머릿말을 의미하는 헤더 영역</li>
<li>주요 콘텐츠를 의미하는 메인 영역</li>
<li>연락처나 주소 정보 등을 의미하는 푸터 영역. 화면에서 제공하지 않을 경우 숨김 컨텐츠로 제거하거나 생략할 수 있다.</li>
</ul>
<blockquote>
<p>화면에서 보이지 않는 영역은 구조 설계시 제외한다. 그러나 해당 정보를 제공할 가치가 있다고 판단된다면 디자인에서만 제외하고 숨김 컨텐츠 형태로 제공할 수 있다.</p>
</blockquote>
<blockquote>
<p>WAI-ARIA보다는 네이티브 요소로 구조설계를 하는 것이 좋으며, 혼용하여 사용하는 것은 적절하지 않다.</p>
</blockquote>
<p><em><strong>네이티브 요소</strong></em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span>헤더<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">main</span>&gt;</span>메인<span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span>푸터<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><em><strong>WAI-ARIA</strong></em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">&quot;banner&quot;</span>&gt;</span>헤더<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">&quot;main&quot;</span>&gt;</span>메인<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">&quot;contentinfo&quot;</span>&gt;</span>푸터<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="콘텐츠-제목-및-논리적인-순서"><a href="#콘텐츠-제목-및-논리적인-순서" class="headerlink" title="콘텐츠 제목 및 논리적인 순서"></a>콘텐츠 제목 및 논리적인 순서</h2><ul>
<li><strong>콘텐츠의 논리적인 순서</strong> : 화면에 보여지는 순서가 아니라 <strong>웹브라우저가 콘텐츠를 탐색하고 이해할 수 있는 선형화된 순서</strong> 를 의미한다.<ul>
<li>프레임, 콘텐츠는 논리적인 순서로 제공하여야 한다. 스크린 리더 등 보조 기기를 사용하는 사용자가 콘텐츠의 의미를 이해할 수 있도록 제공하여야 한다.  (원칙3 이해의 용이성)</li>
</ul>
</li>
<li><strong>콘텐츠 제목</strong> : 독립된 콘텐츠 영역이라면 각각을 대표하는 콘텐츠 블록의 제목을 제공해야 한다.<ul>
<li>페이지, 프레임, 콘텐츠 블록에는 적절한 제목을 제공하여야 한다. (원칙2 운용의 용이성)</li>
</ul>
</li>
</ul>
<blockquote>
<p>제목의 계층 구조를 건너뛰지 않도록 주의하여야 한다.</p>
</blockquote>
<h2 id="키보드-접근"><a href="#키보드-접근" class="headerlink" title="키보드 접근"></a>키보드 접근</h2><ul>
<li>텍스트가 아닌 콘텐츠는 그 의미나 용도를 이해할 수 있도록 대체 텍스트를 제공하여야 한다. (원칙1 인식의 용이성)</li>
<li>모든 기능은 키보드만으로도 사용할 수 있어야 한다. (원칙2 운용의 용이성)</li>
<li>키보드에 의한 초점은 논치적으로 이동해야 하며 시각적으로 구별할 수 있어야 한다. (원칙2 운용의 용이성)</li>
</ul>
<hr>
<blockquote>
<p><strong>REFERENCE</strong></p>
</blockquote>
<ul>
<li><a href="https://www.youtube.com/watch?v=g8-Y8dHQ22Y&amp;list=PLtaz5vK7MbK1vJ7HJjCV5xSy7bW7D_mbB">https://www.youtube.com/watch?v=g8-Y8dHQ22Y&amp;list=PLtaz5vK7MbK1vJ7HJjCV5xSy7bW7D_mbB</a></li>
</ul>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>web accessibility</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA 조건문과 반복문</title>
    <url>/2022/03/14/java-control-flow-statement/</url>
    <content><![CDATA[<h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (조건부분 <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 수행 부분 1</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (조건 부분 <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">// 수행 부분 2</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (조건 부분 <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="comment">// 수행 부분 3</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 수행 부분 4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (i) &#123; <span class="comment">// i : 불린이 아닌 식, 변수, 메소드</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (조건 부분) &#123;</span><br><span class="line">  수행 부분</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>10000 미만의 정수 중에서, 153의 배수중 가장 큰 값을 찾아 출력하세요.</p>
<p><em><strong>내 풀이</strong></em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">10000</span>;</span><br><span class="line">        <span class="keyword">int</span> key = <span class="number">153</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(key*count &lt; num) &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(key*(count - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>다른 풀이</strong></em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">10000</span>;</span><br><span class="line">        <span class="keyword">int</span> key = <span class="number">153</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(num % key &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            num--;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (초기화식; 종결 제어식; 증감 제어식) &#123;</span><br><span class="line">  <span class="comment">// 수행부분</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>for문으로 구구단을 출력해보세요.<br><em><strong>개인 풀이</strong></em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;=<span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j&lt;=<span class="number">9</span>; j++) &#123;</span><br><span class="line">                System.out.println(i + <span class="string">&quot; * &quot;</span> + j + <span class="string">&quot; = &quot;</span> + (i*j));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>다른 풀이</strong></em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;=<span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j&lt;=<span class="number">9</span>; j++) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d * %d = %2d%n&quot;</span>, i, j, i * j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>코드잇 온라인 강의 자바 기초</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>control flow</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA 배열</title>
    <url>/2022/03/15/java-array/</url>
    <content><![CDATA[<p>배열을 사용하면 변수 하나에 값을 여러개 담을 수 있다.</p>
<a id="more"></a>

<h2 id="배열-생성"><a href="#배열-생성" class="headerlink" title="배열 생성"></a>배열 생성</h2><ul>
<li>선언과 동시에 빈 배열 생성<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] intArray = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br></pre></td></tr></table></figure></li>
<li>선언 후 배열 생성<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] intArray;</span><br><span class="line">intArray = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>]; <span class="comment">// 크기 5의 빈 배열</span></span><br></pre></td></tr></table></figure></li>
<li>리터럴로 배열 생성<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] intArray = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] intArray;</span><br><span class="line">intArray = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;; <span class="comment">// 오류</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="배열-사용"><a href="#배열-사용" class="headerlink" title="배열 사용"></a>배열 사용</h2><ul>
<li>값을 대입할 때<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">intArray[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">intArray[<span class="number">1</span>] = <span class="number">2</span>;</span><br></pre></td></tr></table></figure></li>
<li>값을 읽을 때<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(intArray[<span class="number">0</span>] + intArray[<span class="number">1</span>]); <span class="comment">// 1 + 2</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="앨리어싱-Aliasing"><a href="#앨리어싱-Aliasing" class="headerlink" title="앨리어싱 (Aliasing)"></a>앨리어싱 (Aliasing)</h3><ul>
<li><code>arr1</code>을 <code>arr2</code>에 지정해주었을 때 두 변수는 같은 주서를 가리키게 된다.</li>
<li><code>arr2</code>를 <code>arr1</code>의 __Alias(가명)__이라고 할 수 있다.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] arr2 = arr1;</span><br><span class="line"></span><br><span class="line">System.out.println(arr2[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>

<h3 id="Clone"><a href="#Clone" class="headerlink" title="Clone"></a>Clone</h3><ul>
<li><code>arr1</code>을 <code>arr2</code>에 새롭게 복사한다.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] arr2 = arr1.clone();</span><br><span class="line"></span><br><span class="line">arr1[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line">System.out.println(arr1[<span class="number">0</span>]); <span class="comment">// 100</span></span><br><span class="line">System.out.println(arr2[<span class="number">0</span>]); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h3 id="for-each"><a href="#for-each" class="headerlink" title="for-each"></a>for-each</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : intArray) &#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] fruitsArray = <span class="keyword">new</span> String[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">fruitsArray[<span class="number">0</span>] = <span class="string">&quot;딸기&quot;</span>;</span><br><span class="line">fruitsArray[<span class="number">1</span>] = <span class="string">&quot;당근&quot;</span>;</span><br><span class="line">fruitsArray[<span class="number">2</span>] = <span class="string">&quot;수박&quot;</span>;</span><br><span class="line">fruitsArray[<span class="number">3</span>] = <span class="string">&quot;참외&quot;</span>;</span><br><span class="line">fruitsArray[<span class="number">4</span>] = <span class="string">&quot;메론&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String fruit : fruitsArray) &#123;</span><br><span class="line">    System.out.println(fruit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">딸기</span><br><span class="line">당근</span><br><span class="line">수박</span><br><span class="line">참외</span><br><span class="line">메론</span><br></pre></td></tr></table></figure>

<h2 id="다중배열"><a href="#다중배열" class="headerlink" title="다중배열"></a>다중배열</h2><h3 id="초기값-선언"><a href="#초기값-선언" class="headerlink" title="초기값 선언"></a>초기값 선언</h3><ul>
<li>2차원 구조는 다중배열로 선언한다.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] multiArray;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] multiArray = &#123;</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;,</span><br><span class="line">    &#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;,</span><br><span class="line">    &#123;<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="생성"><a href="#생성" class="headerlink" title="생성"></a>생성</h3><ul>
<li>선언과 생성만 하기 위해서는 각 대괄호 사이에 사이즈를 삽입한다.</li>
<li>일반적으로 ‘행(줄)’을 첫 번째 대괄호에, ‘열(칸)’을 두 번째 대괄호에 넣는다.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] multiArray = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][<span class="number">4</span>];</span><br></pre></td></tr></table></figure>

<h3 id="사용"><a href="#사용" class="headerlink" title="사용"></a>사용</h3><ul>
<li>예시로 든 <code>multiArray[0]</code>, <code>multiArray[1]</code>, <code>multiArray[3]</code>은 <code>int[4]</code>의 자료형을 갖는다.</li>
<li>그렇기 때문에 일반적인 배열 탐색법으로 탐색할 수 있다.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; multiArray[<span class="number">0</span>].length; i++) &#123;</span><br><span class="line">    multiarray[<span class="number">0</span>][i] = <span class="number">1</span> + i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; multiArray[<span class="number">1</span>].length; i++) &#123;</span><br><span class="line">    multiarray[<span class="number">1</span>][i] = <span class="number">5</span> + i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; multiArray[<span class="number">2</span>].length; i++) &#123;</span><br><span class="line">    multiarray[<span class="number">2</span>][i] = <span class="number">9</span> + i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>중첩 반복문</strong></em></p>
<ul>
<li>중첩 반복문을 사용하면 보다 깔끔하게 사용할 수 있다.</li>
<li>여기서 <code>multiArray[i][j].length</code>는 전체 자리 수(12)가 아닌 행(줄)의 수(3)이다.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; multiArray.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; multiArray[i].length; j++) &#123;</span><br><span class="line">        multiArray[i][j] = (i * <span class="number">4</span> + <span class="number">1</span>) + j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="연습문제"><a href="#연습문제" class="headerlink" title="연습문제"></a>연습문제</h2><h3 id="배열연습"><a href="#배열연습" class="headerlink" title="배열연습"></a>배열연습</h3><p>(1) 크기가 30인 정수형 배열 intArray를 만들어 주세요.<br>(2) 배열의 첫 번째(0번 인덱스) 칸부터 1001, 1002, 1003, …, 1029, 1030을 순서대로 넣어주세요.<br>(3) 크기가 4인 문자열형 배열 remainders를 만들어 “Zero”, “One”, “Two”, “Three”를 순서대로 넣어주세요.<br>(4) intArray 배열에 담긴 각 값을 4로 나눈 나머지를 인덱스로 생각하고, remainders 배열에서 그 인덱스에 위치한 단어를 출력해주세요.  이 때 반드시 ‘배열 정리’ 노트에 있는, for- each문을 활용해주세요!!</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] intArray = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">30</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;intArray.length; i++) &#123;</span><br><span class="line">            intArray[i] = i + <span class="number">1001</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        String[] remainders = &#123;<span class="string">&quot;Zero&quot;</span>, <span class="string">&quot;One&quot;</span>, <span class="string">&quot;Two&quot;</span>, <span class="string">&quot;Three&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : intArray) &#123;</span><br><span class="line">            System.out.println(remainders[num % <span class="number">4</span>]);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="DNA-염기-서열-분석"><a href="#DNA-염기-서열-분석" class="headerlink" title="DNA 염기 서열 분석"></a>DNA 염기 서열 분석</h3><p>DNA 염기 서열은 생물의 유전 성질을 결정하는 매우 중요한 역할을 가지고 있습니다. 템플릿에 주어진 염기 서열에서 TAGG, CCAG, AGCC가 총 몇 번 등장하는지 세어봅시다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String dna = <span class="string">&quot;GATCCGCCCGCCTCGGCCTCCCAAAGTGCTGGGATTACAGGTGTGAGCCA&quot;</span></span><br><span class="line">                   + <span class="string">&quot;CCACGCCCGGCTAATTTTTATTTATTTATTTAAAGACAGAGTCTCACTCT&quot;</span></span><br><span class="line">                   + <span class="string">&quot;GTCACTCAGGCTAGAGTGCAGTGGCACCATCTCAGCTCACTGCAGCCTTG&quot;</span></span><br><span class="line">                   + <span class="string">&quot;ACCTCCCTGGGCTCCGGTGATTTCACCCTCCCAAGTAGCTAGGACTACAG&quot;</span></span><br><span class="line">                   + <span class="string">&quot;GCACATGCCACGACACCCAGCTAATTTTTTATTTTCTGTGAAGTCAAGGT&quot;</span></span><br><span class="line">                   + <span class="string">&quot;CTTGCTACGTTGCCCATGCTGGTATCAAACCCCTGGGCTCAATCAATCCT&quot;</span></span><br><span class="line">                   + <span class="string">&quot;TCCACCTCAGCCTCCCCAAGTATTGGGGTTACAGGCATGAGCTACCACAC&quot;</span></span><br><span class="line">                   + <span class="string">&quot;TCAGCCCTAGCCTACTTGAAACGTGTTCAGAGCATTTAAGTTACCCTACA&quot;</span></span><br><span class="line">                   + <span class="string">&quot;GTTGGGCAAAGTCATCTAACACAAAGCCCTTTTTATAGTAATAAAATGTT&quot;</span></span><br><span class="line">                   + <span class="string">&quot;GTATATCTCATGTGATTTATTGAATATTGTTACTGAAAGTGAGAAACAGC&quot;</span></span><br><span class="line">                   + <span class="string">&quot;ATGGTTGCATGAAAGGAGGCACAGTCGAGCCAGGCACAGCCTGGGCGCAG&quot;</span></span><br><span class="line">                   + <span class="string">&quot;AGCGAGACTCAAAAAAAGAAAAGGCCAGGCGCACTGGCTCACGCCTGTAA&quot;</span></span><br><span class="line">                   + <span class="string">&quot;TCCCAGCATTTCGGGAGGCTGAGGCGGGTGGATCACCTGAGGTCAGGAGT&quot;</span></span><br><span class="line">                   + <span class="string">&quot;TCAAGACCAGCCTAGCCAACATGGTGAAACCCCGTCTCTACTAAAATACA&quot;</span></span><br><span class="line">                   + <span class="string">&quot;AAAATTAACCGGGCGTGATGGCAGGTGCCTGTAATCCCAGCTACTTGGGA&quot;</span></span><br><span class="line">                   + <span class="string">&quot;GGCTGAGGCAGGAGAATCGCTTGAACCAGGAGGCGGAGGTTGCAGGGAGC&quot;</span></span><br><span class="line">                   + <span class="string">&quot;CAAGATGGCGCCACTGCACTCCAGCCTGGGCGATAGAGTGAGACTCCGTC&quot;</span></span><br><span class="line">                   + <span class="string">&quot;TCAGAAAAAAAAGAAAAGAAACGAGGCACAGTCGCATGCACATGTAGTCC&quot;</span></span><br><span class="line">                   + <span class="string">&quot;CAGTTACTTGAGAGGCTAAGGCAGGAGGATCTCTTGAGCCCAAGAGTTTG&quot;</span></span><br><span class="line">                   + <span class="string">&quot;AGTCCAGCCTGAACAACATAGCAAGACATCATCTCTAAAATTTAAAAAAG&quot;</span></span><br><span class="line">                   + <span class="string">&quot;GGCCGGGCACAGTGGCTCACACCTGTAATCCCAGCACTTTGGGAGGTGGA&quot;</span></span><br><span class="line">                   + <span class="string">&quot;GGTGGGTAGATCACCTGACGTCAGGAGTTGGAAACCAGCCTGGCTAACAT&quot;</span>;</span><br><span class="line">        <span class="keyword">char</span>[] charArray = dna.toCharArray();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// AGG, CCAG, AGCC가 각각 몇 개씩 있는지 담을 변수가 필요</span></span><br><span class="line">        <span class="keyword">int</span> TAGG = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> CCAG = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> AGCC = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 검사할 문자 4개를 담을 4칸짜리 문자 배열(char[])을 선언</span></span><br><span class="line">        <span class="keyword">char</span>[] current = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">4</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// charArray를 탐색할 for문</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; charArray.length - <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 반복문 내에 또 반복문을 만들어 검사해야 할 문자열 4개를 순서대로 채워 넣음</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; current.length; k++) &#123;</span><br><span class="line">                current[k] = charArray[i + k];</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// char[]을 String으로 변환</span></span><br><span class="line">            String seq = <span class="keyword">new</span> String(current);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 염기서열 세기</span></span><br><span class="line">            <span class="keyword">switch</span> (seq) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;TAGG&quot;</span>:</span><br><span class="line">                    TAGG++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;CCAG&quot;</span>:</span><br><span class="line">                    CCAG++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;AGCC&quot;</span>:</span><br><span class="line">                    AGCC++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;TAGG: &quot;</span> + TAGG);</span><br><span class="line">        System.out.println(<span class="string">&quot;CCAG: &quot;</span> + CCAG);</span><br><span class="line">        System.out.println(<span class="string">&quot;AGCC: &quot;</span> + AGCC);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>charArray를 탐색할 for문</strong></p>
<ol>
<li>int i = 0에서 시작</li>
<li>i &lt; charArray.length - 3까지만 탐색</li>
</ol>
<p>문자열의 첫 줄(“GATCCGCCCGCCTCGGCCTCCCAAAGTGCTGGGATTACAGGTGTGAGCCA”)을 “GATC”(인덱스 0 ~ 3) / “ATCC”(인덱스 1 ~ 4) / “TCCG”(2 ~ 5) / “CCGC”(3 ~ 6), … 이런 식으로 확인한다. 그러다가 맨 마지막 줄(“GGTGGGTAGATCACCTGACGTCAGGAGTTGGAAACCAGCCTGGCTAACAT”)에서 “ACAT”까지만 확인 필요하다. “ACAT”은 인덱스 <code>length - 4</code>부터 <code>length - 1</code>까지이기 때문에 종결식을 <code>i &lt; charArray.length - 3</code>으로 잡아야 한다.</p>
</blockquote>
<blockquote>
<p><strong>검사할 문자 4개를 담을 4칸짜리 문자 배열(char[])을 선언</strong><br>for문 안에서 배열을 선언하는 이유는 반복문을 벗어나면 더 이상 사용할 일이 없기 때문이다.<br>하지만 배열을 새로 만드는 작업 비용이 클 수 있기 때문에 여러번 반복하여 만들지 않고 for문 밖에서 한 번 만들어 재사용하는 것이 나을 수 있다.</p>
</blockquote>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>코드잇 온라인 강의 자바 기초</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>array</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS가 어려운 이유</title>
    <url>/2021/12/07/html-why-css-is-difficult/</url>
    <content><![CDATA[<p>값 정의 구문: css 속성의 유효한 값과 순서<br><code>|</code> : 파이프라인, only. 양쪽에서 하나만 사용할 수 있다.</p>
<a id="more"></a>

<h2 id="유효한-값-형식"><a href="#유효한-값-형식" class="headerlink" title="유효한 값 형식"></a>유효한 값 형식</h2><h3 id="keywords"><a href="#keywords" class="headerlink" title="keywords"></a>keywords</h3><p>예약한 단어. 따옴표 없이 사용. 대소문자 구별 안함.</p>
<blockquote>
<p>ex) initial, inherit, unset, block, inline, inline-block, auto, disc, collapse, separate …</p>
</blockquote>
<h3 id="기본-자료형-lt-gt"><a href="#기본-자료형-lt-gt" class="headerlink" title="기본 자료형 &lt;*&gt;"></a>기본 자료형 &lt;*&gt;</h3><ul>
<li><code>&lt;string&gt;</code>: 문자열, 따옴표로 구성</li>
<li><code>&lt;url&gt;</code>: url() 함수</li>
<li><code>&lt;integer&gt;</code>: 정수</li>
<li><code>&lt;number&gt;</code>: 실수</li>
<li><code>&lt;percentage&gt;</code>: 백분율 (%)</li>
<li><code>&lt;length&gt;</code>: 길이</li>
<li><code>&lt;position&gt;</code>: 위치 (left, center, right, top, bottom, px, % …)</li>
<li><code>&lt;color&gt;</code>: 색상</li>
<li><code>&lt;image&gt;</code>: 이미지</li>
<li><code>&lt;angle&gt;</code>: 각도(deg ★…)</li>
<li><code>&lt;time&gt;</code>: 시간(s ★, ms…)</li>
<li><code>&lt;custom-ident&gt;</code>: 작성자 정의 임의 식별자. 대소문자 구별</li>
<li><code>&lt;ratio&gt;</code>: 비율 (너비/높이)</li>
<li><code>&lt;frequency&gt;</code>: 빈도 (Hz, kHz)</li>
<li><code>&lt;resolution&gt;</code>: 해상도 (dpi, dpcm, dppx)</li>
</ul>
<blockquote>
<p>따옴표가 없으면 기본 자료형, 따옴표가 있으면 그 이름의 속성값을 참조</p>
</blockquote>
<h2 id="조합자와-증가기호"><a href="#조합자와-증가기호" class="headerlink" title="조합자와 증가기호"></a>조합자와 증가기호</h2><ul>
<li>결합기호: <code>|</code>, <code>&amp;&amp;</code>, and 조건인지, or 조건인지, only 조건인지</li>
<li>증가기호: <code>/</code>,<code>?</code>, 한번만 사용할 수 있는지, 몇회 사용할 수 있는지</li>
</ul>
<h3 id="결합기호"><a href="#결합기호" class="headerlink" title="결합기호"></a>결합기호</h3><ol>
<li>공백(and): 둘 이상의 값이 필수. 순서 유지 필수.</li>
<li><code>&amp;&amp;</code>(and): 둘 이상의 값이 필수. 순서 변경 가능.</li>
<li><code>||*</code>(or): 두 값 중 하나 이상 필수. 순서 변경 가능.</li>
<li><code>|</code>(only): 두 값중 하나만.</li>
<li><code>[]</code>(group): 그룹.</li>
</ol>
<blockquote>
<p>1~4는 우선 순위. 순위가 높은 기호를 먼저 해석해야 한다.</p>
</blockquote>
<h3 id="증가기호"><a href="#증가기호" class="headerlink" title="증가기호"></a>증가기호</h3><ol>
<li><code>*</code>: 횟수 제한 없음 / 0 ~ : 이만큼 가능.</li>
<li><code>+</code>: 1회 이상</li>
<li><code>?</code>: 0회 또는 1회.</li>
<li><code>&#123;A&#125;</code>: 정확히 A회. </li>
<li><code>&#123;A, B&#125;</code>: 최소 A회, 최대 B회</li>
<li><code>&#123;A,&#125;</code>: 최소 A회 필요, 최댓값 무제한.</li>
<li><code>#</code>: 1회 이상. 값을 콤마(<code>,</code>)로 분리. 횟수 제한 가능. (예) <code>&lt;length&gt;#&#123;1, 4&#125;</code></li>
<li><code>[]!</code>: 그룹에서 적어도 1회 이상.</li>
</ol>
<blockquote>
<p>반복 제한 횟수보다 많은 값을 선언하면 무시됨.</p>
</blockquote>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>패스트 캠퍼스 The RED : 견고한 UI 설계를 위한 마크업 가이드 _ 정찬명 강사님</p>
</blockquote>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>the red</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA 개요</title>
    <url>/2022/03/13/java-overview/</url>
    <content><![CDATA[<ul>
<li>자바는 전세계적으로 많이 쓰이고 가장 인기있는 언어이다.</li>
<li>뿐만 아니라 오랜 인기 덕에 잘 되어 있는 커뮤니티와 정보도 활발하다.</li>
<li>개발자 수요가 제일 많은 언어이기도 하다.</li>
<li>자바는 객체지향언어이며, 객체지향언어는 코드의 구조가 명확하여 코드를 이해하기 쉽고 관리와 유지보수가 효율적이다.</li>
<li>자바 가상머신(Java Virtual Machine, JVM)을 설치하면 운영체제/디바이스 상관없이 동일하게 작동한다.</li>
<li>JRE(Java Runtime Environment): JVM을 사용하여 개발할 수 있는 환경</li>
<li>JDK(Java Development Kit): 내 컴퓨터에 JRE 환경을 만들기 위해 설치하는 것<ul>
<li>자바는 오라클 소유이기 때문에 오라클 사이트에서 JDK 설치가 필요하다.</li>
</ul>
</li>
</ul>
<a id="more"></a>

<h2 id="Hello-World-출력"><a href="#Hello-World-출력" class="headerlink" title="Hello World 출력"></a>Hello World 출력</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123; <span class="comment">// Hello World라는 클래스는 누구나 사용할 수 있는 공적인 클래스</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>class HelloWorld</code>: HelloWorld라는 클래스 정의</li>
<li><code>public</code>: 접근 제어자 (어디에서나 접근 가능)</li>
<li><code>main</code>: 메소드(함수) 이름. 자바 프로그램을 실행하면 가장 먼저 main을 찾아서 실행시키게 된다.</li>
<li><code>String[] args</code>: 파라미터 (args라는 문자열 배열)</li>
<li><code>void</code>: 메소드(함수)의 리턴 값의 자료형. 메소드는 필요에 따라 실행이 끝나고 어떤 값을 되돌려주기도 한다. (void일 경우 리턴 값이 없음) </li>
<li><code>static</code>: 객체 지향 프로그래밍에 중요한 키워드. 해당 부분을 바로 실행 가능하게 만들어준다.</li>
<li><code>public</code>: 접근 제어자</li>
<li><code>System</code>: 입력, 출력 등 시스템 관련된 기능들을 모아둔 클래스. <code>System.in</code>, <code>System.out</code>, <code>System.err</code> 등으로 분리되어 있다.</li>
<li><code>out</code>: 출력과 관련된 기능.</li>
<li><code>println()</code>: print는 출력하다의 뜻이고 ln은 line의 줄임말이다. 괄호 안에 원하는 텍스트를 넣으면 출력하고, 다음줄로 넘겨주는 역할.</li>
<li><code>print()</code>: 줄바꿈이 되지 않는 것을 원할 때 사용한다.</li>
<li><code>System.out.println(&quot;Hello World!&quot;)</code>: <code>System</code>이라는 클래스의 <code>out</code>이라는 변수의 <code>println</code>이라는 메소드를 호출하고, 파라미터로 문자열 “Hello World!”를 넣는다.</li>
</ul>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>코드잇 온라인 강의 자바 기초</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>overview</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA 변수와 연산</title>
    <url>/2022/03/13/java-variables-and-operation/</url>
    <content><![CDATA[<h2 id="변수"><a href="#변수" class="headerlink" title="변수"></a>변수</h2><ul>
<li>변수의 이름과 변수의 자료형을 선언해주어야 한다.</li>
<li>[ 자료형(data type) ] [ 변수의 이름 ]</li>
<li><code>int</code>: x가 어떤 자료형을 저장할지<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a; <span class="comment">// 정수형 변수</span></span><br><span class="line">String s; <span class="comment">// 문자열 변수</span></span><br></pre></td></tr></table></figure></li>
</ul>
<a id="more"></a>

<h3 id="변수-이름-규칙"><a href="#변수-이름-규칙" class="headerlink" title="변수 이름 규칙"></a>변수 이름 규칙</h3><ul>
<li>대소문자 구분 (ex. bunny와 Bunny는 다름)</li>
<li>숫자로 시작할 수 없음</li>
<li>자바의 예약어 사용 불가 (ex. class, public …)</li>
<li>특수기호는 ‘_(언더바)’, ‘$’ 외에 사용 불가<ul>
<li><code>$</code>는 주로 자동 생성되는 변수명으로 사용</li>
<li><code>_</code>는 보통 상수 이름에 사용</li>
</ul>
</li>
<li>카멜 케이스 기법으로 작성하는 것이 좋다.</li>
</ul>
<h3 id="변수-사용"><a href="#변수-사용" class="headerlink" title="변수 사용"></a>변수 사용</h3><p>변수에 값을 대입하거나 연산을 할 수 있다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(num + age); <span class="comment">//20 + 25 출력</span></span><br><span class="line"></span><br><span class="line">age = num; <span class="comment">// 25을 age에 지정</span></span><br><span class="line">System.out.println(num + age); <span class="comment">// 25 + 25 출력</span></span><br><span class="line"></span><br><span class="line">age = age + <span class="number">1</span>; <span class="comment">// 25 + 1을 age에 지정</span></span><br><span class="line">System.out.println(num + age); <span class="comment">// 25 + 26 출력</span></span><br></pre></td></tr></table></figure>

<h2 id="자료형"><a href="#자료형" class="headerlink" title="자료형"></a>자료형</h2><table>
<thead>
<tr>
<th>Type</th>
<th>Bit</th>
<th>Range of Values</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>8</td>
<td>-2^7 ~ 2^7-1 (-128 ~ 127)</td>
</tr>
<tr>
<td>short</td>
<td>16</td>
<td>-2^15 ~ 2^15-1 (-32768 ~ 32767)</td>
</tr>
<tr>
<td>int</td>
<td>32</td>
<td>-2^31 ~ 2^31-1 (-2147483648 ~ 2147483647)</td>
</tr>
<tr>
<td>long</td>
<td>64</td>
<td>-2^63 ~ 2^63-1 (-9223372036854775808 ~ 9223372036854775807)</td>
</tr>
<tr>
<td>float</td>
<td>32</td>
<td>*single-precision 32-bit IEEE 754 floating point</td>
</tr>
<tr>
<td>double</td>
<td>64</td>
<td>*double-precision 64-bit IEEE 754 floating point</td>
</tr>
<tr>
<td>char</td>
<td>16</td>
<td>\u0000 ~ \uffff (0 ~ 2^15-1)</td>
</tr>
<tr>
<td>boolean</td>
<td>*VMD</td>
<td>true, false</td>
</tr>
</tbody></table>
<p><em><strong>자료형의 기본값</strong></em></p>
<table>
<thead>
<tr>
<th>type</th>
<th>기본값</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>0</td>
</tr>
<tr>
<td>short</td>
<td>0</td>
</tr>
<tr>
<td>int</td>
<td>0</td>
</tr>
<tr>
<td>long</td>
<td>0L</td>
</tr>
</tbody></table>
<h3 id="숫자형"><a href="#숫자형" class="headerlink" title="숫자형"></a>숫자형</h3><ul>
<li><strong>정수형</strong>: byte, short, int, long<ul>
<li><code>int</code>를 정수형 메인으로 사용하기 때문에 정수를 입력하면 기본적으로 <code>int</code>로 간주한다.</li>
<li><code>int</code>의 범위를 벗어나는 값을 쓰면 오류가 난다.</li>
<li><code>long</code>을 표현하기 위한 리터럴에는 뒤에 <code>l</code> 혹은 <code>L</code>을 사용하지만, 대문자인 <code>L</code>을 권장한다.<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> x = <span class="number">1234567890l</span>;</span><br><span class="line"><span class="keyword">long</span> x = <span class="number">1234567890L</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><strong>소수형</strong>: float, double<ul>
<li><code>double</code>이 더 정밀하게 값을 보관할 수 있다.</li>
<li>자바에서는 <code>double</code>을 소수형의 기본으로 사용한다.</li>
<li><code>float</code>를 사용하고 싶다면 소수를 사용하고 뒤에 <code>f</code>를 붙인다.<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">float</span> f = <span class="number">3.14f</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="글자"><a href="#글자" class="headerlink" title="글자"></a>글자</h2><ul>
<li><code>char</code>: 글자 하나만 넣을 수 있고, 작은 따옴표로 둘러싸야 한다.</li>
<li>글자를 여러 개 담고 싶다면 큰 따옴표로 둘러싸고 <code>String</code>이라는 자료형을 사용한다.</li>
</ul>
<h3 id="문자열"><a href="#문자열" class="headerlink" title="문자열"></a>문자열</h3><ul>
<li><code>String</code>은 기본 자료형이 아니라 클래스이다.</li>
<li>클래스를 변수의 형으로 쓰고 변수를 선언하면 그 변수는 클래스의 인스턴스를 담을 수 있다.<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String a = <span class="string">&quot;Hello, I&#x27;m&quot;</span>;</span><br><span class="line">String b = <span class="string">&quot;.&quot;</span>;</span><br><span class="line"></span><br><span class="line">System.out.print(a);</span><br><span class="line">System.out.print(<span class="number">26</span>);</span><br><span class="line">System.out.print(b);</span><br><span class="line"><span class="comment">// Hello, I&#x27;m 26.</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="불린"><a href="#불린" class="headerlink" title="불린"></a>불린</h2><ul>
<li>참(true), 거짓(false)을 담는다.</li>
</ul>
<h2 id="연산자"><a href="#연산자" class="headerlink" title="연산자"></a>연산자</h2><h3 id="문자열-연산"><a href="#문자열-연산" class="headerlink" title="문자열 연산"></a>문자열 연산</h3><ul>
<li>덧셈(<code>+</code>) 연산자를 사용하면 문자열을 연결할 수 있다.</li>
<li>문자와 숫자를 더하면 숫자가 문자열로 바뀌고, 문자열과 불린을 더하면 불린이 문자열로 바뀐다.</li>
<li>큰 따옴표(<code>&quot;</code>)로 둘러쌓인 문자열 안에 큰 따옴표(<code>&quot;</code>)를 넣을 경우 역슬래쉬(<code>\</code>, 맥) 혹은 원화표시(<code>₩</code>, 윈도우)를 사용한다.<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;I am &quot;</span> + <span class="number">27</span> + <span class="string">&quot;years old.&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;The result is &quot;</span> + <span class="keyword">false</span> + <span class="string">&quot;.&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;데카르트는 \&quot;나는 생각한다. 고로 존재한다.\&quot;라고 말했다.&quot;</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I am 27 years old.</span><br><span class="line">The result is false.</span><br><span class="line">데카르트는 &quot;나는 생각한다. 고로 존재한다.&quot;라고 말했다.</span><br></pre></td></tr></table></figure></li>
</ul>
<p><em><strong>이스케이프 문자 (Escape Character)</strong></em></p>
<ul>
<li><code>\</code> 또는 <code>₩</code>를 이용하여 문자열 안에 확장된 표현을 하는 문자.</li>
<li>줄 바꿈을 위해서 맥에서는 <code>\n</code>, 윈도우에서는 <code>\r\n</code>을 사용해야 한다.</li>
</ul>
<table>
<thead>
<tr>
<th>Escape Sequence</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td>\t</td>
<td>탭</td>
</tr>
<tr>
<td>\b</td>
<td>백스페이스</td>
</tr>
<tr>
<td>\n</td>
<td>줄바꿈 (new line)</td>
</tr>
<tr>
<td>\r</td>
<td>줄바꿈 (carriage return)</td>
</tr>
<tr>
<td>\f</td>
<td>폼 피드 (form feed)</td>
</tr>
<tr>
<td>‘</td>
<td>작은 따옴표</td>
</tr>
<tr>
<td>“</td>
<td>큰 따옴표</td>
</tr>
<tr>
<td>\</td>
<td>역슬래쉬</td>
</tr>
</tbody></table>
<h2 id="숫자-연산"><a href="#숫자-연산" class="headerlink" title="숫자 연산"></a>숫자 연산</h2><ul>
<li>정수형과 정수형 간의 연산은 같은 자료형의 결과값을 갖는다.</li>
<li>서로 다른 자료형의 연산은 랭크가 더 높은 자료형의 결과값을 갖는다.</li>
<li>단항 연산자도 존재한다. (-a, ++a, –a …)</li>
</ul>
<table>
<thead>
<tr>
<th>연산자</th>
<th>설명</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>덧셈</td>
</tr>
<tr>
<td>-</td>
<td>뺄셈</td>
</tr>
<tr>
<td>*</td>
<td>곱셈</td>
</tr>
<tr>
<td>/</td>
<td>나눗셈</td>
</tr>
<tr>
<td>%</td>
<td>나머지</td>
</tr>
</tbody></table>
<h2 id="불린-연산"><a href="#불린-연산" class="headerlink" title="불린 연산"></a>불린 연산</h2><h3 id="비교-연산자"><a href="#비교-연산자" class="headerlink" title="비교 연산자"></a>비교 연산자</h3><p>두 숫자형 값을 비교하고 싶을 때 사용한다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(a &gt; b); <span class="comment">// false</span></span><br><span class="line">System.out.println(a &lt; b); <span class="comment">// true</span></span><br><span class="line">System.out.println(a == b); <span class="comment">// false</span></span><br><span class="line">System.out.println(a != b); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="불린-연산자"><a href="#불린-연산자" class="headerlink" title="불린 연산자"></a>불린 연산자</h3><ul>
<li>AND(<code>&amp;&amp;</code>)의 경우 양쪽 다 <code>true</code>여야 <code>true</code>가 나오고 하나라도 <code>false</code>라면 <code>false</code>가 나온다.<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="keyword">true</span> &amp;&amp; <span class="keyword">true</span>); <span class="comment">// true</span></span><br><span class="line">System.out.println(<span class="keyword">true</span> &amp;&amp; <span class="keyword">false</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li>
<li>OR(<code>||</code>)의 경우 양쪽 다 <code>false</code>여야 <code>false</code>가 나오고 하나라도 <code>true</code>라면 <code>true</code>가 나온다.<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="keyword">true</span> || <span class="keyword">false</span>); <span class="comment">// true</span></span><br><span class="line">System.out.println(<span class="keyword">false</span> || <span class="keyword">false</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li>
<li>NOT(<code>!</code>)의 경우 불린값을 뒤집는다.<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(!<span class="keyword">true</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li>
<li>숫자 연산처럼 섞을 수도 있다.<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(!(<span class="keyword">false</span> &amp;&amp; (<span class="keyword">true</span> || <span class="keyword">false</span>))); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="리터럴"><a href="#리터럴" class="headerlink" title="리터럴"></a>리터럴</h2><ul>
<li>소스 코드의 고정된 값을 대표하는 용어</li>
<li>정수 리터럴: <code>123</code>, <code>11</code> , <code>3</code> 등</li>
<li>롱 리터럴: <code>1234567890L</code></li>
<li>double을 명시하는 리터럴에는 <code>d</code>를 붙여주는 방법도 있다.</li>
</ul>
<h2 id="랭크"><a href="#랭크" class="headerlink" title="랭크"></a>랭크</h2><p>위에서 아래로 갈수록 랭크가 높은 자료형이다.</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Size</th>
<th>Range</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>1byte</td>
<td>-128 … 127</td>
</tr>
<tr>
<td>short</td>
<td>2byte</td>
<td>-32,768 … 32,767</td>
</tr>
<tr>
<td>int</td>
<td>4 byte</td>
<td>-2,147,483,648 … 2,147,483,647</td>
</tr>
<tr>
<td>long</td>
<td>8 byte</td>
<td>-9,223,372,036,854,775,808 … 9,223,372,036,854,775,807</td>
</tr>
<tr>
<td>float</td>
<td>4 byte</td>
<td>1.4023985 x 10^-45 … 3.4028235 x 10^38</td>
</tr>
<tr>
<td>double</td>
<td>8 byte</td>
<td>4.940656458412465 x 10^-324 … 1.797693134862316 x 10^308</td>
</tr>
</tbody></table>
<h2 id="형변환"><a href="#형변환" class="headerlink" title="형변환"></a>형변환</h2><ul>
<li>랭크에 따라 형변환이 가능하다.</li>
<li>바꾸고자 하는 형(to)이 기존의 형(from)보다 더 넓은 데이터를 담을 수 있는 자료형의 경우 특별한 처리 없이 형변환이 가능하다.</li>
</ul>
<table>
<thead>
<tr>
<th>to\from</th>
<th>byte</th>
<th>short</th>
<th>int</th>
<th>long</th>
<th>float</th>
<th>double</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>-</td>
<td>X</td>
<td>X</td>
<td>X</td>
<td>X</td>
<td>X</td>
</tr>
<tr>
<td>short</td>
<td>O</td>
<td>-</td>
<td>X</td>
<td>X</td>
<td>X</td>
<td>X</td>
</tr>
<tr>
<td>int</td>
<td>O</td>
<td>O</td>
<td>-</td>
<td>X</td>
<td>X</td>
<td>X</td>
</tr>
<tr>
<td>long</td>
<td>O</td>
<td>O</td>
<td>O</td>
<td>-</td>
<td>X</td>
<td>X</td>
</tr>
<tr>
<td>float</td>
<td>O</td>
<td>O</td>
<td>O</td>
<td>O</td>
<td>-</td>
<td>X</td>
</tr>
<tr>
<td>double</td>
<td>O</td>
<td>O</td>
<td>O</td>
<td>O</td>
<td>O</td>
<td>-</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">36</span>;</span><br><span class="line"><span class="keyword">double</span> b = a; <span class="comment">// int to double</span></span><br></pre></td></tr></table></figure>

<h3 id="타입-캐스팅"><a href="#타입-캐스팅" class="headerlink" title="타입 캐스팅"></a>타입 캐스팅</h3><ul>
<li>값이나 변수에 <code>(자료형)</code>을 적어주면 강제적으로 형변환시킬 수 있다.</li>
<li>숫자 자료형들 사이에서는 모두 가능하다.</li>
<li>더 큰 랭크의 값을 더 작은 랭크의 변수에 담을 수는 있지만 데이터 손실이 발생한다.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">double</span> b = (<span class="keyword">double</span>) a;</span><br><span class="line">System.out.println(b); <span class="comment">// 3.0</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> pi = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">int</span> myInt = (<span class="keyword">int</span>) pi;</span><br><span class="line">System.out.println(myInt); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a= <span class="number">9</span>, b = <span class="number">5</span>;</span><br><span class="line">System.out.println((<span class="keyword">double</span>) a / b); <span class="comment">// 1.8</span></span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>코드잇 온라인 강의 자바 기초</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>variable</tag>
        <tag>operation</tag>
      </tags>
  </entry>
  <entry>
    <title>제이쿼리 메소드</title>
    <url>/2020/11/28/jquery-method/</url>
    <content><![CDATA[<p>jQuery를 사용하기 위해서는 jQuery 객체를 생성하여야 하며, jQuery 객체는 다양한 메소드를 가진다.</p>
<a id="more"></a>


<h2 id="배열관리"><a href="#배열관리" class="headerlink" title="배열관리"></a>배열관리</h2><p>제이쿼리로 배열을 관리할 때에는 <code>each()</code> 메소드를 사용한다. <code>each()</code> 메소드는 객체나배열의 요소를 검사하는 메서드이다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.each(object, <span class="function"><span class="keyword">function</span>(<span class="params">index, item</span>)</span>&#123;&#125;)</span><br><span class="line">$(selector).each(<span class="function"><span class="keyword">function</span>(<span class="params">index, item</span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="객체-확장"><a href="#객체-확장" class="headerlink" title="객체 확장"></a>객체 확장</h2><p>많은 양의 속성을 추가할 때 하나하나 추가해주는 것은 귀찮고 코드가 지저분해지므로 <code>$.extend()</code> 메소드를 사용한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.extend(object, addObject, addObject,……)</span><br></pre></td></tr></table></figure>

<h2 id="jQuery-충돌-방지"><a href="#jQuery-충돌-방지" class="headerlink" title="jQuery 충돌 방지"></a>jQuery 충돌 방지</h2><p>여러 플러그인을 상요할 시에는 프러그인 간의 충돌이 발생할 수 있다. 제이쿼리 프레임워크에서 식별자로 <code>$</code>를 자주 사용하는데, Prototype 프레임워크에서도 식별자 <code>$</code>를 사용하기 때문에 제이쿼리 프레임워크와 Prototype 프레임워크를 함께 사용하면 충돌이 일어난다. 이럴 때 충돌을 방지하기 위해 <code>$.noConflict()</code> 메소드이다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 기본</span></span><br><span class="line">$.noConflict();</span><br><span class="line">jQuery(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ……</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 단축</span></span><br><span class="line">$.noConflict();</span><br><span class="line"><span class="keyword">var</span> J = jQuery;</span><br><span class="line"></span><br><span class="line">J(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ……</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://www.opentutorials.org/course/53">https://www.opentutorials.org/course/53</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>jQuery</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
        <tag>method</tag>
      </tags>
  </entry>
  <entry>
    <title>제이쿼리 개요</title>
    <url>/2020/11/26/jquery-overview/</url>
    <content><![CDATA[<p><em>라이브러리(library)</em><br>자주 사용하는 코드들을 재사용할 수 있는 형태로 가공해서 프로그래밍 효율을 높여주는 코드</p>
<p><em>jQuery란</em><br>엘리먼트를 선택하는 강력한 방법과 선택된 엘리먼트들을 효율적으로 제어할 수 있는 다양한 수단을 제공하는 자바스크립트 라이브러리</p>
<a id="more"></a>

<h2 id="사용방법"><a href="#사용방법" class="headerlink" title="사용방법"></a>사용방법</h2><ul>
<li><p><strong>직접 서비스 하는 경우</strong><br><a href="http://jquery.org/">http://jquery.org</a> 에서 jquery 소스코드를 다운로드 한다. 파일을 서버에 업로드 한 후 웹페이지 안에서 자바스크립트를 삽입한다.</p>
</li>
<li><p><strong>구글의 자바스크립트 라이브러리를 사용하는 경우</strong><br><a href="http://code.google.com/intl/ko-KR/apis/libraries/devguide.html#jquery">http://code.google.com/intl/ko-KR/apis/libraries/devguide.html#jquery</a></p>
</li>
<li><p>npm</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install jquery</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="문법"><a href="#문법" class="headerlink" title="문법"></a>문법</h2><ul>
<li><code>$</code> 대신 <code>jQuery</code>를 사용할 수도 있다.</li>
<li>메소드가 리턴될 때 그 메소드가 제어했던 대상을 리턴한다.</li>
<li><strong>체인</strong>: 메소드의 꼬리에 꼬리를 물고 계속 리턴될 수 있다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(제어대상).method().method2();</span><br><span class="line"><span class="comment">//주어.서술어</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(제어대상).method().method2();</span><br><span class="line"><span class="comment">//주어.서술어</span></span><br></pre></td></tr></table></figure>


<h2 id="jQuery-함수"><a href="#jQuery-함수" class="headerlink" title="jQuery 함수"></a>jQuery 함수</h2><p>제이쿼리를 사용한 모든 웹페이지는 다음과 같은 코드로 시작한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    …</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>jQuery()</code> 객체를 생성하기 위해서는 jQuery 함수를 사용한다. jQuery 함수는 전달되는 인수의 종류에 따라 다른 움직임을 하지만 <strong>jQuery 객체를 반환한다.</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">jQuery()</span><br></pre></td></tr></table></figure>

<p><em><strong>축약형</strong></em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$()</span><br></pre></td></tr></table></figure>


<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://www.opentutorials.org/course/53">https://www.opentutorials.org/course/53</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>jQuery</category>
      </categories>
      <tags>
        <tag>overview</tag>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA 객체 지향 프로그래밍</title>
    <url>/2022/03/17/java-oop/</url>
    <content><![CDATA[<p><strong>객체 지향 프로그래밍</strong></p>
<ul>
<li>컴퓨터 프로그래밍의 패러다임 중 하나이다. 객체 지향 프로그래밍은 컴퓨터 프로그램을 명령어의 목록으로 보는 시각에서 벗어나 여러 개의 독립된 단위, 즉 “객체”들의 모임으로 파악하고자 하는 것이다. 각각의 객체는 메시지를 주고받고, 데이터를 처리할 수 있다. <sup>1</sup></li>
<li>‘객체’는 ‘속성’들과 ‘동작’들의 묶음이라고 할 수 있는데 속성은 ‘변수’로 나타내고, 동작은 ‘메소드(함수)’로 나타낸다.<blockquote>
<p>[ 1 ] : <a href="https://ko.wikipedia.org/wiki/%EA%B0%9D%EC%B2%B4_%EC%A7%80%ED%96%A5_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D">위키백과</a></p>
</blockquote>
</li>
</ul>
<a id="more"></a>

<h2 id="클래스"><a href="#클래스" class="headerlink" title="클래스"></a>클래스</h2><ul>
<li>‘클래스’는 객체들에 대한 설계도, 또는 설명서이다.</li>
<li>객체는 속성과 기능을 가지고 있으며 속성은 변수로, 기능은 메소드(함수)로 표현할 수 있다.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">int</span> cashAmount;</span><br><span class="line">    BankAccount account;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BankAccount</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> balance;</span><br><span class="line">    Person owner;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="메소드"><a href="#메소드" class="headerlink" title="메소드"></a>메소드</h2><ul>
<li>메소드는 클래스에 있는 함수이다.</li>
<li>자바에서 모든 함수는 클래스에 있기 때문에 자바의 모든 함수는 메소드이다.</li>
<li><code>return</code>값이 없으면 자료형 대신 <code>void</code>를 사용한다.<ul>
<li><code>main</code> 함수도 리턴 값이 없기 때문에 <code>void</code>를 사용한다.</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="인스턴스"><a href="#인스턴스" class="headerlink" title="인스턴스"></a>인스턴스</h2><ul>
<li>클래스가 ‘설계도’라면 <strong>인스턴스는 그 설계도를 따른 ‘객체’</strong> 를 뜻한다.</li>
<li><code>country</code>라는 클래스가 있다면 ‘한국’, ‘미국’, ‘캐나다’ 등은 <code>country</code> 클래스를 따르는 인스턴스라고 할 수 있다. (혹은 그냥 <code>country</code> 인스턴스)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BankDriver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 사람 생성</span></span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">        p1.name = <span class="string">&quot;엠제이&quot;</span>;</span><br><span class="line">        p1.age = <span class="number">30</span>;</span><br><span class="line">        p1.cashAmount = <span class="number">50000</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 은행 계좌 생성</span></span><br><span class="line">        BankAccount a1 = <span class="keyword">new</span> BankAccount();</span><br><span class="line">        a1.balance = <span class="number">100000</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 두 객체의 관계 설정</span></span><br><span class="line">        p1.account = a1;</span><br><span class="line">        a1.owner = p1;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 테스트</span></span><br><span class="line">        System.out.print(p1.name + <span class="string">&quot;의 계좌 잔액: &quot;</span> + p1.account.balance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="접근-제어자"><a href="#접근-제어자" class="headerlink" title="접근 제어자"></a>접근 제어자</h2><ul>
<li>객체에 대한 권한을 너무 쉽게 주면 문제가 생길 수 있기 때문에 권한을 제한해주는 <strong>접근 제어자(Access Modifier)</strong> 가 존재한다.</li>
<li>인스턴스 변수 앞에 <code>private</code>이라는 접근 제어자를 사용하면 그 변수는 해당 클래스 내에서만 접근 가능하다.</li>
<li>해당 클래스 내에서 사용이 가능하기 때문에 그 클래스에 해당 변수를 사용하는 메소드를 쓰면 사용 가능하다.</li>
<li><code>setAge</code> 같은 메소드를 <code>setter</code>, <code>getAge</code> 같은 메소드를 <code>getter</code>라고 칭한다.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> newAge)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (newAge &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            age = newAge;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="메소드-오버로딩"><a href="#메소드-오버로딩" class="headerlink" title="메소드 오버로딩"></a>메소드 오버로딩</h2><ul>
<li>클래스 내에서 같은 이름의 메소드를 2개 이상 정의할 수 있게 해주는 기능.</li>
<li>같은 이름의 메소드라도 파라미터 구성이 다르면 알아서 구분한다.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b + c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Calculator c = <span class="keyword">new</span> Calculator();</span><br><span class="line"></span><br><span class="line">        System.out.println(c.add(<span class="number">2</span>, <span class="number">4</span>));        <span class="comment">// 6</span></span><br><span class="line">        System.out.println(c.add(<span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>));     <span class="comment">// 14</span></span><br><span class="line">        System.out.println(c.add(<span class="number">3.14</span>, <span class="number">2.54</span>));  <span class="comment">// 5.68</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="생성자"><a href="#생성자" class="headerlink" title="생성자"></a>생성자</h2><ul>
<li>인스턴스를 만들고, 인스턴스의 속성(인스턴스 변수)들을 초기화시킨다.</li>
<li>생성자를 하나도 정의하지 않았을 경우 자동으로 기본 생성자를 제공한다.<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person p1 = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure></li>
<li>생성자를 하나라도 정의하면 기본 생성자는 사용할 수 없다.<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String pName, <span class="keyword">int</span> pAge)</span> </span>&#123;</span><br><span class="line">        name = pName;</span><br><span class="line">        age = pAge;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Person p1 = <span class="keyword">new</span> Person(<span class="string">&quot;엠제이&quot;</span>, <span class="number">27</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="오버로딩"><a href="#오버로딩" class="headerlink" title="오버로딩"></a>오버로딩</h3><ul>
<li>파라미터의 구성을 다르게 하면 생성자 오버로딩도 가능하다.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String pName, <span class="keyword">int</span> pAge)</span> </span>&#123;</span><br><span class="line">    name = pName;</span><br><span class="line">    age = pAge;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String pName)</span> </span>&#123;</span><br><span class="line">    name = pName;</span><br><span class="line">    age = <span class="number">12</span>;    <span class="comment">// 12살을 기본 나이로 설정</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Person p1 = <span class="keyword">new</span> Person(<span class="string">&quot;엠제이&quot;</span>, <span class="number">27</span>);  <span class="comment">// 첫 번째 생성자</span></span><br><span class="line">    Person p2 = <span class="keyword">new</span> Person(<span class="string">&quot;mjaedot&quot;</span>);      <span class="comment">// 두 번째 생성자</span></span><br><span class="line"></span><br><span class="line">    System.out.println(p1.name); <span class="comment">// 엠제이</span></span><br><span class="line">    System.out.println(p1.age); <span class="comment">// 27</span></span><br><span class="line">    System.out.println(p2.name); <span class="comment">// mjaedot</span></span><br><span class="line">    System.out.println(p2.age); <span class="comment">// 12</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><ul>
<li>메소드에서 현재 인스턴스를 가리키는 역할.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String pName)</span> </span>&#123;</span><br><span class="line">        name = pName;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hi. My name is &quot;</span> + <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person(<span class="string">&quot;엠제이&quot;</span>);</span><br><span class="line">        p1.sayHello(); <span class="comment">// Hi. My name is 엠제이.</span></span><br><span class="line">        </span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person(<span class="string">&quot;mjaedot&quot;</span>);</span><br><span class="line">        p2.sayHello(); <span class="comment">// Hi. My name is mjaedot.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="일반-메소드에서-사용"><a href="#일반-메소드에서-사용" class="headerlink" title="일반 메소드에서 사용"></a>일반 메소드에서 사용</h3><p>파라미터가 변수와 동일한 경우 클래스의 인스턴스 변수가 아닌 파라미터를 가리키게 된다. 인스턴스 변수 <code>name</code>보다 파라미터 변수 <code>name</code>이 더 가깝기 때문이다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>클래스로 생성된 인스턴스 변수 <code>name</code>을 가리키고 싶다면 <code>this</code>를 사용하면 된다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="생성자에서의-사용"><a href="#생성자에서의-사용" class="headerlink" title="생성자에서의 사용"></a>생성자에서의 사용</h3><p>생성자에서도 동일하게 적용 가능하다.</p>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>코드잇 온라인 강의 자바 기초</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>object-oriented programming</tag>
      </tags>
  </entry>
  <entry>
    <title>제이쿼리 선택자</title>
    <url>/2020/12/07/jquery-selector/</url>
    <content><![CDATA[<p>jQuery는 CSS 스타일의 선택자를 이용하여 요소를 선택할 수 있다.</p>
<a id="more"></a>

<h3 id="전체-선택자"><a href="#전체-선택자" class="headerlink" title="전체 선택자"></a>전체 선택자</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(*).method().method();</span><br></pre></td></tr></table></figure>

<h3 id="태그-선택자"><a href="#태그-선택자" class="headerlink" title="태그 선택자"></a>태그 선택자</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(태그, 태그).method().method();</span><br></pre></td></tr></table></figure>

<h3 id="아이디-선택자"><a href="#아이디-선택자" class="headerlink" title="아이디 선택자"></a>아이디 선택자</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(아이디).method().method();</span><br></pre></td></tr></table></figure>

<h3 id="클래스-선택자"><a href="#클래스-선택자" class="headerlink" title="클래스 선택자"></a>클래스 선택자</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(클래스).method().method();</span><br></pre></td></tr></table></figure>

<h3 id="자손-선택자"><a href="#자손-선택자" class="headerlink" title="자손 선택자"></a>자손 선택자</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(요소A &gt; 요소B).method().method();</span><br></pre></td></tr></table></figure>

<h3 id="후손-선택자"><a href="#후손-선택자" class="headerlink" title="후손 선택자"></a>후손 선택자</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(요소A 요소B).method().method();</span><br></pre></td></tr></table></figure>

<h3 id="속성-선택자"><a href="#속성-선택자" class="headerlink" title="속성 선택자"></a>속성 선택자</h3><table>
<thead>
<tr>
<th>선택자 형태</th>
<th>설명</th>
</tr>
</thead>
<tbody><tr>
<td>요소[속성=값]</td>
<td>속성과 값이 같은 문서 객체 선택</td>
</tr>
<tr>
<td>요소[속성│=값]</td>
<td>속성 안의 값이 특정 값과 같은 문서 객체 선택</td>
</tr>
<tr>
<td>요소[속성~=값]</td>
<td>속성 안의 값이 특정 값을 단어로 시작하는 문서 객체를 선택</td>
</tr>
<tr>
<td>요소[속성^=값]</td>
<td>속성 안의 값이 특정 값으로 시작하는 문서 객체 선택</td>
</tr>
<tr>
<td>요소[속성$=값]</td>
<td>속성 안의 값이 특정 값으로 끝나는 문서 객체 선택</td>
</tr>
<tr>
<td>요소[속성*=값]</td>
<td>속성 안의 값이 특정 값을 포함하는 문서 객체를 선택</td>
</tr>
</tbody></table>
<h3 id="필터-선택자"><a href="#필터-선택자" class="headerlink" title="필터 선택자"></a>필터 선택자</h3><p><em><strong>입력 양식 필터 선택자</strong></em></p>
<table>
<thead>
<tr>
<th>선택자 형태</th>
<th>설명</th>
</tr>
</thead>
<tbody><tr>
<td>요소:button</td>
<td>input 태그 중 type 속성이 button인 문서 객체와 button 태그를 선택</td>
</tr>
<tr>
<td>요소:checkbox</td>
<td>input 태그 중 type 속성이 check인 문서 객체를 선택</td>
</tr>
<tr>
<td>요소:file</td>
<td>input 태그 중 type 속성이 file인 문서 객체를 선택</td>
</tr>
<tr>
<td>요소:image</td>
<td>input 태그 중 type 속성이 image인 문서 객체를 선택</td>
</tr>
<tr>
<td>요소:password</td>
<td>input 태그 중 type 속성이 password인 문서 객체를 선택</td>
</tr>
<tr>
<td>요소:radio</td>
<td>input 태그 중 type 속성이 radio인 문서 객체를 선택</td>
</tr>
<tr>
<td>요소:reset</td>
<td>input 태그 중 type 속성이 reset인 문서 객체를 선택</td>
</tr>
<tr>
<td>요소:submit</td>
<td>input 태그 중 type 속성이 submit인 문서 객체를 선택</td>
</tr>
<tr>
<td>요소:text</td>
<td>input 태그 중 type 속성이 text인 문서 객체를 선택</td>
</tr>
<tr>
<td>요소:checked</td>
<td>체크되어 있는 입력 양식 선택</td>
</tr>
<tr>
<td>요소:disabled</td>
<td>비활성화된 입력 양식 선택</td>
</tr>
<tr>
<td>요소:enabled</td>
<td>활성화된 입력 양식 선택</td>
</tr>
<tr>
<td>요소:focus</td>
<td>초점이 맞추어져 있는 입력 양식 선택</td>
</tr>
<tr>
<td>요소:input</td>
<td>모든 입력 양식 선택 (input, textarea, select, button 태그)</td>
</tr>
<tr>
<td>요소:selected</td>
<td>option 객체 중 선택된 태그를 선택</td>
</tr>
</tbody></table>
<p><em><strong>위치 필터 선택자</strong></em></p>
<table>
<thead>
<tr>
<th>선택자 형태</th>
<th>설명</th>
</tr>
</thead>
<tbody><tr>
<td>요소:odd</td>
<td>홀수 번째에 위치한 문서 객체를 선택</td>
</tr>
<tr>
<td>요소:even</td>
<td>짝수 번째에 위치한 문서 객체를 선택</td>
</tr>
<tr>
<td>요소:first</td>
<td>첫 번째에 위치한 문서 객체를 선택</td>
</tr>
<tr>
<td>요소:last</td>
<td>마지막에 위치한 문서 객체를 선택</td>
</tr>
</tbody></table>
<p><em><strong>함수 필터 선택자</strong></em></p>
<table>
<thead>
<tr>
<th>선택자 형태</th>
<th>설명</th>
</tr>
</thead>
<tbody><tr>
<td>요소:contains(문자열)</td>
<td>특정 문자열을 포함하는 문서 객체 선택</td>
</tr>
<tr>
<td>요소:eq(n)</td>
<td>n번째에 위치하는 문서 객체 선택</td>
</tr>
<tr>
<td>요소:gt(n)</td>
<td>n번째 초과에 위치하는 문서 객체 선택</td>
</tr>
<tr>
<td>요소:has(h1)</td>
<td>h1 태그가 있는 문서 객체 선택</td>
</tr>
<tr>
<td>요소:It(n)</td>
<td>n번째 미만에 위치하는 문서 객체 선택</td>
</tr>
<tr>
<td>요소:not(선택자)</td>
<td>선택자와 일치하지 않는 문서 객체 선택</td>
</tr>
<tr>
<td>요소:nth-child(3n+1)</td>
<td>3n+1번째에 위치하는 문서 객체 선택</td>
</tr>
</tbody></table>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://www.opentutorials.org/course/53">https://www.opentutorials.org/course/53</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>jQuery</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
        <tag>selecotr</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 배열 메소드</title>
    <url>/2020/09/03/js-array-method/</url>
    <content><![CDATA[<p><em>배열 메소드가 결과물을 반환하는 패턴</em></p>
<ol>
<li>원본 배열(this가 가리키는 객체)을 직접 변경하는 메소드(mutator method)</li>
<li>원본 배열을 직접 변경하지 않고 배열을생성하여 반환하는 메소드(accessor method)</li>
</ol>
<a id="more"></a>

<blockquote>
<p><code>＊</code> 표시된 메서드는 원본 배열 변경시킴</p>
</blockquote>
<table>
<thead>
<tr>
<th>메서드 이름</th>
<th>설명</th>
</tr>
</thead>
<tbody><tr>
<td>concat()</td>
<td>매개변수로 입력한 배열의 요소를 모두 합쳐 배열을 만든 후 리턴</td>
</tr>
<tr>
<td>join()</td>
<td>배열 안의 모든 요소를 문자열로 만들어 리턴</td>
</tr>
<tr>
<td>pop() ＊</td>
<td>배열의 마지막 요소를 제거하고 리턴</td>
</tr>
<tr>
<td>push() ＊</td>
<td>배열의 마지막 부분에 새로운 요소를 추가</td>
</tr>
<tr>
<td>reverse() ＊</td>
<td>배열의 요소 순서를 뒤집음</td>
</tr>
<tr>
<td>slice()</td>
<td>배열 요소의 지정한 부분을 리턴</td>
</tr>
<tr>
<td>sort() ＊</td>
<td>배열의 요소를 정렬</td>
</tr>
<tr>
<td>splice() ＊</td>
<td>배열 요소의 지정한 부분을 삭제하고 삭제한 요소를 리턴</td>
</tr>
</tbody></table>
<h2 id="Array-isArray"><a href="#Array-isArray" class="headerlink" title="Array.isArray"></a>Array.isArray</h2><ul>
<li>Array 생성자 함수의 정적 메소드</li>
<li>주어진 인수가 배열이면 <code>true</code>, 배열이 아니면 <code>false</code>를 반환</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.isArray([<span class="number">1</span>, <span class="number">2</span>]); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="string">&#x27;1&#x27;</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>


<h2 id="Array-prototype-push-마지막-요소-추가"><a href="#Array-prototype-push-마지막-요소-추가" class="headerlink" title="Array.prototype.push (마지막 요소 추가)"></a>Array.prototype.push (마지막 요소 추가)</h2><ul>
<li>인수로 전달받은 모든 값을 원본 배열(this)의 마지막 요소로 추가하고 변경된 <code>length</code> 값을 반환</li>
<li><strong>원본 배열(this)을 직접 변경</strong> 하는 부수 효과가 있다.</li>
<li>성능면에서 좋지 않음.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> result = arr.push(<span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>


<p>배열의 마지막에 요소를 추가하므로 <code>length</code> 프로퍼티를 사용하여 직접 요소를 추가 가능하다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr[arr.length] = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>


<p>ES6의 스프레드 문법을 사용하는 것이 좋다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> newArr = [...arr, <span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>


<h2 id="Array-prototype-pop-마지막-요소-제거"><a href="#Array-prototype-pop-마지막-요소-제거" class="headerlink" title="Array.prototype.pop (마지막 요소 제거)"></a>Array.prototype.pop (마지막 요소 제거)</h2><ul>
<li>원본 배열(this)에서 마지막 요소를 제거하고 제거한 요소를 반환</li>
<li>원본 배열이 빈배열이면 <code>undefined</code> 반환</li>
<li><strong>원본 배열(this)을 직접 변경</strong> 하는 부수 효과가 있다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> result = arr.pop();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>pop</code> 메소드와 <code>push</code> 메소드를 사용하여 스택(후입선출)을 쉽게 구현 가능하다.</p>
</blockquote>
<h2 id="Array-prototype-unshift-처음-요소-추가"><a href="#Array-prototype-unshift-처음-요소-추가" class="headerlink" title="Array.prototype.unshift (처음 요소 추가)"></a>Array.prototype.unshift (처음 요소 추가)</h2><ul>
<li>인수로 전달받은 모든 값을 원본배열의 맨 앞에 요소로 추가하고 변경된 <code>length</code>값을 반환.</li>
<li><strong>원본 배열(this)을 직접 변경</strong> 하는 부수 효과가 있다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> animal = [<span class="string">&#x27;bunny&#x27;</span>, <span class="string">&#x27;kitten&#x27;</span>, <span class="string">&#x27;puppy&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> result = animal.unshift(<span class="string">&#x27;squirrel&#x27;</span>, <span class="string">&#x27;hamster&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(animal);</span><br><span class="line"><span class="comment">// [&#x27;squirrel&#x27;, &#x27;hamster&#x27;, &#x27;bunny&#x27;, &#x27;kitten&#x27;, &#x27;puppy&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>ES6의 스프레드 문법을 사용하는 것이 좋다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> animal = [<span class="string">&#x27;bunny&#x27;</span>, <span class="string">&#x27;kitten&#x27;</span>, <span class="string">&#x27;puppy&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> newAnimal = [<span class="string">&#x27;squirrel&#x27;</span>, <span class="string">&#x27;hamster&#x27;</span>, ...animal];</span><br><span class="line"><span class="built_in">console</span>.log(newAnimal);</span><br><span class="line"><span class="comment">// [&#x27;squirrel&#x27;, &#x27;hamster&#x27;, &#x27;bunny&#x27;, &#x27;kitten&#x27;, &#x27;puppy&#x27;]</span></span><br></pre></td></tr></table></figure>

<h2 id="Array-prototype-shift-첫번째-요소-제거"><a href="#Array-prototype-shift-첫번째-요소-제거" class="headerlink" title="Array.prototype.shift (첫번째 요소 제거)"></a>Array.prototype.shift (첫번째 요소 제거)</h2><ul>
<li>원본 배열에서 첫번째 요소를 제거하고 제거한 요소를 반환</li>
<li>원본 배열이 빈 배열이면 <code>undefined</code>를 반환</li>
<li><strong>원본 배열(this)을 직접 변경</strong> 하는 부수 효과가 있다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> result = arr.shift();</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [2, 3]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>shift</code> 메소드와 <code>push</code> 메소드를 사용하면 큐(선입선출)을 쉽게 구현 가능하다.</p>
</blockquote>
<img src="https://mjae404.github.io/images/array_method.jpg" alt="arry method">

<h2 id="Array-prototype-concat-마지막-요소-추가-newArr"><a href="#Array-prototype-concat-마지막-요소-추가-newArr" class="headerlink" title="Array.prototype.concat (마지막 요소 추가 / newArr)"></a>Array.prototype.concat (마지막 요소 추가 / newArr)</h2><ul>
<li> 인수로 전달된 값들(배열 또는 값)을 원본 배열(this)의 마지막 요소로 추가한 새로운 배열을 반환</li>
<li>인수로 전달한 값이 배열인 경우, 배열을 해체하여 새로운 배열의 요소로 추가</li>
<li>원본 배열은 변경되지 않는다.</li>
<li><code>push</code>와 <code>unshift</code> 메소드는 <code>concat</code> 메소드로 대체 가능<ul>
<li> <code>push</code>와 <code>unshift</code> 메소드: 원본 배열을 반드시 변수에 할당</li>
<li><code>concat</code> 메소드: 반환값을 반드시 변수에 할당</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = arr1.concat(arr2);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>

<p>인수로 전달받은 값이 배열이면 인수로 전달받은 배열을 해체하여 새로운 배열의 마지막 요소로 추가한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// unshift, push</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.push([<span class="number">4</span>, <span class="number">5</span>]); <span class="comment">// unshift도 해당</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1, 2, 3, [4, 5]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// concat</span></span><br><span class="line"><span class="keyword">let</span> result = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].concat([<span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line">result = result.concat([<span class="number">6</span>, <span class="number">7</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// [1, 2, 3, 4, 5, 6, 7]</span></span><br></pre></td></tr></table></figure>

<p>ES6 스프레드 문법으로 대체할 수 있다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result = [...[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], ...[<span class="number">4</span>, <span class="number">5</span>]];</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure>

<h2 id="Array-prototype-splice-중간-요소-추가-및-제거-매개변수-3"><a href="#Array-prototype-splice-중간-요소-추가-및-제거-매개변수-3" class="headerlink" title="Array.prototype.splice (중간 요소 추가 및 제거 / 매개변수 3)"></a>Array.prototype.splice (중간 요소 추가 및 제거 / 매개변수 3)</h2><ul>
<li>배열의 중간에 요소를 추가하거나 제거하는 경우 사용한다.</li>
<li><strong>원본 배열(this)을 직접 변경</strong> 하는 부수 효과가 있다.</li>
<li>3개의 매개변수가 있다.<ul>
<li><strong>start</strong>:  원본 배열의 요소를 제거하기 시작할 인덱스. start만 있으면 start 이후로 모든 요소가 제거된다.</li>
<li><strong>deleteCount</strong>: 제거할 요소의 개수. 0일 경우 아무런 요소도 제거되지 않음. 옵션.</li>
<li><strong>items</strong>: 제거한 위치에 삽입될 요소들의 목록. 생략하면 제거만 한다. 옵션.</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> animal = [<span class="string">&#x27;bunny&#x27;</span>, <span class="string">&#x27;kitten&#x27;</span>, <span class="string">&#x27;puppy&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> result = animal.splice(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;squirrel&#x27;</span>, <span class="string">&#x27;hamster&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// [&#x27;kitten&#x27;]</span></span><br><span class="line"><span class="built_in">console</span>.log(animal); <span class="comment">// [&#x27;bunny&#x27;, &#x27;squirrel&#x27;, &#x27;hamster&#x27;, &#x27;puppy&#x27;]</span></span><br></pre></td></tr></table></figure>

<h2 id="Array-prototype-slice-전달된-범위-요소-복사-newArr-매개변수-2"><a href="#Array-prototype-slice-전달된-범위-요소-복사-newArr-매개변수-2" class="headerlink" title="Array.prototype.slice (전달된 범위 요소 복사 / newArr / 매개변수 2)"></a>Array.prototype.slice (전달된 범위 요소 복사 / newArr / 매개변수 2)</h2><ul>
<li>인수로 전달된 범위의 요소들을 복사하여 반환</li>
<li>원본 배열은 변경되지 않는다.</li>
<li>2개의 매개변수가 있다.<ul>
<li>start: 복사를 시작할 인덱스. 음수일 경우 배열의 끝에서 시작.</li>
<li>end: 복사를 종료할 인덱스. 이 인덱스에 해당되는 요소는 복사되지 않음. 기본값은 <code>length</code>값. 생략하면 모든 요소를 복사하여 반환하게 된다. 옵션.</li>
</ul>
</li>
<li>모든 인수를 생략하면 원본 배열의 새로운 복사본 생성하여 반환하게 된다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> animal = [<span class="string">&#x27;bunny&#x27;</span>, <span class="string">&#x27;kitten&#x27;</span>, <span class="string">&#x27;puppy&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> result = animal.slice(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// [&#x27;bunny&#x27;]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>arguments, HTMLCollection, NodeList와 같은 유사 배열 객체(Array-like Object)를 배열로 변환 가능하다.</p>
</blockquote>
<p>ES6의 스프레드 문법을 사용하면 간단하게 유사배열객체를 배열로 변환 가능하다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">plus</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> arr = [...arguments];</span><br><span class="line">  <span class="built_in">console</span>.log(arr); <span class="comment">// [1, 2, 3]</span></span><br><span class="line">  <span class="keyword">return</span>  arr.reduce(<span class="function">(<span class="params">first, second</span>) =&gt;</span> first + second, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(plus(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure>

<h2 id="Array-prototype-indexOf"><a href="#Array-prototype-indexOf" class="headerlink" title="Array.prototype.indexOf"></a>Array.prototype.indexOf</h2><ul>
<li>원본 배열에서 인수로 전달된 요소를 검색하여 인덱스를 반환<ul>
<li>중복되는 요소가 존재하면 그중 첫번째 인덱스를 반환한다.</li>
<li>해당하는 요소가 없으면 <code>-1</code> 반환</li>
<li>두번째 인수는 검색을 시작할 인덱스이다.</li>
</ul>
</li>
<li>배열에 요소가 존재하는지 확인할 때 유용하게 사용할 수 있다.</li>
<li>결과값 <code>-1</code>을 비교해보아야 하고 배열에 NaN을 확인할 수 없는 문제가 있다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> animal = [<span class="string">&#x27;bunny&#x27;</span>, <span class="string">&#x27;kitten&#x27;</span>, <span class="string">&#x27;kitten&#x27;</span>];</span><br><span class="line">animal.indexOf(<span class="string">&#x27;bunny&#x27;</span>); <span class="comment">// 0</span></span><br><span class="line">animal.indexOf(<span class="string">&#x27;puppy&#x27;</span>); <span class="comment">// -1</span></span><br><span class="line">animal.indexOf(<span class="string">&#x27;kitten&#x27;</span>, <span class="number">2</span>) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<p>ES7에서 새로 도입된 <code>Array.prototype.includes</code> 메소드를 사용하면 가독성이 좋다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> animal = [<span class="string">&#x27;bunny&#x27;</span>, <span class="string">&#x27;kitten&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// animal 배열에 &#x27;puppy&#x27;가 있는지 확인</span></span><br><span class="line"><span class="comment">// 존재하지 않으면 &#x27;puppy&#x27;를 추가해라</span></span><br><span class="line"><span class="keyword">if</span> (!animal.includes(<span class="string">&#x27;puppy&#x27;</span>)) &#123;</span><br><span class="line">  animal.push(<span class="string">&#x27;puppy&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(animal); <span class="comment">// [&#x27;bunny&#x27;, &#x27;kitten&#x27;, &#x27;puppy&#x27;]</span></span><br></pre></td></tr></table></figure>

<h2 id="Array-prototype-join"><a href="#Array-prototype-join" class="headerlink" title="Array.prototype.join"></a>Array.prototype.join</h2><ul>
<li>원본배열의 모든 요소를 문자열로 변환 후 인수로 전달 받은 값인 구분자로 연결한 문자열을 반환</li>
<li>구분자는 생략 가능하며 기본 구분자는 <code>,</code> (쉼표) 이다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> animal = [<span class="string">&#x27;bunny&#x27;</span>, <span class="string">&#x27;kitten&#x27;</span>, <span class="string">&#x27;puppy&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = animal.join();</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// bunny,kitten,puppy</span></span><br><span class="line"></span><br><span class="line">result = animal.join(<span class="string">&#x27; - &#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// bunny - kitten - puppy</span></span><br></pre></td></tr></table></figure>

<h2 id="Array-prototype-reverse"><a href="#Array-prototype-reverse" class="headerlink" title="Array.prototype.reverse"></a>Array.prototype.reverse</h2><ul>
<li>원본 배열의 요소 순서를 반대로 변경한다.</li>
<li>원본 배열이 변경된다.</li>
<li>반환값은 변경된 배열</li>
</ul>
<h2 id="Array-prototype-fill"><a href="#Array-prototype-fill" class="headerlink" title="Array.prototype.fill"></a>Array.prototype.fill</h2><ul>
<li>인수로 전달 받은 값을 요소로 배열의 처음부터 끝까지 채운다.</li>
<li>원본 배열이 변경된다.</li>
<li>두번째 인수로 요소 채우기를 시작할 인덱스를 설정할 수 있다.</li>
<li>세번째 인수로 요소 채우기를 멈출 인덱스를 설정할 수 있다. 해당 인덱스는 포함되지  않는다.</li>
<li>배열을 생성하면서 특정 값으로 요소를 채울 수 있다. (이때, 원본 배열까지도 변경시킨다.)</li>
<li>모든 요소를 하나의 값으로만 채울 수 있다. <code>Array.from</code>을 사용하면 두번째 인수로 전달한 함수를 통해 값을 만들면서 요소를 채울 수 있다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> animal = [<span class="string">&#x27;bunny&#x27;</span>, <span class="string">&#x27;kitten&#x27;</span>, <span class="string">&#x27;puppy&#x27;</span>, <span class="string">&#x27;squirrel&#x27;</span>, <span class="string">&#x27;hamster&#x27;</span>];</span><br><span class="line"></span><br><span class="line">animal.fill(<span class="string">&#x27;bunny&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(animal); <span class="comment">// [&#x27;bunny&#x27;, &#x27;bunny&#x27;, &#x27;bunny&#x27;, &#x27;bunny&#x27;, &#x27;bunny&#x27;]</span></span><br><span class="line"></span><br><span class="line">animal.fill(<span class="string">&#x27;bunny&#x27;</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(animal); <span class="comment">// [&#x27;bunny&#x27;, &#x27;kitten&#x27;, &#x27;puppy&#x27;, &#x27;bunny&#x27;, &#x27;bunny&#x27;]</span></span><br><span class="line"></span><br><span class="line">animal.fill(<span class="string">&#x27;bunny&#x27;</span>, <span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(animal); <span class="comment">// [&#x27;bunny&#x27;, &#x27;kitten&#x27;, &#x27;bunny&#x27;, &#x27;bunny&#x27;, &#x27;hamster&#x27;]</span></span><br></pre></td></tr></table></figure>

<h2 id="Array-prototype-includes"><a href="#Array-prototype-includes" class="headerlink" title="Array.prototype.includes"></a>Array.prototype.includes</h2><ul>
<li>배열 내에 특정 요소가 포함되어 있는지 확인하여 <code>true</code> 또는 <code>false</code>를 반환</li>
<li>두번째 인수로 검색을 시작할 인덱스를 전달 가능</li>
<li>ES7에서 도입</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> animal = [<span class="string">&#x27;bunny&#x27;</span>, <span class="string">&#x27;kitten&#x27;</span>, <span class="string">&#x27;puppy&#x27;</span>, <span class="string">&#x27;squirrel&#x27;</span>, <span class="string">&#x27;hamster&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = animal.includes(<span class="string">&#x27;bunny&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">result = animal.includes(<span class="string">&#x27;lion&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">result = animal.includes(<span class="string">&#x27;bunny&#x27;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log([<span class="literal">NaN</span>].includes(<span class="literal">NaN</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://poiemaweb.com/">https://poiemaweb.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>method</tag>
        <tag>JavaScript</tag>
        <tag>arry</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 배열</title>
    <url>/2020/08/20/js-array/</url>
    <content><![CDATA[<p>순서가 있는 값들의 연속적인 나열. 자바스크립트의 배열은 엄밀하게 말하면 배열의 동작을 흉내낸 특수한 객체이다.</p>
<a id="more"></a>

<h2 id="자바스크립트의-배열"><a href="#자바스크립트의-배열" class="headerlink" title="자바스크립트의 배열"></a>자바스크립트의 배열</h2><ul>
<li>순서가 있는 데이터 집합.</li>
<li>해시 테이블로 구성되어 있다.</li>
<li>0으로 시작하는 숫자형 인덱스를 사용한다.</li>
<li><code>length</code> 프로퍼티를 가지고 있다.</li>
<li>배열의 요소가 모두 같은 타입일 필요도 없고 배열이나 객체도 포함할 수 있다.</li>
<li>배열 리터럴은 대괄호로 접근하며 접근할 때에도 대괄호를 사용한다.</li>
<li>배열의 길이보다 큰 인덱스로 요소를 할당하게 될 경우 자동으로 큰 인덱스만큼 늘어나지만 요소값으로 <code>undefined</code>가 들어간다.</li>
<li>인덱스로 배열에 요소를 접근하게 될 경우 일반적인 배열보다 느리다. (구조적 단점) → 자바스크립트엔진은 배열을 일반 객체와 구분하여 배열처럼 동작하도록 최적화</li>
<li>특정 요소를 탐색하거나 요소를 삽입, 삭제시 효율적이다.</li>
<li><code>isArray</code>로 배열인지 아닌지 확인할 수 있다.</li>
</ul>
<h2 id="length-프로퍼티"><a href="#length-프로퍼티" class="headerlink" title="length 프로퍼티"></a>length 프로퍼티</h2><p>요소의 개수, 즉 배열의 길이를 나타내는 정수를 값으로 가진다. 빈 배열인 경우 0, 아닌 경우 가장 큰 인덱스에 + 1한 값이다.</p>
<h2 id="희소배열"><a href="#희소배열" class="headerlink" title="희소배열"></a>희소배열</h2><ul>
<li>희소 배열의 <code>length</code>는 실제 요소 개수보다 크다.</li>
<li>값이 없이 비어있는 요소는 메모리 공간이 확보되지 않으며 빈 요소를 생성하지 않는다.</li>
<li>희소 배열은 사용하지 않는 것이 좋다.</li>
</ul>
<h2 id="배열생성"><a href="#배열생성" class="headerlink" title="배열생성"></a>배열생성</h2><h3 id="배열-리터럴"><a href="#배열-리터럴" class="headerlink" title="배열 리터럴"></a>배열 리터럴</h3><ul>
<li>0개 이상의 요소를 쉼표로 구분하여 대괄호로 묶는다.</li>
<li>프로퍼티 이름은 없고 값만 존재한다.</li>
<li>요소를 생략하면 희소 배열이 생성된다.</li>
</ul>
<h3 id="Array-생성자-함수"><a href="#Array-생성자-함수" class="headerlink" title="Array 생성자 함수"></a>Array 생성자 함수</h3><p>Array 생성자 함수는 전달된 인수의 갯수에 따라 다르게 동작한다.</p>
<ul>
<li>전달된 인수가 1개이고 숫자인 경우, 인수를 length 프로퍼티의 값으로 갖는 배열을 생성한다. 이때 생성된 배열은 희소배열.</li>
<li>전달된 인수가 없는 경우 빈 배열을 생성한다. (= 배열리터럴[ ] )</li>
<li>전달된 인수는 0 ~ 232<sup>-1(4294967295)</sup> 사이의 정수. 벗어나면 RangeError (ex. 음수)</li>
<li>배열은 요소를 최대 4294967295개 가질 수 있다.</li>
<li>전달된 인수가 2개 이상이거나 숫자가 아닌 경우, 인수를 요소로 갖는 배열을 생성한다.</li>
<li>함수로 호출한다고 하더라도 배열을 생성하는 생성자 함수로 동작한다. 함수 내부에서 <code>new.target</code>을 확인하기 때문.</li>
</ul>
<h3 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of"></a>Array.of</h3><ul>
<li>Array 생성자 함수와 다르게 전달된 인수가 1개이고 숫자이더라도 인수를 요소로 갖는 배열을 생성</li>
<li>ES6에서 새롭게 도입<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = <span class="built_in">Array</span>.of(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [2]</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from"></a>Array.from</h3><ul>
<li>유사 배열 객체(array-like object) 또는 이터러블 객체(iterable object)를 변환하여 새로운 배열을 생성</li>
<li>두번째 인수로 전달한 함수를 통해 값을 만들면서 요소를 채울 수 있다. 두번째 인수로 전달한 함수는 요소값과 인덱스를 순차적으로 전달받아 새로운 요소를 생성한다.</li>
<li>ES6에서 새롭게 도입<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = <span class="built_in">Array</span>.from(&#123; <span class="attr">length</span>: <span class="number">2</span>, <span class="number">0</span>: <span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>: <span class="string">&#x27;b&#x27;</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [ &#x27;a&#x27;, &#x27;b&#x27; ]</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="배열의-참조"><a href="#배열의-참조" class="headerlink" title="배열의 참조"></a>배열의 참조</h2><ul>
<li>배열 요소를 참조할 때에는 대괄호 표기법을 사용한다. 대괄호 안에는 인덱스가 와야 함.</li>
<li>존재하지 않는 요소에 접근시 <code>undefined</code>  → 배열도 객체이기 때문에 객체의 존재하지 않는 프로퍼티에 접근했을 때 <code>undefined</code>를 반환하는 것처럼 배열도 마찬가지이다. 희소배열도 포함.</li>
</ul>
<h2 id="배열-요소의-추가와-갱신"><a href="#배열-요소의-추가와-갱신" class="headerlink" title="배열 요소의 추가와 갱신"></a>배열 요소의 추가와 갱신</h2><ul>
<li>요소가 존재하지 않는 인덱스의 배열 요소에 값을 할당하면 새로운 요소가 추가됨. <code>length</code> 프로퍼티 값은 자동 갱신.</li>
<li>현재 배열의 <code>length</code> 프로퍼티 값보다 큰 인덱스로 새로운 요소를 추가하면 희소 배열이 된다.<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">arr[<span class="number">4</span>] = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [0, 1, 2, empty, 4]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.length); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure></li>
<li>인덱스로 요소에 접근하여 명시적으로 값을 할당해야 요소가 생성된다.</li>
<li>이미 요소가 존재할 경우 해당 요소에 값을 재할당하면 값이 갱신된다.</li>
<li>정수 이외의 값을 인덱스처럼 사용하면 프로퍼티가 생성된다. 이때 생성된 프로퍼티는 <code>length</code> 프로퍼티 값에 영향을 미치지 않는다.<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [];</span><br><span class="line"></span><br><span class="line">arr[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">arr[<span class="string">&#x27;foo&#x27;</span>]=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1, foo:2]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.length); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="배열-요소의-삭제"><a href="#배열-요소의-삭제" class="headerlink" title="배열 요소의 삭제"></a>배열 요소의 삭제</h2><p>특정 요소를 삭제하기 위해 delete 연산자를 사용할 수 있다. <code>delete</code>를 사용할 경우 <u>희소배열이 되며 <code>length</code> 프로퍼티 값은 변하지 않기 때문에</u> <code>delete</code> 연산자를 사용하지 않는 것이 좋다.</p>
<blockquote>
<p>희소 배열을 만들지 않으면서 배열의 특정 요소를 삭제하고 싶다면 <code>Array.prototype.splice</code> 메소드를 사용한다.</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> arr[<span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1, 2, empty, 4, 5]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.length); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://poiemaweb.com/">https://poiemaweb.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>arry</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 배열 고차 함수</title>
    <url>/2020/09/14/js-array-higher-order-function/</url>
    <content><![CDATA[<p><em>고차함수</em><br>함수를 인자로 받거나 함수를 반환하는 함수 → 필요한 시점에 호출하거나 클로저를 생성하여 반환</p>
<a id="more"></a>

<h2 id="Array-prototype-sort"><a href="#Array-prototype-sort" class="headerlink" title="Array.prototype.sort"></a>Array.prototype.sort</h2><ul>
<li>배열의 요소를 적절하게 정렬한다.</li>
<li>원본 배열을 직접 변경하는 부수적 효과를 가지고 있다.</li>
<li>기본은 오름차순으로 정렬. (한글 포함)</li>
<li>내림차순으로 정렬하고 싶은 경우 sort 메소드로 오름차순 정렬 후 <code>reverse</code> 메소드를 사용하여 요소의 순서를 뒤집는 방법을 사용한다.</li>
<li>숫자 요소들로 이루어진 배열을 정렬할 때는 주의 필요.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> animal = [<span class="string">&#x27;kitten&#x27;</span>, <span class="string">&#x27;puppy&#x27;</span>, <span class="string">&#x27;bunny&#x27;</span>];</span><br><span class="line">animal.sort();</span><br><span class="line"><span class="built_in">console</span>.log(animal); <span class="comment">// [&#x27;bunny&#x27;, &#x27;kitten&#x27;, &#x27;puppy&#x27;]</span></span><br></pre></td></tr></table></figure>


<p><em>숫자 배열을 함수 없이 <code>sort</code> 메소드를 적용하였을 경우</em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> num = [<span class="number">60</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">40</span>, <span class="number">22</span>, <span class="number">10</span>];</span><br><span class="line">num.sort();</span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// [1, 10, 100, 2, 22, 40, 60, 8]</span></span><br></pre></td></tr></table></figure>

<p><em>sort 메소드에 정렬 순서를 정의하는 비교함수 전달하여 적용한 경우</em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> points = [<span class="number">60</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">40</span>, <span class="number">22</span>, <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 숫자 배열 오름차순 정렬</span></span><br><span class="line">points.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123; <span class="keyword">return</span> a - b; &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(points); <span class="comment">// [1, 2, 8, 10, 22, 40, 60, 100]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 숫자 배열 내림차순 정렬</span></span><br><span class="line">points.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123; <span class="keyword">return</span> b - a; &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(points); <span class="comment">// [100, 60, 40, 22, 10, 8, 2, 1]</span></span><br></pre></td></tr></table></figure>

<h2 id="Array-prototype-forEach"><a href="#Array-prototype-forEach" class="headerlink" title="Array.prototype.forEach"></a>Array.prototype.forEach</h2><ul>
<li>배열을 순회하며 각 요소에 대해 인수로 전달된 콜백 함수를 실행.</li>
<li>배열을 순회하며 요소 값을 참조하여 무언가를 하기 위한 함수.</li>
<li>요소값, 인데스, <code>forEach</code> 메소드를 호출한 배열(this)을 전달받을 수 있음.</li>
<li>두번째 인자로 <code>forEach</code> 메소드 내부에서 this로 사용될 객체를 전달</li>
<li><code>fo</code>r문을 대체할 수 있는 메소드.</li>
<li>원본 배열을 변경하지는 않으나 콜백함수가 원본 배열을 변경할 수는 있다.</li>
<li>반환값은 언제나 <code>undefined</code></li>
<li><code>break</code>, <code>continue</code>문을 사용할 수 없다. 무조건 배열의 요소를 빠짐없이 순회.</li>
<li>메소드 내부에 반복문을 은닉하여 로직의 흐름을 이해하기 쉽게 한다.</li>
<li>희소배열의 존재하지 않는 요소는 순회 대상에서 제외. (배열을 순회하는 <code>map</code>, <code>filter</code>, <code>reduce</code> 메소드 등에서도 동일)</li>
<li>콜백 함수와 해당 메소드의 this 일치를 위해 두번째 인자로 <code>forEach</code> 메소드 내부에서 this로 사용될 객체를 전달한다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> num = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">square = [];</span><br><span class="line"></span><br><span class="line">num.forEach(<span class="function"><span class="params">item</span> =&gt;</span> square.push(item ** <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(square); <span class="comment">// [1, 4, 9, 16, 25]</span></span><br></pre></td></tr></table></figure>

<h2 id="Array-prototype-map"><a href="#Array-prototype-map" class="headerlink" title="Array.prototype.map"></a>Array.prototype.map</h2><ul>
<li>배열을 순회하며 배열의 각 요소에 대하여 인수로 전달된 콜백 함수를 실행.</li>
<li>배열을 순회하며 요소 값을 다른 값으로 맵핑하기 위한 함수</li>
<li>요소값, 인덱스, <code>map</code> 메소드를 호출한 배열(this)를 전달 받을 수 있다.</li>
<li>반환하는 배열의 <code>length</code>는 반드시 메소드를 호출한 배열과 일치한다.</li>
<li>콜백 함수의 반환한 값들이 요소로서 추가된 새로운 배열을 반환한다.</li>
<li>원본 배열은 변경되지 않는다.</li>
<li>두번째 인자로 <code>map</code> 메소드 내부에서 this로 사용될 객체를 전달할 수 있다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> roots = numbers.map(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">Math</span>.sqrt(item));</span><br><span class="line"><span class="comment">// const roots = numbers.map(Math.sqrt);</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(roots);   <span class="comment">// [ 1, 2, 3 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(numbers); <span class="comment">// [ 1, 4, 9 ]</span></span><br></pre></td></tr></table></figure>

<h2 id="Array-prototype-filter"><a href="#Array-prototype-filter" class="headerlink" title="Array.prototype.filter"></a>Array.prototype.filter</h2><ul>
<li>배열의 각 요소에 대하여 인수로 전달된 콜백 함수를 실행.</li>
<li>콜백 함수의 실행 결과가 <code>true</code>인 배열 요소의 값만을 추출한 <strong>새로운 배열을 반환</strong>.</li>
<li>원본 배열은 변경되지 않는다.</li>
<li>반환하는 새로운 배열의 <code>length</code>는 <code>filter</code> 메소드를 호출한 배열(this)의 <code>length</code>와 같거나 작다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> odds = numbers.filter(<span class="function"><span class="params">item</span> =&gt;</span> item % <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(odds); <span class="comment">// [1, 3, 5]</span></span><br></pre></td></tr></table></figure>

<h2 id="Array-prototype-reduce"><a href="#Array-prototype-reduce" class="headerlink" title="Array.prototype.reduce"></a>Array.prototype.reduce</h2><ul>
<li>배열을 순회하며 콜백 함수의 이전 반환값과 배열의 각 요소에 대하여 인수로 전달된 콜백 함수를 실행하여 하나의 결과값을 반환.</li>
<li>첫번째 인수로 콜백 함수, 두번째 인수로 초기값을 전달받는다.</li>
<li>콜백 함수에는 4개의 인수, 초기값 또는 콜백 함수의 이전 반환값, 요소값, 인덱스, <code>reduce</code> 메소드를 호출한 배열(this)가 전달된다.</li>
<li>원본 배열은 변경되지 않는다.</li>
<li><code>reduce</code> 메소드를 호출할 때는 초기값을 생략하지 말고 항상 전달하는 것이 안전하다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sum = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].reduce(<span class="function">(<span class="params">pre, cur, index, self</span>) =&gt;</span> pre + cur, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sum); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>


<h2 id="Array-prototype-some"><a href="#Array-prototype-some" class="headerlink" title="Array.prototype.some"></a>Array.prototype.some</h2><ul>
<li> 요소 중 하나라도 콜백 함수의 테스트를 통과하면 true, 모든 요소가 콜백 함수의 테스트를 통과하지 못하면 false를 반환.</li>
<li> some 메소드의 콜백 함수는 요소값, 인덱스, 메소드를 호출한 배열(this)을 전달 받을 수 있다.</li>
<li>두번째 인자로 some 메소드 내부에서 this로 사용될 객체를 전달할 수 있다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].some(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">result = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].some(<span class="function"><span class="params">item</span> =&gt;</span> item &lt; <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h2 id="Array-prototype-every"><a href="#Array-prototype-every" class="headerlink" title="Array.prototype.every"></a>Array.prototype.every</h2><ul>
<li>모든 요소가 콜백 함수의 테스트를 통과하면 <code>true</code>, 요소 중 하나라도 콜백 함수의 테스트를 통과하지 못하면 <code>false</code>를 반환.</li>
<li><code>every</code> 메소드의 콜백 함수는 요소값, 인덱스, 메소드를 호출한 배열(this)을 전달 받을 수 있다.<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].every(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">result = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].every(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Array-prototype-find"><a href="#Array-prototype-find" class="headerlink" title="Array.prototype.find"></a>Array.prototype.find</h2><ul>
<li>각 요소에 대하여 인수로 전달된 콜백 함수를 실행하여 그 결과가 참인 첫번째 요소를 반환.</li>
<li>콜백 함수의 실행 결과가 참인 요소가 존재하지 않는다면 <code>undefined</code>를 반환.</li>
<li>find 메소드의 콜백 함수는 요소값, 인덱스, 메소드를 호출한 배열(this)을 전달 받을 수 있다.</li>
<li><strong>그 결과가 참인 첫번째 요소</strong> 를 반환. 그렇기 때문에 결과값은 해당 요소값.</li>
<li>두번째 인자로 <code>find</code> 메소드 내부에서 this로 사용될 객체를 전달할 수 있다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;bunny&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;kitten&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;puppy&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;lion&#x27;</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// id가 2인 요소를 반환한다.</span></span><br><span class="line"><span class="keyword">const</span> result = users.find(<span class="function"><span class="params">item</span> =&gt;</span> item.id === <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Array#find는 배열이 아니라 요소를 반환한다.</span></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// &#123;id: 2, name: &#x27;Kim&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="Array-prototype-findIndex"><a href="#Array-prototype-findIndex" class="headerlink" title="Array.prototype.findIndex"></a>Array.prototype.findIndex</h2><ul>
<li>각 요소에 대하여 인수로 전달된 콜백 함수를 실행하여 그 결과가 참인 첫번째 요소의 인덱스를 반환.</li>
<li><code>findIndex</code> 메소드의 콜백 함수는 요소값, 인덱스, 메소드를 호출한 배열을 전달 받을 수 있다.</li>
<li> 두번째 인자로 <code>findIndex</code> 메소드 내부에서 this로 사용될 객체를 전달할 수 있다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;bunny&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;kitten&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;puppy&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;lion&#x27;</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">predicate</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// key와 value를 기억하는  클로저 반환</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">item</span> =&gt;</span> item[key] === value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> index = users.findIndex(predicate(<span class="string">&#x27;id&#x27;</span>, <span class="number">2</span>));</span><br><span class="line"><span class="built_in">console</span>.log(index); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://poiemaweb.com/">https://poiemaweb.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>arry</tag>
        <tag>HOF</tag>
        <tag>function</tag>
      </tags>
  </entry>
  <entry>
    <title>JS let, const와 블록 레벨 스코프</title>
    <url>/2020/08/18/js-block-level-scope/</url>
    <content><![CDATA[<p>ES5까지 변수를 선언할 수 있는 유일한 방법은 var 키워드를 사용하는 것이었다. var 키워드로 선언된 변수는 몇가지 특징이 있다.</p>
<ol>
<li>변수 중복 선언 허용</li>
<li>함수 레벨 스코프</li>
<li>변수 호이스팅</li>
</ol>
<a id="more"></a>

<h2 id="let-키워드"><a href="#let-키워드" class="headerlink" title="let 키워드"></a>let 키워드</h2><ol>
<li>변수 중복 선언 금지</li>
<li>블록 레벨 스코프</li>
<li>변수 호이스팅</li>
</ol>
<ul>
<li>let 키워드로 선언한 변수는 “선언 단계”와 “초기화 단계”가 분리되어 진행된다.</li>
<li><strong>일시적 사각지대(Temporal Dead Zone; TDZ)</strong>: 스코프의 시작 지점부터 초기화 시작 지점까지의 구간</li>
<li>자바스크립트는 ES6에서 도입된 let, const를 포함하여 모든 선언(var, let, const, function, function*, class 등)을 호이스팅한다.</li>
</ul>
<ol start="4">
<li>let 키워드로 선언한 전역 변수는 전역 객체 window의 프로퍼티가 아니다. window.foo와 같이 접근할 수 없다.</li>
</ol>
<h2 id="const-키워드"><a href="#const-키워드" class="headerlink" title="const 키워드"></a>const 키워드</h2><ol>
<li><strong>상수(constant 변하지 않는 고정된 값)를 선언하기 위해 사용</strong> 하지만, 반드시 상수만을 위해 사용하지는 않는다.</li>
</ol>
<ul>
<li>상수를 값으로 갖는 변수는 일반적으로 변수 이름을 대문자로 선언하여 상수를 저장하고 있음을 명확히 나타낸다.</li>
<li>여러 단어로 이루어진 경우에는 언더스코어(_)로 구분하는 것이 일반적이다.</li>
<li>상수는 프로그램 전체에서 공통 사용하므로 나중에 상수가 변경되면 상수만을 변경하면 되기 때문에 유지보수성이 대폭 향상된다.</li>
</ul>
<ol start="2">
<li>선언과 초기화</li>
</ol>
<ul>
<li>let 키워드로 선언한 변수는 재할당이 자유로우나 const 키워드로 선언한 변수는 <strong>재할당이 금지</strong> 된다.</li>
<li>const 키워드로 선언한 변수는 반드시 선언과 동시에 할당이 이루어져야 한다.</li>
</ul>
<ol start="3">
<li>블록 레벨 스코프</li>
<li>const 키워드에 할당한 객체는 변경 가능하다.</li>
</ol>
<ul>
<li>const 키워드로 선언한 변수에 객체를 할당한 경우, 원시 값을 할당한 경우와 마찬가지로 재할당이 금지된다. 그러나 객체는 변경 가능한 값(mutable value)이기 때문에 const 키워드로 선언된 변수에 할당된 객체는 변경이 가능하다.</li>
</ul>
<h2 id="var-vs-let-vs-const"><a href="#var-vs-let-vs-const" class="headerlink" title="var vs. let vs. const"></a>var vs. let vs. const</h2><ol>
<li>ES6를 사용한다면 var 키워드는 사용하지 않는다.</li>
<li>재할당이 필요한 경우에 한정해 let 키워드를 사용한다. 이때 변수의 스코프는 최대한 좁게 만든다.</li>
<li>변경이 발생하지 않는(재할당이 필요 없는 상수) 원시 값과 객체에는 const 키워드를 사용한다.</li>
</ol>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://poiemaweb.com/">https://poiemaweb.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>block level scope</tag>
        <tag>scope</tag>
        <tag>let</tag>
        <tag>const</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 생성자 함수에 의한 객체 생성</title>
    <url>/2020/09/19/js-constructor/</url>
    <content><![CDATA[<p><strong><u>생성자(constructor) 함수</u></strong> 란 <strong>new 연산자와 함께 호출하여 인스턴스 객체를 생성하는 함수</strong> 를 말한다. 생성자 함수에 의해 생성된 객체를 인스턴스(instance)라 한다.</p>
<a id="more"></a>

<h2 id="Object-생성자-함수"><a href="#Object-생성자-함수" class="headerlink" title="Object 생성자 함수"></a>Object 생성자 함수</h2><p><code>new</code> 연산자와 함께 Object 생성자 함수를 호출하면 빈 객체를 생성 후 반환. 이후에 프로퍼티나 메소드를 추가할 수 있다. <code>Object</code> 생성자 함수 방식은 특별한 이유가 없다면 그다지 유용하지 않음.</p>
<blockquote>
<p><strong>자바스크립트가 제공하는 빌트인 생성자 함수</strong><br>String, Number, Boolean, Function, Array, Date, RegExp</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// String 생성자 함수에 의한 String 객체 생성</span></span><br><span class="line"><span class="keyword">const</span> strObj = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&#x27;Lee&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> strObj); <span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.log(strObj);        <span class="comment">// String &#123;&quot;Lee&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Number 생성자 함수에 의한 Number 객체 생성</span></span><br><span class="line"><span class="keyword">const</span> numObj = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">123</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> numObj); <span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.log(numObj);        <span class="comment">// Number &#123;123&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Boolean 생성자 함수에 의한 Boolean 객체 생성</span></span><br><span class="line"><span class="keyword">const</span> boolObj= <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> boolObj); <span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.log(boolObj);        <span class="comment">// Boolean &#123;true&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="생성자-함수"><a href="#생성자-함수" class="headerlink" title="생성자 함수"></a>생성자 함수</h2><h3 id="객체-리터럴에-의한-객체-생성-방식의-문제점"><a href="#객체-리터럴에-의한-객체-생성-방식의-문제점" class="headerlink" title="객체 리터럴에 의한 객체 생성 방식의 문제점"></a>객체 리터럴에 의한 객체 생성 방식의 문제점</h3><p>직관적이고 간편하지만 단 하나만의 객체를 생성한다. 똑같은 프로퍼티를 가지는 객체가 여러개 필요할 경우, 매번 같은 프로퍼티를 기술해야 한다. (메소드의 값이 동일한 경우가 일반적)</p>
<h3 id="생성자-함수에-의한-객체-생성-방식의-장점"><a href="#생성자-함수에-의한-객체-생성-방식의-장점" class="headerlink" title="생성자 함수에 의한 객체 생성 방식의 장점"></a>생성자 함수에 의한 객체 생성 방식의 장점</h3><p>객체를 생성하기 위한 템플릿처럼 생성자 함수를 사용할 수 있다. 즉, 프로퍼티 구조가 동일한 객체 여러개를 간단하게 생성할 수 있다.</p>
<ul>
<li><strong>일반 함수와 동일한 방법으로 생성자 함수를 정의</strong> 하고 <strong><code>new</code> 연산자와 함께 호출</strong> 하면 해당 함수는 생성자 함수로 동작한다.</li>
<li><code>new</code> 연산자와 함께 생성자 함수를 호출하지 않으면 생성자 함수가 아니라 일반 함수로 동작한다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Circle</span>(<span class="params">radius</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.radius = radius;</span><br><span class="line">  <span class="built_in">this</span>.getDiameter = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * <span class="built_in">this</span>.radius;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> circle1 = <span class="keyword">new</span> Circle(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 반지름이 2인 Circle 객체를 생성</span></span><br><span class="line"><span class="keyword">const</span> circle2 = <span class="keyword">new</span> Circle(<span class="number">4</span>);</span><br><span class="line"><span class="comment">// 반지름이 4인 Circle 객체를 생성</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(circle1.getDiameter()); <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(circle2.getDiameter()); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://mjae404.github.io/2020/09/21/js-this/">this</a><br><code>this</code>가 가리키는 값, 즉 this 바인딩은 함수 호출 방식에 따라 동적으로 결정된다.</p>
</blockquote>
<h3 id="내부-메소드-Call-과-Construct"><a href="#내부-메소드-Call-과-Construct" class="headerlink" title="내부 메소드 [[Call]]과 [[Construct]]"></a>내부 메소드 [[Call]]과 [[Construct]]</h3><ul>
<li>함수가 <strong>일반적인 함수로 호출되면 <code>[[Call]]</code> 호출</strong> 되고, <code>new</code>(또는 <code>super</code>) 연산자와 함께 <strong>생성자 함수로서 호출되면 <code>[[Construct]]</code>가 호출</strong> 된다.</li>
<li>모든 함수 객체는 내부 메소드 <code>[[Call]]</code>을 가지고 있기 때문에 호출할 수 있다.</li>
<li>모든 함수 객체가 <code>[[Construct]]</code>를 갖지는 않는다.</li>
</ul>
<img src="https://mjae404.github.io/images/constructor.jpg" alt="모든 함수 객체는 callable이지만 모든 함수 객체가 constructor인 것은 아니다.">

<blockquote>
<p><strong>callable</strong>: 내부 메소드 <code>[[Call]]</code>을 갖는 함수 객체</p>
</blockquote>
<blockquote>
<p><strong>constructor</strong>: 내부 메소드 <code>[[Construct]]</code>를 갖는 함수 객체<br><strong>non-constructor</strong>: 내부 메소드 <code>[[Construct]]</code>를 갖지 않는 함수 객체</p>
</blockquote>
<blockquote>
<p><strong>super 키워드</strong><br>ES6에서 도입된 클래스에서 부모 클래스를 참조할 때나 부모 클래스의 생성자를 호출할 때 사용된다.</p>
</blockquote>
<h3 id="constructor와-non-constructor의-구분"><a href="#constructor와-non-constructor의-구분" class="headerlink" title="constructor와 non-constructor의 구분"></a>constructor와 non-constructor의 구분</h3><p><strong>자바스크립트 엔진은 함수를 생성할 때 <code>FunctionCreate</code>라는 추상연산(abstract operation)을 사용</strong> 한다. 추상 연산 <code>FunctionCreate</code>는 함수 정의가 평가될 때 호출된다. <strong>이때 함수 정의 방식에 따라 <code>FunctionCreate</code>의 첫번째 매개변수 kind에 함수의 종류를 나타내는 문자열이 전달</strong> 된다.</p>
<table>
<thead>
<tr>
<th>구분</th>
<th>함수의 종류를 나타내는 문자열</th>
</tr>
</thead>
<tbody><tr>
<td>일반 함수 정의(함수 선언문, 함수 표현식)을 평가할 때</td>
<td>Normal</td>
</tr>
<tr>
<td>화살표 함수 정의를 평가할 때</td>
<td>Arrow</td>
</tr>
<tr>
<td>메소드 정의를 평가할 때</td>
<td>Method</td>
</tr>
</tbody></table>
<blockquote>
<p><strong>추상연산(abstract operation)</strong> : ECMAScript 사양에서 내부 동작의 구현 알고리즘을 표현한 것.</p>
</blockquote>
<blockquote>
<p>ECMAScript 사양에서 “메소드 정의”로 인정하는 범위가 일반적인 메소드보다 좁다. <strong>ES6의 메소드 축약표현만을 메소드 정의로 인정</strong> 한다.</p>
</blockquote>
<ul>
<li><strong>일반 함수</strong> 로 정의된 함수만이 <strong>constructor</strong></li>
<li>함수의 종류가 <strong>Arrow, Method</strong> 인 함수는 <strong>non-constructor</strong></li>
</ul>
<h3 id="생성자-함수의-인스턴스-생성-과정"><a href="#생성자-함수의-인스턴스-생성-과정" class="headerlink" title="생성자 함수의 인스턴스 생성 과정"></a>생성자 함수의 인스턴스 생성 과정</h3><ol>
<li>인스턴스 생성과 this 바인딩</li>
<li>인스턴스 초기화</li>
<li>인스턴스 반환</li>
</ol>
<h3 id="new-연산자"><a href="#new-연산자" class="headerlink" title="new 연산자"></a>new 연산자</h3><p><code>new</code> 연산자와 함께 <code>constructor</code> 함수를 호출하면 해당 함수는 생성자 함수로 동작한다. <code>new</code> 없이 생성자 함수를 호출하면 일반 함수(<code>[[Construct]]</code>가 아닌 <code>[[Call]]</code>)이 호출된다. 일반 함수와 생성자 함수의 차이를 위해서 <strong>생성자 함수는 일반적으로 파스칼 케이스로 명명</strong> 한다.</p>
<h3 id="new-target"><a href="#new-target" class="headerlink" title="new.target"></a>new.target</h3><ul>
<li>메타 프로퍼티(Meta Property)라고 부른다.</li>
<li><code>new</code> 연산자 없이 생성자 함수를 호출하는 것을 방지하기 위해 <code>new.target</code>을 지원한다.</li>
<li><code>this</code>와 유사하게 모든 함수 내부에서 암묵적인 지역변수와 같이 사용된다.</li>
<li>함수 내부에서 <code>new.target</code>을 사용하면 <code>new</code> 연산자와 함께 호출되었는지 확인 가능.<ul>
<li><code>new</code> 연산자와 함께 호출되면 함수 내부의 <code>new.target</code>은 함수 자신을 가리킨다.</li>
<li><code>new</code> 연산자 없이 호출된 함수 내부의 <code>new.target</code>은 <code>undefined</code>이다.</li>
</ul>
</li>
<li>IE는 <code>new.target</code>을 지원하지 않는다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Circle</span>(<span class="params">radius</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 이 함수가 new 연산자와 함께 호출되지 않았다면 new.target은 undefined이다.</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">new</span>.target) &#123;</span><br><span class="line">    <span class="comment">// new 연산자와 함께 호출하여 생성된 인스턴스를 반환한다.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Circle(radius);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.radius = radius;</span><br><span class="line">  <span class="built_in">this</span>.getDiameter = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * <span class="built_in">this</span>.radius;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> circle = Circle(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(circle.getDiameter());</span><br></pre></td></tr></table></figure>


<h3 id="스코프-세이프-생성자-패턴"><a href="#스코프-세이프-생성자-패턴" class="headerlink" title="스코프 세이프 생성자 패턴"></a>스코프 세이프 생성자 패턴</h3><ul>
<li>IE같이 <code>new.target</code>을 사용할 수 없는 상황이라면 스코프 세이프 생성자(Scope-Safe Constructor) 패턴을 사용할 수 있다.</li>
<li><code>new</code> 연산자와 함께 생성자 함수에 의해 생성된 객체(인스턴스)는 프로토타입에 의해 생서자 함수와 연결된다. 이를 이용해 <code>new</code> 연산자와 함께 호출되었는지 확인할 수 있다.</li>
<li>대부분의 빌트인 생성자 함수는 <code>new</code> 연산자와 함께 호출되었는지를 확인한 후 적절한 값을 반환한다.<ul>
<li><code>Object</code> / <code>Function</code> 생성자 함수는 <code>new</code> 연산자 없이 호출해도 <code>new</code> 연산자와 함께 호출했을 때와 동일하게 동작</li>
<li><code>String</code> 생성자 함수는 <code>new</code> 연산자와 함께 호출했을 때 String 객체를 생성하여 반환하지만 <code>new</code> 연산자 없이 호출하면 문자열 리터럴을 반환</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Circle</span>(<span class="params">radius</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 이 함수가 new 연산자와 함께 호출되지 않았다면</span></span><br><span class="line">  <span class="comment">// 이 시점의 this는 전역 객체 window를 가리킨다.</span></span><br><span class="line">  <span class="keyword">if</span> (!(<span class="built_in">this</span> <span class="keyword">instanceof</span> Circle)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Circle(radius);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.radius = radius;</span><br><span class="line">  <span class="built_in">this</span>.getDiameter = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * <span class="built_in">this</span>.radius;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// new 연산자 없이 생성자 함수를 호출하여도 생성자 함수로서 호출된다.</span></span><br><span class="line"><span class="keyword">const</span> circle = Circle(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(circle.getDiameter()); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://poiemaweb.com/">https://poiemaweb.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>constructor</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 클래스</title>
    <url>/2020/10/13/js-class/</url>
    <content><![CDATA[<p>클래스는 생성자 함수와 매우 유사하게 동작하지만 아래와 같이 몇가지 차이가 있다.</p>
<ol>
<li><p>클래스는 new 연산자를 사용하지 않고 호출하면 에러가 발행한다. 하지만 생성자 함수는 new 연산자를 사용하지 않고 호출하면 일반 함수로서 호출된다.</p>
</li>
<li><p>클래스는 상속을 지원하는 extentds와 super 키워드를 제공한다. 하지만 생성자 함수는 extentds와 super 키워드를 지원하지 않는다.</p>
</li>
<li><p>클래스는 호이스팅이 발생하지 않는 것처럼 동작한다. 하지만 함수 선언문으로 정의된 생성자 함수는 함수 호이스팅이 발생한다.</p>
</li>
<li><p>클래스의 모든 코드는 암묵적으로 strict 모드가 지정되어 실행되며 strict 모드를 해지할 수 없다. 하지만 생성자 함수는 암묵적으로 strict 모드가 지정되지 않는다.</p>
</li>
<li><p>클래스의 constructor, 프로토타입 메소드, 정적 메소드는 모두 프로퍼티 어트리뷰트 <code>[[Enumerable]]</code>의 값이 false이다. 다시 말해, 열거되지 않는다.</p>
</li>
</ol>
<a id="more"></a>

<h2 id="클래스-정의"><a href="#클래스-정의" class="headerlink" title="클래스 정의"></a>클래스 정의</h2><p>클래스는 class 키워드를 사용하여 정의한다. 클래스 이름은 생성자 함수와 마찬가지로 파스칼 케이스를 사용하는 것이 일반적이다. 함수와 마찬가지로 표현식으로 클래스를 정의할 수도 있다. 이때 클래스는 함수와 마찬가지로 이름을 가질 수도 있고, 갖지 않을 수도 있다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>


<p>클래스는 표현식으로 정의할 수 있다. 클래스는 일급 객체로서 아래와 같은 특징을 갖는다.</p>
<ol>
<li>무명의 리터럴로 생성할 수 있다. 즉, 런타임에 생성이 가능하다.</li>
<li>변수나 자료 구조(객체, 배열 등)에 저장할 수 있다.</li>
<li>함수의 매개 변수에게 전달할 수 있다.</li>
<li>함수의 반환값으로 사용할 수 있다.</li>
</ol>
<blockquote>
<p><strong>클래스 몸체에서 정의할 수 있는 메소드</strong>: construnctor(생성자), 프로토타입 메소드, 정적 메소드</p>
</blockquote>
<h2 id="클래스-호이스팅"><a href="#클래스-호이스팅" class="headerlink" title="클래스 호이스팅"></a>클래스 호이스팅</h2><p>클래스는 클래스 정의 이전에 참조할 수 없다. 클래스는 let, const 키워드로 선언한 변수처럼 호이스팅된다. 따라서 클래스 선언문 이전에 일시적 사각지대(Temporal Dead Zone; TDZ)에 빠지기 때문에 호이스팅이 발생하지 않는 것처럼 동작한다. <strong>클래스 표현식으로 정의한 클래스는 변수 호이스팅을 따른다.</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Person);</span><br><span class="line"><span class="comment">// ReferenceError: Cannot access &#x27;Person&#x27; before initialization</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 클래스 표현식</span></span><br><span class="line"><span class="keyword">const</span> Person = <span class="class"><span class="keyword">class</span> </span>&#123;&#125;;</span><br></pre></td></tr></table></figure>


<h2 id="인스턴스-생성"><a href="#인스턴스-생성" class="headerlink" title="인스턴스 생성"></a>인스턴스 생성</h2><p>클래스는 인스턴스를 생성하는 생성자 함수이며 new 연산자와 함께 호출되어 인스턴스를 생성한다. <strong>클래스는 인스턴스를 생성하는 것이 존재 이유</strong> 이므로 <strong>반드시 new 연산자와 함께 호출</strong> 하여야 한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 인스턴스 생성</span></span><br><span class="line"><span class="keyword">const</span> me = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(me); <span class="comment">// Person &#123;&#125;</span></span><br></pre></td></tr></table></figure>


<p>클래스 표현식으로 정의된 클래스의 경우, 기명 클래스 표현식의 클래스 이름(MyClass)을 사용해 인스턴스를 생성하면 에러가 발생한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Person = <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 함수 표현식과 마찬가지로 클래스를 가리키는 식별자로 인스턴스를 생성해야 한다.</span></span><br><span class="line"><span class="keyword">const</span> me = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 클래스 이름 MyClass는 함수 표현식과 동일하게 클래스 몸체 내부에서만 유효한 식별자이다.</span></span><br><span class="line"><span class="built_in">console</span>.log(MyClass); <span class="comment">// ReferenceError: MyClass is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> you = <span class="keyword">new</span> MyClass(); <span class="comment">// ReferenceError: MyClass is not defined</span></span><br></pre></td></tr></table></figure>


<h2 id="메소드"><a href="#메소드" class="headerlink" title="메소드"></a>메소드</h2><blockquote>
<p>클래스 몸체에서 정의할 수 있는 메소드: construnctor(생성자), 프로토타입 메소드, 정적 메소드</p>
</blockquote>
<h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><ul>
<li>constructor는 인스턴스를 생성하고 초기화하기 위한 특수한 메소드이다.</li>
<li>constructor는 이름을 변경할 수 없다.</li>
<li>constructor는 생략할 수 있다.</li>
<li>constructor를 생략하면 클래스에 아래와 같이 디폴트 constructor가 암묵적으로 정의된다.</li>
<li>constructor를 생략한 클래스는 빈 객체를 생성한다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 생성자</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 인스턴스 생성 및 초기화</span></span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>클래스의 constructor 메소드와 Person.prototype.constructor</strong><br>이름이 같아 혼동할 수 있으나 클래스 몸체에 정의한 constructor와 Person.prototype.constructor는 직접적인 관련이 없다. <a href="https://mjae404.github.io/2020/09/20/js-prototype/#%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85%EC%9D%98-constructor-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0%EC%99%80-%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%A8%EC%88%98">프로토타입의 constructor 프로퍼티</a>는 모든 프로토타입이 가지고 있는 프로퍼티이며 생성자 함수를 가리킨다.</p>
</blockquote>
<ul>
<li>프로퍼티가 추가되어 초기화된 인스턴스를 생성하려면 constructor 내부에서 this에 인스턴스 프로퍼티를 추가한다.</li>
<li>인스턴스를 생성할 때, 클래스 외부에서 인스턴스 프로퍼티의 초기값을 전달하려면 아래와 같이 constructor에 매개변수를 선언하고 인스턴스를 생성할 때 초기값을 전달한다. 이때 초기값은 constructor의 매개변수로 전달된다.</li>
</ul>
<h3 id="프로토타입-메소드"><a href="#프로토타입-메소드" class="headerlink" title="프로토타입 메소드"></a>프로토타입 메소드</h3><p>생성자 함수를 사용하여 인스턴스를 생성하는 경우, 프로토타입 메소드를 생성하기 위해서는 명시적으로 프로토타입에 메소드를 추가해야 한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 생성자 함수</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 프로토타입 메소드</span></span><br><span class="line">Person.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Hi! My name is <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> me = <span class="keyword">new</span> Person(<span class="string">&#x27;Lee&#x27;</span>);</span><br><span class="line">me.sayHi(); <span class="comment">// Hi! My name is Lee</span></span><br></pre></td></tr></table></figure>

<ul>
<li>클래스 몸체에서 정의한 메소드는 클래스의 prototype 프로퍼티에 메소드를 추가하지 않아도 기본적으로 프로토타입 메소드가 된다.</li>
<li>생성자 함수와 마찬가지로 클래스가 생성한 인스턴스는 프로토타입 체인의 인원이 된다.</li>
<li>클래스는 생성자 함수와 같이 인스턴스를 생성하는 생성자 함수라고 볼 수 있다.</li>
</ul>
<h3 id="정적-메소드"><a href="#정적-메소드" class="headerlink" title="정적 메소드"></a>정적 메소드</h3><blockquote>
<p>정적(static) 메소드: 인스턴스를 생성하지 않아도 호출할 수 있는 메소드를 말한다.</p>
</blockquote>
<ul>
<li>클래스 몸체에서 정의한 메소드에 <strong>static 키워드</strong> 를 붙이면 정적 메소드(클래스 메소드)가 된다.</li>
<li>정적 메소드는 인스턴스 없이도 호출할 수 있다.</li>
<li>정적 메소드는 인스턴스로 호출할 수 없다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 생성자</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 인스턴스 생성 및 초기화</span></span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 정적 메소드</span></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Hi!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="정적-메소드와-프로토타입-메소드의-차이"><a href="#정적-메소드와-프로토타입-메소드의-차이" class="headerlink" title="정적 메소드와 프로토타입 메소드의 차이"></a>정적 메소드와 프로토타입 메소드의 차이</h3><ol>
<li>정적 메소드와 프로토타입 메소드가 속해 있는 프로토타입 체인이 다르다.</li>
<li>정적 메소드는 클래스로 호출하고 프로토타입 메소드는 인스턴스로 호출한다.</li>
<li>정적 메소드는 인스턴스 프로퍼티를 참조할 수 없지만 프로토타입 메소드는 인스턴스 프로퍼티를 참조할 수 있다.</li>
</ol>
<blockquote>
<p><strong>ES6에 추가된 표준 빌트인 객체 Number의 정적 메소드</strong><br>ES6에서는 “20.2 빌트인 전역 함수”에서 살펴본 isFinite, isNan, parseFloat, parsInt 등의 빌트인 전역 함수를 표준 빌트인 객체 Number의 정적 메소드로 추가 구현하였다.</p>
</blockquote>
<h3 id="클래스에서-정의한-메소드의-특징"><a href="#클래스에서-정의한-메소드의-특징" class="headerlink" title="클래스에서 정의한 메소드의 특징"></a>클래스에서 정의한 메소드의 특징</h3><ol>
<li>function 키워드를 생략한 메소드 축약 표현을 사용한다.</li>
<li>객체 리터럴과는 다르게 클래스에 메소드를 정의할 때는 콤마가 필요 없다.</li>
<li>암묵적으로 strict 모드로 실행된다.</li>
<li>for…in 문이나 Object.keys 메소드 등으로 열거할 수 없다. 즉, 프로퍼티의 열거 가능 여부를 나타내며 불리언 값을 갖는 프로퍼티 어트리뷰트 <code>[[Enumerable]]</code>의 값이 false이다.</li>
<li>내부 메소드 <code>[[Construct]]</code>를 갖지 않는 non-constructor이다. 따라서 new 연산자와 함께 호출할 수 없다.</li>
</ol>
<h2 id="클래스의-인스턴스-생성-과정"><a href="#클래스의-인스턴스-생성-과정" class="headerlink" title="클래스의 인스턴스 생성 과정"></a>클래스의 인스턴스 생성 과정</h2><ol>
<li>인스턴스 생성과 this 바인딩</li>
<li>인스턴스 초기화</li>
<li>프로토타입 / 정적 메소드 추가</li>
<li>인스턴스 반환</li>
</ol>
<h2 id="프로퍼티"><a href="#프로퍼티" class="headerlink" title="프로퍼티"></a>프로퍼티</h2><h3 id="인스턴스-프로퍼티"><a href="#인스턴스-프로퍼티" class="headerlink" title="인스턴스 프로퍼티"></a>인스턴스 프로퍼티</h3><p>인스턴스 프로퍼티는 construnctor 내부에서 정의해야 한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 인스턴스 프로퍼티</span></span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> me = <span class="keyword">new</span> Person(<span class="string">&#x27;Lee&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(me); <span class="comment">// Person &#123;name: &quot;Lee&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="접근자-프로퍼티"><a href="#접근자-프로퍼티" class="headerlink" title="접근자 프로퍼티"></a>접근자 프로퍼티</h3><p>접근자 프로퍼티(Accessor property)는 자체적으로는 값을 갖지 않고 다른 데이터 프로퍼티의 값을 읽거나 저장할 때 사용하는 접근자 함수(Accessor function)로 구성된 프로퍼티다. 클래스의 메소드는 기본적으로 프로토타입 메소드가 된다. 따라서 클래스의 접근자 프로퍼티는 인스턴스 프로퍼티가 아닌 프로토타입의 프로퍼티가 된다.</p>
<ul>
<li>getter는 인스턴스 프로퍼티에 접근할 때마다 프로퍼티 값을 조작하는 행위가 필요할 때 사용한다. (프로퍼티처럼 참조하는 형식으로 사용)</li>
<li> setter는 인스턴스 프로퍼티에 값을 할당할 때마다 프로퍼티 값을 조작하는 행위가 필요할 때 사용한다. (setter는 호출하는 것이 아니라 프로퍼티처럼 값을 할당하는 형식으로 사용)</li>
</ul>
<h2 id="상속에-의한-클래스-확장"><a href="#상속에-의한-클래스-확장" class="headerlink" title="상속에 의한 클래스 확장"></a>상속에 의한 클래스 확장</h2><h3 id="클래스-상속과-생성자-함수-상속"><a href="#클래스-상속과-생성자-함수-상속" class="headerlink" title="클래스 상속과 생성자 함수 상속"></a>클래스 상속과 생성자 함수 상속</h3><p>상속에 의한 클래스 확장은 기존의 클래스를 상속받아 새로운 클래스를 확장하여 정의하는 것이다. 클래스는 상속을 통해 다른 클래스를 확장할 수 있는 문법인 extends 키워드가 기본적으로 제공된다. extends 키워드를 사용한 클래스 확장은 간편하고 직관적이다. 하지만 생성자 함수는 클래와 같이 상속을 통해 다른 생성자 함수를 확장할 수 있는 문법이 제공되지 않는다.</p>
<h3 id="extends-키워드"><a href="#extends-키워드" class="headerlink" title="extends 키워드"></a>extends 키워드</h3><p>상속을 통해 클래스를 확장하려면 extends 키워드를 사용하여 상속받을 클래스를 정의한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 수퍼(파생/부모) 클래스</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 서브(파생/자식) 클래스</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>서브 클래스 (sub  class)</strong> : 상속을 통해 확장된 클래스. 파생 클래스(derived class) 또는 자식 클래스(child class)라고 부르기도 한다.</p>
</blockquote>
<blockquote>
<p><strong>수퍼 클래스(super class)</strong> : 서브 클레스에게 상속된 클래스. 베이스 클래스(base class) 또는 부모 클래스(parent class)라고 부르기도 한다.</p>
</blockquote>
<h3 id="동적-상속"><a href="#동적-상속" class="headerlink" title="동적 상속"></a>동적 상속</h3><p><code>extends</code> 키워드는 생성자 함수를 상속받아 클래스를 확장할 수도 있다. 단, <code>extends</code> 키워드 앞에는 반드시 클래스가 와야 한다. <code>extends</code> 키워드 다음에는 클래스뿐만이 아니라 <code>[[Construct]]</code> 내부 메소드를 갖는 함수 객체를 반환하는 모든 표현식을 사용할 수 있다. 이를 통해 동적으로 상속받을 대상을 결정할 수 있다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 생성자 함수</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Base</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.a = a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 생성자 함수를 상속받는 서브 클래스</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> derived = <span class="keyword">new</span> Derived(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(derived); <span class="comment">// Derived &#123;a: 1&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="서브-클래스의-constructor"><a href="#서브-클래스의-constructor" class="headerlink" title="서브 클래스의 constructor"></a>서브 클래스의 constructor</h3><p>클래스에 constructor를 생략하면 클래스에 아래와 같이 디폴트 constructor가 암묵적으로 정의된다. 프로퍼티를 소유하는 인스턴스를 생성하려면 constructor 내부에서 인스턴스에 프로퍼티를 추가해야 한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 수퍼 클래스</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 서브 클래스</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>


<h3 id="super-키워드"><a href="#super-키워드" class="headerlink" title="super 키워드"></a>super 키워드</h3><p>super 키워드는 함수처럼 호출할 수도 있고 this와 같이 식별자처럼 참조할 수 있는 특수한 키워드이다. super는 아래와 같이 동작한다.</p>
<ul>
<li>super를 호출하면 수퍼 클래스의 constructor(super-constructor)를 호출한다.</li>
<li>super를 참조하면 수퍼 클래스의 메소드를 호출할 수 있다.</li>
</ul>
<p><em>super 호출</em></p>
<p>super를 호출하면 수퍼 클래스의 constructor(super-constructor)를 호출한다.</p>
<ol>
<li>서브 클래스에서 constructor를 생략하지 않는 경우, 서브 클래스의 constructor에서는 반드시 super를 호출해야 한다.</li>
<li>서브 클래스의 constructor에서 super를 호출하기 전에는 this를 참조할 수 없다.</li>
<li>super는 반드시 서브 클래스의 constructor에서만 호출한다. 서브 클래스가 아닌 클래스 또는 함수에서 호출하면 에러를 발생시킨다.</li>
</ol>
<p><em>super 참조</em></p>
<p>메소드 내에서 super를 참조하면 수퍼 클래스의 메소드를 호출할 수 있다.</p>
<ol>
<li>서브 클래스의 프로토타입 메소드 내에서 super.prop는 수퍼 클래스의 프로토타입 메소드 prop를 가리킨다.</li>
<li>서브 클래스의 정적 메소드 내에서 super.prop는 수퍼 클래스의 정적 메소드 prop를 가리킨다.</li>
</ol>
<h3 id="상속-클래스의-인스턴스-생성-과정"><a href="#상속-클래스의-인스턴스-생성-과정" class="headerlink" title="상속 클래스의 인스턴스 생성 과정"></a>상속 클래스의 인스턴스 생성 과정</h3><ol>
<li>서브 클래스의 super 호출</li>
<li>수퍼 클래스의 인스턴스 생성과 this 바인딩</li>
<li>수퍼 클래스의 인스턴스 초기화</li>
<li>수퍼 클래스의 프로토타입 / 정적 메소드 추가</li>
<li>서브 클래스 constructor로의 복귀와 this 바인딩</li>
<li>서브 클래스의 인스턴스 초기화</li>
<li>인스턴스 반환</li>
</ol>
<h3 id="네이티브-생성자-함수-확장"><a href="#네이티브-생성자-함수-확장" class="headerlink" title="네이티브 생성자 함수 확장"></a>네이티브 생성자 함수 확장</h3><p><code>extends</code> 키워드 다음에는 클래스뿐만이 아니라 <code>[[Construct]]</code> 내부 메소드를 갖는 함수 객체를 반환하는 모든 표현식을 사용할 수 있다. String, Number, Array와 같은 네이티브 생성자 함수도 <code>[[Construct]]</code> 내부 메소드를 갖는 함수이므로 extends 키워드를 사용하여 상속받을 수 있다.</p>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://poiemaweb.com/">https://poiemaweb.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>class</tag>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 제어문</title>
    <url>/2020/08/19/js-control-flow-statuement/</url>
    <content><![CDATA[<p>순차적으로 진행되는 실행 흐름을 변화시키는 문장을 제어문이라고 하며, 주어진 조건에 따라 코드 블록을 실행하거나 반복할 때 사용된다. 조건문과 반복문, 점프문이 있다.</p>
<a id="more"></a>

<h2 id="블록문"><a href="#블록문" class="headerlink" title="블록문"></a>블록문</h2><ul>
<li>0개 이상의 문을 중괄호로 묶은 것</li>
<li>코드 블록(블록)</li>
<li>하나의 실행 단위로 취급</li>
<li>세미콜론(;)을 붙이지 않는다.</li>
</ul>
<h2 id="조건문"><a href="#조건문" class="headerlink" title="조건문"></a>조건문</h2><ul>
<li>if문의 경우 반드시 등호 3개로 일치비교를 해야 한다.</li>
</ul>
<h3 id="if…else문"><a href="#if…else문" class="headerlink" title="if…else문"></a>if…else문</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(조건식<span class="number">1</span>)&#123;</span><br><span class="line">  <span class="comment">// 조건식1이 참일 경우 실행될 코드 블록</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (조건식<span class="number">2</span>)&#123;</span><br><span class="line">  <span class="comment">// 조건식2가 참일 경우 실행될 코드 블록. 여러번 사용할 수 있다.</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 거짓일 경우 실행될 코드 블록</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 코드 블록 내의 문이 하나라면 중괄호 생략 가능하다.</span></span><br><span class="line"><span class="keyword">if</span> (조건식<span class="number">1</span>) 실행될 문;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (조건식<span class="number">2</span>) 실행될 문;</span><br><span class="line"><span class="keyword">else</span> 실행될 문;</span><br></pre></td></tr></table></figure>


<h3 id="switch문"><a href="#switch문" class="headerlink" title="switch문"></a>switch문</h3><ul>
<li>암시적 형 변환을 허용하지 않는다.</li>
<li>값들을 비교할 때 자료형을 엄격하게 구분한다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(표현식)&#123;</span><br><span class="line">  <span class="keyword">case</span> 표현식<span class="number">1</span>:</span><br><span class="line">  <span class="keyword">switch</span> 실행될 문;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> 표현식<span class="number">2</span>:</span><br><span class="line">  <span class="keyword">switch</span> 실행될 문;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">  일치하는 <span class="keyword">case</span>문이 없을 때 실행되는 문;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="반복문"><a href="#반복문" class="headerlink" title="반복문"></a>반복문</h2><h3 id="for문"><a href="#for문" class="headerlink" title="for문"></a>for문</h3><ul>
<li>증감식을 꼭 채울 필요는 없다.</li>
<li>초기화 부분에서 생성한 변수는 for문의 지역변수이다. (for문 밖에서 변수를 사용하면 오류가 발생한다.)</li>
<li>초기화 부분도 반드시 채울 필요는 없다. 단, for문의 가장 첫번째 세미콜론은 생략할 수 없다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (변수 선언문 또는 할당문; 조건식; 증감식) &#123;</span><br><span class="line">  조건식이 참인 경우 반복 실행될 문;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 아무 식도 선언하지 않으면 무한루프</span></span><br><span class="line"><span class="keyword">for</span> (;;) &#123; ... &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>주어진 높이(height)에 맞게 *로 삼각형을 그려주는 함수</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printTriangle</span>(<span class="params">height</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> message = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; height; i++) &#123;</span><br><span class="line">    message += <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>구구단</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">1</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;i&#125;</span> * <span class="subst">$&#123;j&#125;</span> = <span class="subst">$&#123;i * j&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="for…in문"><a href="#for…in문" class="headerlink" title="for…in문"></a>for…in문</h3><p>객체 안의 프로퍼티를 순회하는 문.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (변수 <span class="keyword">in</span> 객체 표현식) 실행할 문</span><br></pre></td></tr></table></figure>


<h3 id="while문"><a href="#while문" class="headerlink" title="while문"></a>while문</h3><p>주어진 조건식의 평가 결과가 참이면 코드 블록을 계속해서 반복 실행한다. 조건문의 평가 결과가 거짓이 되면 실행을 종료한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (불리언 표현식) &#123;</span><br><span class="line">  실행될 문;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 무한루프</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123; … &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>홀수만 출력하는 함수</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 방법1</span></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">2</span> === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 방법2</span></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">50</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i * <span class="number">2</span> - <span class="number">1</span>);</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 방법3</span></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">  i += <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>정수의 약수를 모두 출력하고 총 몇 개의 약수가 있는지 출력</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> N = <span class="number">180</span>;</span><br><span class="line"><span class="comment">// 여기에 코드를 작성해 주세요.</span></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (i &lt;= N) &#123;</span><br><span class="line">  <span class="keyword">if</span> (N % i == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">    count++;</span><br><span class="line">  &#125;</span><br><span class="line">  i += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;N&#125;</span>의 약수는 총 <span class="subst">$&#123;count&#125;</span>개입니다.`</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>구구단</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">9</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= <span class="number">9</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;i&#125;</span> * <span class="subst">$&#123;j&#125;</span> = <span class="subst">$&#123;i * j&#125;</span>`</span>);</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="do…while문"><a href="#do…while문" class="headerlink" title="do…while문"></a>do…while문</h3><p>코드블록을 한번 이상 실행하고 조건식을 평가한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  실행될 문;</span><br><span class="line">&#125; <span class="keyword">while</span> (불리언 표현식);</span><br></pre></td></tr></table></figure>

<h2 id="점프문"><a href="#점프문" class="headerlink" title="점프문"></a>점프문</h2><h3 id="라벨문"><a href="#라벨문" class="headerlink" title="라벨문"></a>라벨문</h3><p>문장에 라벨을 붙이면 break문이나 continue문을 실행한 후에 점프할 수 있는 위치가 된다. 실질적으로 사용할 수 있는 곳은 switch문과 반복문.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">라벨 이름: 실행될 문;</span><br></pre></td></tr></table></figure>


<h3 id="break문"><a href="#break문" class="headerlink" title="break문"></a>break문</h3><ul>
<li>레이블문, 반복문, switch문의 코드블록을 탈출한다. 그 이외에 사용하면 문법 에러 발생.</li>
<li>라벨을 지정한 break문 실행시 break문과 라벨 사이에 줄바꿈이 있으면 안된다.<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">break</span> 라벨 이름;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="continue문"><a href="#continue문" class="headerlink" title="continue문"></a>continue문</h3><ul>
<li>코드 블록 실행을 현지점에서 중단후 반복문의 증감식으로 이동한다.</li>
<li>라벨 지정 여부와 관계 없이 반복문 안에서만 사용 가능.<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">continue</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">continue</span> 라벨 이름;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="throw문"><a href="#throw문" class="headerlink" title="throw문"></a>throw문</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">throw</span> 표현식;</span><br></pre></td></tr></table></figure>


<h3 id="return문"><a href="#return문" class="headerlink" title="return문"></a>return문</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span>;</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://poiemaweb.com/">https://poiemaweb.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>control flow</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 클로저</title>
    <url>/2020/10/18/js-closure/</url>
    <content><![CDATA[<blockquote>
<p>“A closure is the combination of a function and the lexical environment within which that function was declared.”<br>클로저는 함수와 그 <strong><u>함수가 선언된 렉시컬 환경(Lexical environment)</u></strong> 과의 조합이다.<br>─ <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures">MDN</a></p>
</blockquote>
<p>→  “그 함수가 선언된 렉시컬 환경(Lexical environment)”란 함수가 정의된 위치의 스코프, 즉 상위 스코프를 의미하는 실행 컨텍스트의 렉시컬 환경을 말한다.</p>
<a id="more"></a>

<h2 id="렉시컬-스코프"><a href="#렉시컬-스코프" class="headerlink" title="렉시컬 스코프"></a>렉시컬 스코프</h2><p>자바스크립트는 함수를 어디서 호출했는지가 아니라 어디에 정의했는지에 따라 상위 스코프를 결정한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> x = <span class="number">10</span>;</span><br><span class="line">  bar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(); <span class="comment">// 1</span></span><br><span class="line">bar(); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<p>함수 foo와 함수 bar는 모두 전역에서 정의된 전역 함수이다. 함수의 상위 스코프는 함수를 어디서 정의했는지에 따라 결정되므로 함수 foo와 함수 bar의 상위 스코프는 전역이다. 함수를 어디서 호출하는지는 함수의 상위 스코프 결정에 어떠한 영향도 주지 못한다.</p>
<h2 id="함수-객체의-내부-슬롯-Environment"><a href="#함수-객체의-내부-슬롯-Environment" class="headerlink" title="함수 객체의 내부 슬롯 [[Environment]]"></a>함수 객체의 내부 슬롯 [[Environment]]</h2><p>함수는 자신의 내부 슬롯 <code>[[Environment]]</code>에 자신이 정의된 환경, 즉 상위 스코프의 참조를 저장한다. 함수 객체의 내부 슬롯 <code>[[Environment]</code>]에 저장한 현재 실행 중인 실행 컨텍스트의 렉시컬 환경의 참조가 바로 상위 스코프이다. 또한 자신이 호출되었을 때 생성될 함수 렉시컬 환경의 “외부 렉시컬 환경에 대한 참조”에 저장될 참조값이다. 함수 객체는 내부 슬롯 <code>[[Environment]]</code>에 저장한 렉시컬 환경의 참조, 즉 상위 스코프를 자신이 존재하는 한 기억한다.</p>
<h3 id="함수-코드-평가"><a href="#함수-코드-평가" class="headerlink" title="함수 코드 평가"></a>함수 코드 평가</h3><p>함수가 호출되면 함수 내부로 코드의 제어권이 이동한다. 그리고 함수 코드를 평가하기 시작한다. 함수 코드 평가는 아래 순서로 진행된다. 함수 렉시컬 환경의 구성 요소인 외부 렉시컬 환경에 대한 참조에는 함수 객체의 내부 슬롯 <code>[[Environment]]</code>에 저장된 렉시컬 환경의 참조가 할당된다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 함수 실행 컨텍스트 생성</span><br><span class="line">2. 함수 렉시컬 환경 생성</span><br><span class="line">  2.1. 함수 환경 레코드 생성</span><br><span class="line">  2.2. 외부 렉시컬 환경에 대한 참조 할당</span><br><span class="line">  2.3. this 바인딩</span><br></pre></td></tr></table></figure>


<h2 id="클로저와-렉시컬-환경"><a href="#클로저와-렉시컬-환경" class="headerlink" title="클로저와 렉시컬 환경"></a>클로저와 렉시컬 환경</h2><blockquote>
<p><strong>클로저(closure)</strong>: 자신을 포함하고 있는 외부 함수보다 중첩 함수가 더 오래 유지되는 경우, 외부 함수 밖에서 중첩 함수를 호출하더라도 외부 함수의 지역 변수에 접근할 수 있다. 클로저(closure)란 “함수가 자유 변수에 대해 닫혀있다(closed)”라는 의미이다. 이를 좀 더 알기 쉽게 의역하자면 “자유 변수와 묶여있는 함수”라고 할 수 있다.</p>
</blockquote>
<blockquote>
<p><strong>자유 변수(Free variable)</strong>: 클로저에 의해 참조되는 상위 스코프의 변수</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ①</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> x = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">const</span> inner = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(x); &#125;; <span class="comment">// ②</span></span><br><span class="line">  <span class="keyword">return</span> inner;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 함수 outer를 호출하면 중첩 함수 inner를 반환한다.</span></span><br><span class="line"><span class="comment">// 그리고 함수 outer의 실행 컨텍스트는 실행 컨텍스트 스택에서 pop된다.</span></span><br><span class="line"><span class="keyword">const</span> innerFunc = outer(); <span class="comment">// ③</span></span><br><span class="line">innerFunc(); <span class="comment">// ④ 10</span></span><br></pre></td></tr></table></figure>

<p>위 코드에서 inner 함수는 자신이 평가될 때 자신이 정의된 위치에 의해 결정된 상위 스코프를 <code>[[Environment]]</code> 내부 슬롯에 저장한다. 이때 저장된 상위 스코프는 함수가 존재하는 한 유지된다.</p>
<p>outer 함수의 실행 컨텍스트는 실행 컨텍스트 스택에서 제거되지만 outer 함수의 렉시컬 환경까지 소멸하는 것은 아니다. outer 함수의 렉시컬 환경은 inner 함수의 <code>[[Environment]]</code> 내부 슬롯에 의해 참조되고 있으므로 가비지 켈렉션의 대상이 되지 않기 때문이다. 가비지 컬렉터는 누군가가 참조되고 있는 메모리 공간을 함부로 해제하지 않는다.</p>
<h2 id="클로저의-활용"><a href="#클로저의-활용" class="headerlink" title="클로저의 활용"></a>클로저의 활용</h2><p>클로저는 상태가 의도치 않게 변경되지 않도록 안전하게 은닉(Information hiding)한다. 그리고 이전 상태를 기억하다가 상태가 변경되면 최신 상태(state)를 유지한다.</p>
<blockquote>
<p><strong>카운터 예시</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 함수를 반환하는 고차 함수</span></span><br><span class="line"><span class="keyword">const</span> counter = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 카운트 상태를 유지하기 위한 자유 변수</span></span><br><span class="line">  <span class="keyword">let</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 함수를 인수로 전달받는 클로저를 반환</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">predicate</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 인수로 전달 받은 보조 함수에 상태 변경을 위임한다.</span></span><br><span class="line">    counter = predicate(counter);</span><br><span class="line">    <span class="keyword">return</span> counter;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 보조 함수</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">increase</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ++n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 보조 함수</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decrease</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> --n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 보조 함수를 전달하여 호출</span></span><br><span class="line"><span class="built_in">console</span>.log(counter(increase)); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(counter(increase)); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 자유 변수를 공유한다.</span></span><br><span class="line"><span class="built_in">console</span>.log(counter(decrease)); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(counter(decrease)); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>

<p>함수 <code>makeCounter</code>를 호출해 함수를 반환할 때 반환된 함수는 자신만의 독립된 렉시컬 환경을 갖는다. 따라서 독립된 카운터가 아니라 연동하여 증감이 가능한 카운터를 만들려면 렉시컬 환경을 공유하는 클로저를 만들어야 한다. 이를 위해서는 <code>makeCounter</code> 함수를 두번 호출하지 말아야 한다.</p>
<h2 id="자주-발생하는-실수"><a href="#자주-발생하는-실수" class="headerlink" title="자주 발생하는 실수"></a>자주 발생하는 실수</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  arr[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// ①</span></span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arr[j]()); <span class="comment">// ②</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>for 문의 초기화 문에서 var 키워드로 선언한 변수 i는 블록 레벨이 아닌 함수 레벨 스코프를 갖기 때문에 전역 변수가 되며 변수 i에는 0, 1, 2, 3, 4, 5가 순차적으로 할당된다. 따라서 배열 funcs에 요소로 추가된 함수를 호출하면 전역 변수 i를 참조하여 i의 값 5가 출력된다.</p>
<h3 id="바르게-동작하는-코드"><a href="#바르게-동작하는-코드" class="headerlink" title="바르게 동작하는 코드"></a>바르게 동작하는 코드</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">  arr[i] = (<span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123; <span class="comment">// ①</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> id;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;(i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arr[j]());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://poiemaweb.com/">https://poiemaweb.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>closure</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 날짜와 시간을 위한 Date 객체</title>
    <url>/2020/10/09/js-date-object/</url>
    <content><![CDATA[<p>Date 객체는 날짜와 시간(년, 월, 시, 분, 초, 밀리초)을 위한 메소드를 제공하는 <strong>빌트인 객체이면서 생성자 함수</strong> 이다. <strong>내부적으로 숫자값을 가지며</strong>, 1970년 1월 1일 00:00(UTC)를 기점으로 현재 시간까지의 밀리초를 나타낸다.</p>
<p>현재 날짜와 시간은 <strong>자바스크립트 코드가 동작한 시스템의 시계에 의해 결정</strong> 된다. 시스템 시계의 설정에 따라 서로 다른 값을 가질 수 있다.</p>
<a id="more"></a>

<blockquote>
<p><strong>UTC(협정 세계시: Coordinated Universal Time)</strong>: GMT(그리니치 평균시: Greenwich Mean Time)로 불리기도 하는데 UTC와 GMT는 초의 소숫점 단위에서만 차이가 나기 때문에 일상에서는 혼용되어 사용된다.</p>
</blockquote>
<h2 id="Date-Constructor"><a href="#Date-Constructor" class="headerlink" title="Date Constructor"></a>Date Constructor</h2><p><code>Date</code> 객체는 생성자 함수이다. <code>Date</code> 생성자 함수는 날짜와 시간을 가지는 인스턴스를 생성한다. 생성된 인스턴스는 기본적으로 현재 날짜와 시간을 나타내는 값을 가진다. 현재 날짜와 시간이 아닌 다른 날짜와 시간을 다루고 싶은 경우, <code>Date</code> 생성자 함수에 명시적으로 해당 날짜와 시간 정보를 인수로 지정한다.</p>
<h3 id="new-Date"><a href="#new-Date" class="headerlink" title="new Date()"></a>new Date()</h3><p>인수를 전달하지 않으면 현재 날짜와 시간을 가지는 인스턴스를 반환한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(date);</span><br><span class="line"><span class="comment">// Thu May 16 2019 17:16:13 GMT+0900 (한국 표준시)</span></span><br></pre></td></tr></table></figure>

<h3 id="new-Date-milliseconds"><a href="#new-Date-milliseconds" class="headerlink" title="new Date(milliseconds)"></a>new Date(milliseconds)</h3><p>인수로 숫자 타입의 밀리초를 전달하면 1970년 1월 1일 00:00(UTC)을 기점으로 인수로 전달된 밀리초만큼 경과한 날짜와 시간을 가지는 인스턴스를 반환한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date);</span><br><span class="line"><span class="comment">// Thu Jan 01 1970 09:00:00 GMT+0900 (한국 표준시)</span></span><br><span class="line">date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">86400000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date);</span><br><span class="line"><span class="comment">// Fri Jan 02 1970 09:00:00 GMT+0900 (한국 표준시)</span></span><br></pre></td></tr></table></figure>

<h3 id="new-Date-dateString"><a href="#new-Date-dateString" class="headerlink" title="new Date(dateString)"></a>new Date(dateString)</h3><p>인수로 날짜와 시간을 나타내는 문자열을 전달하면 지정된 날짜와 시간을 가지는 인스턴스를 반환한다. 이때 인수로 전달한 문자열은 <code>Date.parse</code> 메소드에 의해 해석 가능한 형식이어야 한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;May 16, 2019 17:22:10&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date)</span><br><span class="line"> <span class="comment">// Thu May 16 2019 17:22:10 GMT+0900 (한국 표준시)</span></span><br><span class="line"></span><br><span class="line">date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;2019/05/16/17:22:10&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date);</span><br><span class="line"><span class="comment">// Thu May 16 2019 17:22:10 GMT+0900 (한국 표준시)</span></span><br></pre></td></tr></table></figure>

<h3 id="new-Date-year-month-day-hour-minute-second-millisecond"><a href="#new-Date-year-month-day-hour-minute-second-millisecond" class="headerlink" title="new Date(year, month[, day, hour, minute, second, millisecond])"></a>new Date(year, month[, day, hour, minute, second, millisecond])</h3><ul>
<li>인수로 년, 월, 일, 시, 분, 초, 밀리초를 의미하는 숫자를 전달하면 지정된 날짜와 시간을 가지는 인스턴스를 반환한다. 이때 년, 월은 반드시 지정하여야 한다.</li>
<li>지정하지 않은 옵션 정보는 <code>0</code> 또는 <code>1</code>으로 초기화된다.</li>
<li>년, 월을 지정하지 않은 경우 1970년 1월 1일 00:00(UTC)을 가지는 인스턴스를 반환한다.</li>
<li>범위를 벗어나는 값을 설정하면 자동으로 날짜를 수정해준다.</li>
</ul>
<table>
<thead>
<tr>
<th>인수</th>
<th>내용</th>
</tr>
</thead>
<tbody><tr>
<td><code>year</code></td>
<td>1900년 이후의 년</td>
</tr>
<tr>
<td><code>month</code></td>
<td>월을 나타내는 0 ~ 11까지의 정수 (주의: 0부터 시작, 0 = 1월)</td>
</tr>
<tr>
<td><code>day</code></td>
<td>일을 나타내는 1~31까지의 정수</td>
</tr>
<tr>
<td><code>hour</code></td>
<td>시를 나타내는 0 ~ 23까지의 정수</td>
</tr>
<tr>
<td><code>minute</code></td>
<td>분을 나타내는 0 ~ 59까지의 정수</td>
</tr>
<tr>
<td><code>second</code></td>
<td>초를 나타내는 0 ~ 59까지의 정수</td>
</tr>
<tr>
<td><code>millisecond</code></td>
<td>밀리초를 나타내는 0 ~ 999까지의 정수</td>
</tr>
</tbody></table>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2019</span>, <span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date)</span><br><span class="line"> <span class="comment">// Wed May 01 2019 00:00:00 GMT+0900 (한국 표준시)</span></span><br><span class="line"></span><br><span class="line">date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2019</span>, <span class="number">4</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">24</span>, <span class="number">30</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date);</span><br><span class="line"><span class="comment">// Thu May 16 2019 17:24:30 GMT+0900 (한국 표준시)</span></span><br><span class="line"></span><br><span class="line">date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;2019/5/16/17:24:30:10&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date);</span><br><span class="line"><span class="comment">// Thu May 16 2019 17:24:30 GMT+0900 (한국 표준시)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">1988</span>, <span class="number">0</span>, <span class="number">32</span>);</span><br><span class="line"><span class="comment">// 1988년 1월 32일은 없으며 2월 1일로 자동고침됨.</span></span><br><span class="line"><span class="built_in">console</span>.log(myDate) <span class="comment">// Mon Feb 01 1988 00:00:00</span></span><br></pre></td></tr></table></figure>

<h3 id="Date-생성자-함수를-new-연산자없이-호출"><a href="#Date-생성자-함수를-new-연산자없이-호출" class="headerlink" title="Date 생성자 함수를 new 연산자없이 호출"></a>Date 생성자 함수를 new 연산자없이 호출</h3><p><code>Date</code> 생성자 함수를 <code>new</code> 연산자없이 호출하면 인스턴스를 반환하지 않고 결과값을 문자열로 반환한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> date = <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> date, date);</span><br><span class="line"><span class="comment">// string Thu May 16 2019 17:33:03 GMT+0900 (한국 표준시)</span></span><br></pre></td></tr></table></figure>

<h3 id="날짜를-표현하는-문자열"><a href="#날짜를-표현하는-문자열" class="headerlink" title="날짜를 표현하는 문자열"></a>날짜를 표현하는 문자열</h3><p><code>YYYY-MM-DDThh:mm:ss</code>형식 말고도 날짜를 표현하는 다양한 방식의 문자열이 있다. 단, 이런 방식을 사용하면 브라우저나 컴퓨터를 사용하는 위치의 시간대에 따라 서로 다른 결과값이 나올 수 있기 때문에  <a href="https://tools.ietf.org/html/rfc2822#page-14">IETF 호환 RFC 2822 타임스탬프</a>와 <a href="http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.15">ISO8601의 한 버전</a> 형식을 준수하는 문자열로 Date객체를 생성하는 것을 권장한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> date1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;12/15/1999 05:25:30&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> date2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;December 15, 1999 05:25:30&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> date3 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;Dec 15 1999 05:25:30&#x27;</span>);</span><br></pre></td></tr></table></figure>


<h2 id="Date-메소드"><a href="#Date-메소드" class="headerlink" title="Date 메소드"></a>Date 메소드</h2><h3 id="Date-now"><a href="#Date-now" class="headerlink" title="Date.now"></a>Date.now</h3><p>1970년 1월 1일 00:00:00(UTC)을 기점으로 현재 시간(메소드가 호출된 시점의 타임스탬프)까지 경과한 밀리초를 숫자로 반환한다.</p>
<blockquote>
<p>새로운 객체를 만들지 않는다는 점은 코드를 줄이고 실행될 때 메모리의 부담을 줄여주기 때문에 당시 시간 값이 필요한 경우 <code>Date.now()</code> 메소드를 활용하는 것이 더 유리하다.</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> now = <span class="built_in">Date</span>.now();</span><br><span class="line"><span class="built_in">console</span>.log(now);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Date</span>.now() === myDate.getTime()); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="Date-parse"><a href="#Date-parse" class="headerlink" title="Date.parse"></a>Date.parse</h3><p>1970년 1월 1일 00:00:00(UTC)을 기점으로 인수로 전달된 지정 시간(new Date(dateString)의 인수와 동일한 형식)까지의 밀리초를 숫자로 반환한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> d = <span class="built_in">Date</span>.parse(<span class="string">&#x27;Jan 2, 1970 00:00:00 UTC&#x27;</span>); <span class="comment">// UTC</span></span><br><span class="line"><span class="built_in">console</span>.log(d); <span class="comment">// 86400000</span></span><br><span class="line"></span><br><span class="line">d = <span class="built_in">Date</span>.parse(<span class="string">&#x27;Jan 2, 1970 09:00:00&#x27;</span>); <span class="comment">// KST</span></span><br><span class="line"><span class="built_in">console</span>.log(d); <span class="comment">// 86400000</span></span><br><span class="line"></span><br><span class="line">d = <span class="built_in">Date</span>.parse(<span class="string">&#x27;1970/01/02/09:00:00&#x27;</span>); <span class="comment">// KST</span></span><br><span class="line"><span class="built_in">console</span>.log(d); <span class="comment">// 86400000</span></span><br></pre></td></tr></table></figure>

<h3 id="Date-UTC"><a href="#Date-UTC" class="headerlink" title="Date.UTC"></a>Date.UTC</h3><p>1970년 1월 1일 00:00:00(UTC)을 기점으로 인수로 전달된 지정 시간까지의 밀리초를 숫자로 반환한다.</p>
<p><code>Date.UTC</code> 메소드는 <code>new Date(year, month[, day, hour, minute, second, millisecond])</code>와 같은 형식의 인수를 사용해야 한다. Date.UTC 메소드의 인수는 local time(KST)가 아닌 UTC로 인식된다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> d = <span class="built_in">Date</span>.UTC(<span class="number">1970</span>, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(d); <span class="comment">// 86400000</span></span><br><span class="line"></span><br><span class="line">d = <span class="built_in">Date</span>.UTC(<span class="string">&#x27;1970/1/2&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(d); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure>

<h3 id="Date-prototype-getFullYear"><a href="#Date-prototype-getFullYear" class="headerlink" title="Date.prototype.getFullYear"></a>Date.prototype.getFullYear</h3><p>년도를 나타내는 4자리 숫자를 반환한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">const</span> year = today.getFullYear();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(today);</span><br><span class="line"><span class="comment">// Thu May 16 2019 17:39:30 GMT+0900 (한국 표준시)</span></span><br><span class="line"><span class="built_in">console</span>.log(year);</span><br><span class="line"><span class="comment">// 2019</span></span><br></pre></td></tr></table></figure>

<h3 id="Date-prototype-setFullYear"><a href="#Date-prototype-setFullYear" class="headerlink" title="Date.prototype.setFullYear"></a>Date.prototype.setFullYear</h3><p>년도를 나타내는 4자리 숫자를 설정한다. 년도 이외 월, 일도 설정할 수 있다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">dateObj.setFullYear(year[, month[, day]])</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 년도 지정</span></span><br><span class="line">today.setFullYear(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> year = today.getFullYear();</span><br><span class="line"><span class="built_in">console</span>.log(today);</span><br><span class="line"><span class="comment">// Tue May 16 2000 17:42:40 GMT+0900 (한국 표준시)</span></span><br><span class="line"><span class="built_in">console</span>.log(year);</span><br><span class="line"><span class="comment">// 2000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 년도 지정</span></span><br><span class="line">today.setFullYear(<span class="number">1900</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">year = today.getFullYear();</span><br><span class="line"><span class="built_in">console</span>.log(today);</span><br><span class="line"><span class="comment">// Mon Jan 01 1900 17:42:40 GMT+0827 (한국 표준시)</span></span><br><span class="line"><span class="built_in">console</span>.log(year);</span><br><span class="line"><span class="comment">// 1900</span></span><br></pre></td></tr></table></figure>

<h3 id="Date-prototype-getMonth"><a href="#Date-prototype-getMonth" class="headerlink" title="Date.prototype.getMonth"></a>Date.prototype.getMonth</h3><p>월을 나타내는 0 ~ 11의 정수를 반환한다. 1월은 0, 12월은 11이다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">const</span> month = today.getMonth();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(today);</span><br><span class="line"><span class="comment">// Thu May 16 2019 17:44:03 GMT+0900 (한국 표준시)</span></span><br><span class="line"><span class="built_in">console</span>.log(month); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>

<h3 id="Date-prototype-setMonth"><a href="#Date-prototype-setMonth" class="headerlink" title="Date.prototype.setMonth"></a>Date.prototype.setMonth</h3><p>월을 나타내는 0 ~ 11의 정수를 설정한다. 1월은 0, 12월은 11이다. 월 이외 일도 설정할 수 있다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">dateObj.setMonth(month[, day])</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 월을 지정</span></span><br><span class="line">today.setMonth(<span class="number">0</span>); <span class="comment">// 1월</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> month = today.getMonth();</span><br><span class="line"><span class="built_in">console</span>.log(today);</span><br><span class="line"><span class="comment">// Wed Jan 16 2019 17:45:20 GMT+0900 (한국 표준시)</span></span><br><span class="line"><span class="built_in">console</span>.log(month); <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 월/일을 지정</span></span><br><span class="line">today.setMonth(<span class="number">11</span>, <span class="number">1</span>); <span class="comment">// 12월 1일</span></span><br><span class="line"></span><br><span class="line">month = today.getMonth();</span><br><span class="line"><span class="built_in">console</span>.log(today);</span><br><span class="line">/ Sun Dec <span class="number">01</span> <span class="number">2019</span> <span class="number">17</span>:<span class="number">45</span>:<span class="number">20</span> GMT+<span class="number">0900</span> (한국 표준시)</span><br><span class="line"><span class="built_in">console</span>.log(month); <span class="comment">// 11</span></span><br></pre></td></tr></table></figure>


<h3 id="Date-prototype-getDate"><a href="#Date-prototype-getDate" class="headerlink" title="Date.prototype.getDate"></a>Date.prototype.getDate</h3><p>날짜(1 ~ 31)를 나타내는 정수를 반환한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">const</span> date = today.getDate();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(today);</span><br><span class="line"><span class="comment">// Thu May 16 2019 17:46:42 GMT+0900 (한국 표준시)</span></span><br><span class="line"><span class="built_in">console</span>.log(date);  <span class="comment">// 16</span></span><br></pre></td></tr></table></figure>

<h3 id="Date-prototype-setDate"><a href="#Date-prototype-setDate" class="headerlink" title="Date.prototype.setDate"></a>Date.prototype.setDate</h3><p>날짜(1 ~ 31)를 나타내는 정수를 설정한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 날짜 지정</span></span><br><span class="line">today.setDate(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> date = today.getDate();</span><br><span class="line"><span class="built_in">console</span>.log(today);</span><br><span class="line"><span class="comment">// Wed May 01 2019 17:47:01 GMT+0900 (한국 표준시)</span></span><br><span class="line"><span class="built_in">console</span>.log(date);  <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h3 id="Date-prototype-getDay"><a href="#Date-prototype-getDay" class="headerlink" title="Date.prototype.getDay"></a>Date.prototype.getDay</h3><p>요일(0 ~ 6)를 나타내는 정수를 반환한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">const</span> day = today.getDay();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(today);</span><br><span class="line"><span class="comment">// Thu May 16 2019 17:47:31 GMT+0900 (한국 표준시)</span></span><br><span class="line"><span class="built_in">console</span>.log(day); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>

<p><em>반환값</em></p>
<table>
<thead>
<tr>
<th>요일</th>
<th>반환값</th>
</tr>
</thead>
<tbody><tr>
<td>일요일</td>
<td>0</td>
</tr>
<tr>
<td>월요일</td>
<td>1</td>
</tr>
<tr>
<td>화요일</td>
<td>2</td>
</tr>
<tr>
<td>수요일</td>
<td>3</td>
</tr>
<tr>
<td>목요일</td>
<td>4</td>
</tr>
<tr>
<td>금요일</td>
<td>5</td>
</tr>
<tr>
<td>토요일</td>
<td>6</td>
</tr>
</tbody></table>
<h3 id="Date-prototype-getHours"><a href="#Date-prototype-getHours" class="headerlink" title="Date.prototype.getHours"></a>Date.prototype.getHours</h3><p>시간(0 ~ 23)를 나타내는 정수를 반환한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">const</span> hours = today.getHours();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(today);</span><br><span class="line"><span class="comment">// Thu May 16 2019 17:48:03 GMT+0900 (한국 표준시)</span></span><br><span class="line"><span class="built_in">console</span>.log(hours); <span class="comment">// 17</span></span><br></pre></td></tr></table></figure>


<h3 id="Date-prototype-setHours"><a href="#Date-prototype-setHours" class="headerlink" title="Date.prototype.setHours"></a>Date.prototype.setHours</h3><p>시간(0 ~ 23)를 나타내는 정수를 설정한다. 시간 이외 분, 초, 밀리초도 설정할 수 있다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">dateObj.setHours(hour[, minute[, second[, ms]]])</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 시간 지정</span></span><br><span class="line">today.setHours(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hours = today.getHours();</span><br><span class="line"><span class="built_in">console</span>.log(today);</span><br><span class="line"><span class="comment">// Thu May 16 2019 07:49:06 GMT+0900 (한국 표준시)</span></span><br><span class="line"><span class="built_in">console</span>.log(hours); <span class="comment">// 7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 시간/분/초/밀리초 지정</span></span><br><span class="line">today.setHours(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 00:00:00:00</span></span><br><span class="line"></span><br><span class="line">hours = today.getHours();</span><br><span class="line"><span class="built_in">console</span>.log(today);</span><br><span class="line"><span class="comment">// Thu May 16 2019 00:00:00 GMT+0900 (한국 표준시)</span></span><br><span class="line"><span class="built_in">console</span>.log(hours); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>

<h3 id="Date-prototype-getMinutes"><a href="#Date-prototype-getMinutes" class="headerlink" title="Date.prototype.getMinutes"></a>Date.prototype.getMinutes</h3><p>분(0 ~ 59)를 나타내는 정수를 반환한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">const</span> minutes = today.getMinutes();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(today);</span><br><span class="line"><span class="comment">// Thu May 16 2019 17:50:29 GMT+0900 (한국 표준시)</span></span><br><span class="line"><span class="built_in">console</span>.log(minutes); <span class="comment">// 50</span></span><br></pre></td></tr></table></figure>

<h3 id="Date-prototype-setMinutes"><a href="#Date-prototype-setMinutes" class="headerlink" title="Date.prototype.setMinutes"></a>Date.prototype.setMinutes</h3><p>분(0 ~ 59)를 나타내는 정수를 설정한다. 분 이외 초, 밀리초도 설정할 수 있다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">dateObj.setMinutes(minute[, second[, ms]])</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 분 지정</span></span><br><span class="line">today.setMinutes(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> minutes = today.getMinutes();</span><br><span class="line"><span class="built_in">console</span>.log(today);</span><br><span class="line"><span class="comment">// Thu May 16 2019 17:50:30 GMT+0900 (한국 표준시)</span></span><br><span class="line"><span class="built_in">console</span>.log(minutes); <span class="comment">// 50</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 분/초/밀리초 지정</span></span><br><span class="line">today.setMinutes(<span class="number">5</span>, <span class="number">10</span>, <span class="number">999</span>); <span class="comment">// HH:05:10:999</span></span><br><span class="line"></span><br><span class="line">minutes = today.getMinutes();</span><br><span class="line"><span class="built_in">console</span>.log(today);</span><br><span class="line"><span class="comment">// Thu May 16 2019 17:05:10 GMT+0900 (한국 표준시)</span></span><br><span class="line"><span class="built_in">console</span>.log(minutes); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>

<h3 id="Date-prototype-getSeconds"><a href="#Date-prototype-getSeconds" class="headerlink" title="Date.prototype.getSeconds"></a>Date.prototype.getSeconds</h3><p>초(0 ~ 59)를 나타내는 정수를 반환한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">const</span> seconds = today.getSeconds();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(today);</span><br><span class="line"><span class="comment">// Thu May 16 2019 17:53:17 GMT+0900 (한국 표준시)</span></span><br><span class="line"><span class="built_in">console</span>.log(seconds); <span class="comment">// 17</span></span><br></pre></td></tr></table></figure>

<h3 id="Date-prototype-setSeconds"><a href="#Date-prototype-setSeconds" class="headerlink" title="Date.prototype.setSeconds"></a>Date.prototype.setSeconds</h3><p>초(0 ~ 59)를 나타내는 정수를 설정한다. 초 이외 밀리초도 설정할 수 있다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">dateObj.setSeconds(second[, ms])</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 초 지정</span></span><br><span class="line">today.setSeconds(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> seconds = today.getSeconds();</span><br><span class="line"><span class="built_in">console</span>.log(today);</span><br><span class="line"><span class="comment">// Thu May 16 2019 17:54:30 GMT+0900 (한국 표준시)</span></span><br><span class="line"><span class="built_in">console</span>.log(seconds); <span class="comment">// 30</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 초/밀리초 지정</span></span><br><span class="line">today.setSeconds(<span class="number">10</span>, <span class="number">0</span>); <span class="comment">// HH:MM:10:000</span></span><br><span class="line"></span><br><span class="line">seconds = today.getSeconds();</span><br><span class="line"><span class="built_in">console</span>.log(today);</span><br><span class="line"><span class="comment">// Thu May 16 2019 17:54:10 GMT+0900 (한국 표준시)</span></span><br><span class="line"><span class="built_in">console</span>.log(seconds); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>

<h3 id="Date-prototype-getMilliseconds"><a href="#Date-prototype-getMilliseconds" class="headerlink" title="Date.prototype.getMilliseconds"></a>Date.prototype.getMilliseconds</h3><p>밀리초(0 ~ 999)를 나타내는 정수를 반환한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">const</span> ms = today.getMilliseconds();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(today);</span><br><span class="line"><span class="comment">// Thu May 16 2019 17:55:02 GMT+0900 (한국 표준시)</span></span><br><span class="line"><span class="built_in">console</span>.log(ms); <span class="comment">// 905</span></span><br></pre></td></tr></table></figure>

<h3 id="Date-prototype-setMilliseconds"><a href="#Date-prototype-setMilliseconds" class="headerlink" title="Date.prototype.setMilliseconds"></a>Date.prototype.setMilliseconds</h3><p>밀리초(0 ~ 999)를 나타내는 정수를 설정한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 밀리초 지정</span></span><br><span class="line">today.setMilliseconds(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ms = today.getMilliseconds();</span><br><span class="line"><span class="built_in">console</span>.log(today);</span><br><span class="line"><span class="comment">// Thu May 16 2019 17:55:45 GMT+0900 (한국 표준시)</span></span><br><span class="line"><span class="built_in">console</span>.log(ms); <span class="comment">// 123</span></span><br></pre></td></tr></table></figure>

<h3 id="Date-prototype-getTime"><a href="#Date-prototype-getTime" class="headerlink" title="Date.prototype.getTime"></a>Date.prototype.getTime</h3><p>1970년 1월 1일 00:00:00(UTC)를 기점으로 현재 시간까지 경과된 밀리초를 반환한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">const</span> time = today.getTime();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(today);</span><br><span class="line"><span class="comment">// Thu May 16 2019 17:56:08 GMT+0900 (한국 표준시)</span></span><br><span class="line"><span class="built_in">console</span>.log(time); <span class="comment">// 1557996968335</span></span><br></pre></td></tr></table></figure>

<h3 id="Date-prototype-setTime"><a href="#Date-prototype-setTime" class="headerlink" title="Date.prototype.setTime"></a>Date.prototype.setTime</h3><p>1970년 1월 1일 00:00:00(UTC)를 기점으로 현재 시간까지 경과된 밀리초를 설정한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">dateObj.setTime(time)</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="comment">// 1970년 1월 1일 00:00:00(UTC)를 기점으로 현재 시간까지 경과된 밀리초 지정</span></span><br><span class="line">today.setTime(<span class="number">86400000</span>); <span class="comment">// 86400000 === 1day</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> time = today.getTime();</span><br><span class="line"><span class="built_in">console</span>.log(today);</span><br><span class="line"><span class="comment">// Fri Jan 02 1970 09:00:00 GMT+0900 (한국 표준시)</span></span><br><span class="line"><span class="built_in">console</span>.log(time);  <span class="comment">// 86400000</span></span><br></pre></td></tr></table></figure>

<h3 id="Date-prototype-getTimezoneOffset"><a href="#Date-prototype-getTimezoneOffset" class="headerlink" title="Date.prototype.getTimezoneOffset"></a>Date.prototype.getTimezoneOffset</h3><p>UTC와 지정 로케일(Locale) 시간과의 차이를 분단위로 반환한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">const</span> x = today.getTimezoneOffset() / <span class="number">60</span>; <span class="comment">// -9</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(today);</span><br><span class="line"><span class="comment">// Thu May 16 2019 17:58:13 GMT+0900 (한국 표준시)</span></span><br><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">// -9</span></span><br></pre></td></tr></table></figure>

<h3 id="Date-prototype-toDateString"><a href="#Date-prototype-toDateString" class="headerlink" title="Date.prototype.toDateString"></a>Date.prototype.toDateString</h3><p>사람이 읽을 수 있는 형식의 문자열로 날짜를 반환한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;2019/5/16/18:30&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(d.toString());</span><br><span class="line"><span class="comment">// Thu May 16 2019 18:30:00 GMT+0900 (한국 표준시)</span></span><br><span class="line"><span class="built_in">console</span>.log(d.toDateString()); <span class="comment">// Thu May 16 2019</span></span><br></pre></td></tr></table></figure>

<h3 id="Date-prototype-toTimeString"><a href="#Date-prototype-toTimeString" class="headerlink" title="Date.prototype.toTimeString"></a>Date.prototype.toTimeString</h3><p>사람이 읽을 수 있는 형식의 문자열로 시간을 반환한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;2019/5/16/18:30&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(d.toString());</span><br><span class="line"><span class="comment">// Thu May 16 2019 18:30:00 GMT+0900 (한국 표준시)</span></span><br><span class="line"><span class="built_in">console</span>.log(d.toTimeString());</span><br><span class="line"><span class="comment">// 18:30:00 GMT+0900 (한국 표준시)</span></span><br></pre></td></tr></table></figure>

<h2 id="Date-객체의-형변환"><a href="#Date-객체의-형변환" class="headerlink" title="Date 객체의 형변환"></a>Date 객체의 형변환</h2><p><code>Date</code> 객체의 자료형은 객체이며Number로 변환한 값은 <code>getTime()</code> 메소드를 활용한 것과 같은 수치이다. 즉 두 <code>Date</code> 객체끼리 사칙연산도 가능하다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">4</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> myDate); <span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(myDate)); <span class="comment">// Thu May 18 2017 00:00:00 GMT+0900 (Korean Standard Time)</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(myDate)); <span class="comment">// 1495033200000</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(myDate)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><em><strong>사칙연산 예시</strong></em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myDate1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">4</span>, <span class="number">18</span>);</span><br><span class="line"><span class="keyword">let</span> myDate2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">4</span>, <span class="number">19</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> timeDiff = myDate2 - myDate1;</span><br><span class="line"><span class="built_in">console</span>.log(timeDiff); <span class="comment">// 86400000 (ms)</span></span><br><span class="line"><span class="built_in">console</span>.log(timeDiff / <span class="number">1000</span>); <span class="comment">// 86400 (sec)</span></span><br><span class="line"><span class="built_in">console</span>.log(timeDiff / <span class="number">1000</span> / <span class="number">60</span>) <span class="comment">// 1440 (min)</span></span><br><span class="line"><span class="built_in">console</span>.log(timeDiff / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span>) <span class="comment">// 24 (hour)</span></span><br><span class="line"><span class="built_in">console</span>.log(timeDiff / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>) <span class="comment">// 1 (date)</span></span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://poiemaweb.com/">https://poiemaweb.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>date object</tag>
        <tag>object</tag>
        <tag>built-in object</tag>
        <tag>wrapper object</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 이벤트</title>
    <url>/2020/11/01/js-event/</url>
    <content><![CDATA[<p>브라우저에서 이벤트란 사용자가 버튼을 클릭했을 때나 웹페이지가 로드되었을 때 등을 의미한다. DOM 요소와 관련이 있다. 이벤트 발생 시점이나 순서를 미리 알 수 없으므로 이벤트가 발생했을 때를 감지하고 그에 대응하는 처리를 호출할 수 있어야 한다.</p>
<p>브라우저가 이벤트를 감지하고 통지해주는 과정을 통해 사용자와 웹페이지는 상호작용(Interaction)이 가능해진다. 이벤트가 발생하면 그에 맞는 반응을 해주어야 하기 때문에 이벤트는 일반 함수에 연결된다. 이 함수는 이벤트가 발생되면 실행된다. 이런 함수를 <strong>이벤트 핸들러</strong> 라고 한다.</p>
<a id="more"></a>

<h2 id="이벤트-루프와-동시성"><a href="#이벤트-루프와-동시성" class="headerlink" title="이벤트 루프와 동시성"></a>이벤트 루프와 동시성</h2><p>이벤트는 단일 스레드(single-thread)에서 이벤트 드리븐(event-driven) 방식으로 동작한다. 단일 스레드는 하나의 작업만을 처리할 수 있지만 자바스크립트의 동시성(Concurrency)을 지원하는 것이 이벤트 루프(Event Loop)이다. 동시성(Concurrency)을 지원하기 위해 필요한 비동기 요청(이벤트를 포함) 처리는 자바스크립트 엔진을 구동하는 환경 즉 브라우저(또는 Node.js)가 담당한다.</p>
<blockquote>
<p><strong>Call Stack(호출 스택)</strong><br>작업이 요청되면(함수가 호출되면) 요청된 작업은 순차적으로 Call Stack에 쌓이게 되고 순차적으로 실행된다. 자바스크립트는 단 하나의 Call Stack을 사용하기 때문에 해당 task가 종료하기 전까지는 다른 어떤 task도 수행될 수 없다.</p>
</blockquote>
<blockquote>
<p><strong>Heap</strong><br>동적으로 생성된 객체 인스턴스가 할당되는 영역</p>
</blockquote>
<blockquote>
<p><strong>Event Queue(Task Queue)</strong><br>비동기 처리 함수의 콜백 함수, 비동기식 이벤트 핸들러, Timer 함수(setTimeout(), setInterval())의 콜백 함수가 보관되는 영역으로 이벤트 루프(Event Loop)에 의해 특정 시점(Call Stack이 비어졌을 때)에 순차적으로 Call Stack으로 이동되어 실행된다.</p>
</blockquote>
<blockquote>
<p><strong>Event Loop(이벤트 루프)</strong><br>Call Stack 내에서 현재 실행중인 task가 있는지 그리고 Event Queue에 task가 있는지 반복하여 확인한다. 만약 Call Stack이 비어있다면 Event Queue 내의 task가 Call Stack으로 이동하고 실행된다.</p>
</blockquote>
<h2 id="이벤트의-종류"><a href="#이벤트의-종류" class="headerlink" title="이벤트의 종류"></a>이벤트의 종류</h2><h3 id="UI-Event"><a href="#UI-Event" class="headerlink" title="UI Event"></a>UI Event</h3><table>
<thead>
<tr>
<th>Event</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>load</td>
<td>웹페이지의 로드가 완료되었을 때</td>
</tr>
<tr>
<td>unload</td>
<td>웹페이지가 언로드될 때(주로 새로운 페이지를 요청한 경우)</td>
</tr>
<tr>
<td>error</td>
<td>브라우저가 자바스크립트 오류를 만났거나 요청한 자원이 존재하지 않는 경우</td>
</tr>
<tr>
<td>resize</td>
<td>브라우저 창의 크기를 조절했을 때</td>
</tr>
<tr>
<td>scroll</td>
<td>사용자가 페이지를 위아래로 스크롤할 때</td>
</tr>
<tr>
<td>select</td>
<td>텍스트를 선택했을 때</td>
</tr>
</tbody></table>
<h3 id="Keyboard-Event"><a href="#Keyboard-Event" class="headerlink" title="Keyboard Event"></a>Keyboard Event</h3><table>
<thead>
<tr>
<th>Event</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>keydown</td>
<td>키를 누르고 있을 때</td>
</tr>
<tr>
<td>keyup</td>
<td>누르고 있던 키를 뗄 때</td>
</tr>
<tr>
<td>keypress</td>
<td>키를 누르고 뗐을 때</td>
</tr>
</tbody></table>
<h3 id="Mouse-Event"><a href="#Mouse-Event" class="headerlink" title="Mouse Event"></a>Mouse Event</h3><table>
<thead>
<tr>
<th>Event</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>click</td>
<td>마우스 버튼을 클릭했을 때</td>
</tr>
<tr>
<td>dbclick</td>
<td>마우스 버튼을 더블 클릭했을 때</td>
</tr>
<tr>
<td>mousedown</td>
<td>마우스 버튼을 누르고 있을 때</td>
</tr>
<tr>
<td>mouseup</td>
<td>누르고 있던 마우스 버튼을 뗄 때</td>
</tr>
<tr>
<td>mousemove</td>
<td>마우스를 움직일 때 (터치스크린에서 동작하지 않는다)</td>
</tr>
<tr>
<td>mouseover</td>
<td>마우스를 요소 위로 움직였을 때 (터치스크린에서 동작하지 않는다)</td>
</tr>
<tr>
<td>mouseout</td>
<td>마우스를 요소 밖으로 움직였을 때 (터치스크린에서 동작하지 않는다)</td>
</tr>
</tbody></table>
<h3 id="Focus-Event"><a href="#Focus-Event" class="headerlink" title="Focus Event"></a>Focus Event</h3><table>
<thead>
<tr>
<th>Event</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>focus/focusin</td>
<td>요소가 포커스를 얻었을 때</td>
</tr>
<tr>
<td>blur/foucusout</td>
<td>요소가 포커스를 잃었을 때</td>
</tr>
</tbody></table>
<h3 id="Form-Event"><a href="#Form-Event" class="headerlink" title="Form Event"></a>Form Event</h3><table>
<thead>
<tr>
<th>Event</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>input</td>
<td>input 또는 textarea 요소의 값이 변경되었을 때<br/>contenteditable 어트리뷰트를 가진 요소의 값이 변경되었을 때</td>
</tr>
<tr>
<td>change</td>
<td>select box, checkbox, radio button의 상태가 변경되었을 때</td>
</tr>
<tr>
<td>submit</td>
<td>form을 submit할 때 (버튼 또는 키)</td>
</tr>
<tr>
<td>reset</td>
<td>reset 버튼을 클릭할 때 (최근에는 사용 안함)</td>
</tr>
</tbody></table>
<h3 id="Clipboard-Event"><a href="#Clipboard-Event" class="headerlink" title="Clipboard Event"></a>Clipboard Event</h3><table>
<thead>
<tr>
<th>Event</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>cut</td>
<td>콘텐츠를 잘라내기할 때</td>
</tr>
<tr>
<td>copy</td>
<td>콘텐츠를 복사할 때</td>
</tr>
<tr>
<td>paste</td>
<td>콘텐츠를 붙여넣기할 때</td>
</tr>
</tbody></table>
<h2 id="이벤트-핸들러-등록"><a href="#이벤트-핸들러-등록" class="headerlink" title="이벤트 핸들러 등록"></a>이벤트 핸들러 등록</h2><h3 id="인라인-이벤트-핸들러-방식"><a href="#인라인-이벤트-핸들러-방식" class="headerlink" title="인라인 이벤트 핸들러 방식"></a>인라인 이벤트 핸들러 방식</h3><p>HTML 요소의 이벤트 핸들러 어트리뷰트에 이벤트 핸들러를 등록하는 방법. 이 방식은 더 이상 사용되지 않으며 사용해서도 안된다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;myHandler()&quot;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">myHandler</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      alert(<span class="string">&#x27;Button clicked!&#x27;</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="이벤트-핸들러-프로퍼티-방식"><a href="#이벤트-핸들러-프로퍼티-방식" class="headerlink" title="이벤트 핸들러 프로퍼티 방식"></a>이벤트 핸들러 프로퍼티 방식</h3><p>인라인 이벤트 핸들러 방식처럼 HTML과 Javascript가 뒤섞이는 문제는 해결할 수 있는 방식이다. 하지만 <strong>이벤트 핸들러 프로퍼티에 하나의 이벤트 핸들러만을 바인딩할 수 있다</strong> 는 단점이 있다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.btn&#x27;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 이벤트 핸들러 프로퍼티 방식은 이벤트에 하나의 이벤트 핸들러만을 바인딩할 수 있다</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 첫번째 바인딩된 이벤트 핸들러 =&gt; 실행되지 않는다.</span></span></span><br><span class="line"><span class="javascript">    btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      alert(<span class="string">&#x27;① Button clicked 1&#x27;</span>);</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 두번째 바인딩된 이벤트 핸들러</span></span></span><br><span class="line"><span class="javascript">    btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      alert(<span class="string">&#x27;① Button clicked 2&#x27;</span>);</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// addEventListener 메소드 방식</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 첫번째 바인딩된 이벤트 핸들러</span></span></span><br><span class="line"><span class="javascript">    btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      alert(<span class="string">&#x27;② Button clicked 1&#x27;</span>);</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 두번째 바인딩된 이벤트 핸들러</span></span></span><br><span class="line"><span class="javascript">    btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      alert(<span class="string">&#x27;② Button clicked 2&#x27;</span>);</span></span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="addEventListener-메소드-방식"><a href="#addEventListener-메소드-방식" class="headerlink" title="addEventListener 메소드 방식"></a>addEventListener 메소드 방식</h3><p><code>addEventListener</code> 메소드를 이용하여 대상 DOM 요소에 이벤트를 바인딩하고 해당 이벤트가 발생했을 때 실행될 콜백 함수(이벤트 핸들러)를 지정한다.</p>
<p><em><strong>장점</strong></em></p>
<ul>
<li>하나의 이벤트에 대해 하나 이상의 이벤트 핸들러를 추가할 수 있다.</li>
<li>캡처링과 버블링을 지원한다.</li>
<li>HTML 요소뿐만아니라 모든 DOM 요소(HTML, XML, SVG)에 대해 동작한다. 브라우저는 웹 문서(HTML, XML, SVG)를 로드한 후, 파싱하여 DOM을 생성한다.</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      alert(<span class="string">&#x27;Clicked!&#x27;</span>);</span></span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>addEventListener 메소드는 IE 9 이상에서 동작</li>
<li>IE 8 이하에서는 attachEvent 메소드를 사용</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (elem.addEventListener) &#123;    <span class="comment">// IE 9 ~</span></span><br><span class="line">  elem.addEventListener(<span class="string">&#x27;click&#x27;</span>, func);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (elem.attachEvent) &#123;  <span class="comment">// ~ IE 8</span></span><br><span class="line">  elem.attachEvent(<span class="string">&#x27;onclick&#x27;</span>, func);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="이벤트-핸들러-함수-내부의-this"><a href="#이벤트-핸들러-함수-내부의-this" class="headerlink" title="이벤트 핸들러 함수 내부의 this"></a>이벤트 핸들러 함수 내부의 this</h2><h3 id="인라인-이벤트-핸들러-방식-1"><a href="#인라인-이벤트-핸들러-방식-1" class="headerlink" title="인라인 이벤트 핸들러 방식"></a>인라인 이벤트 핸들러 방식</h3><p>이벤트 핸들러는 일반 함수로서 호출되므로 이벤트 핸들러 내부의 this는 전역 객체 window를 가리킨다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;foo()&quot;</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// window</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="이벤트-핸들러-프로퍼티-방식-1"><a href="#이벤트-핸들러-프로퍼티-방식-1" class="headerlink" title="이벤트 핸들러 프로퍼티 방식"></a>이벤트 핸들러 프로퍼티 방식</h3><p>이벤트 핸들러 프로퍼티 방식에서 이벤트 핸들러는 메소드이므로 이벤트 핸들러 내부의 this는 이벤트에 바인딩된 요소를 가리킨다. 이것은 이벤트 객체의 currentTarget 프로퍼티와 같다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.btn&#x27;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// &lt;button id=&quot;btn&quot;&gt;Button&lt;/button&gt;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      console.log(e.currentTarget); // <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="built_in">this</span> === e.currentTarget); <span class="comment">// true</span></span></span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="addEventListener-메소드-방식-1"><a href="#addEventListener-메소드-방식-1" class="headerlink" title="addEventListener 메소드 방식"></a>addEventListener 메소드 방식</h3><p>addEventListener 메소드에서 지정한 이벤트 핸들러는 콜백 함수이지만 이벤트 핸들러 내부의 this는 이벤트 리스너에 바인딩된 요소(currentTarget)를 가리킨다. 이것은 이벤트 객체의 currentTarget 프로퍼티와 같다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;button <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;btn&quot;</span>&gt;Button&lt;/button&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.btn&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// &lt;button id=&quot;btn&quot;&gt;Button&lt;/button&gt;</span></span><br><span class="line">      <span class="built_in">console</span>.log(e.currentTarget); <span class="comment">// &lt;button id=&quot;btn&quot;&gt;Button&lt;/button&gt;</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span> === e.currentTarget); <span class="comment">// true</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="이벤트의-흐름"><a href="#이벤트의-흐름" class="headerlink" title="이벤트의 흐름"></a>이벤트의 흐름</h2><p>계층적 구조에 포함되어 있는 HTML 요소에 이벤트가 발생하게 되면 연쇄적인 반응이 일어난다. 전파 방향에 따라 버블링(Event Bubbling)과 캡처링(Event Capturing)으로 구분할 수 있다. 버블링과 캡처링은 둘중 하나만 발생하는 것이 아니라 캡처링부터 시작하여 버블링으로 종료한다. 순차적으로 발생한다.</p>
<blockquote>
<p><strong>버블링</strong> : 자식 요소에서 발생한 이벤트가 부모 요소로 전파</p>
</blockquote>
<blockquote>
<p><strong>캡처링</strong> : 자식 요소에서 발생한 이벤트가 부모 요소로부터 시작하여 이벤트를 발생시킨 자식 요소까지 도달</p>
</blockquote>
<p><img src="/images/js_event_flow.jpg" alt="이벤트 흐름"></p>
<h2 id="Event-객체"><a href="#Event-객체" class="headerlink" title="Event 객체"></a>Event 객체</h2><p>event 객체는 이벤트를 발생시킨 요소와 발생한 이벤트에 대한 유용한 정보를 제공한다. 이벤트가 발생하면 event 객체는 동적으로 생성되며 이벤트를 처리할 수 있는 이벤트 핸들러에 인자로 전달된다.</p>
<ul>
<li>event 객체는 이벤트 핸들러에 암묵적으로 전달된다.</li>
<li>벤트 핸들러를 선언할 때, event 객체를 전달받을 첫번째 매개변수를 명시적으로 선언하여야 한다.</li>
<li>다른 매개변수 이름을 사용하여도 상관없다.</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>클릭하세요. 클릭한 곳의 좌표가 표시됩니다.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">em</span> <span class="attr">class</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">showCoords</span>(<span class="params">e</span>) </span>&#123; <span class="comment">// e: event object</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> msg = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.message&#x27;</span>);</span></span><br><span class="line">    msg.innerHTML =</span><br><span class="line"><span class="javascript">      <span class="string">&#x27;clientX value: &#x27;</span> + e.clientX + <span class="string">&#x27;&lt;br&gt;&#x27;</span> +</span></span><br><span class="line"><span class="javascript">      <span class="string">&#x27;clientY value: &#x27;</span> + e.clientY;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  addEventListener(<span class="string">&#x27;click&#x27;</span>, showCoords);</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="Event-Property"><a href="#Event-Property" class="headerlink" title="Event Property"></a>Event Property</h3><p><em><strong>Event.target</strong></em></p>
<p>실제로 이벤트를 발생시킨 요소를 가리킨다.</p>
<p><em><strong>Event.currentTarget</strong></em></p>
<p>이벤트에 바인딩된 DOM 요소를 가리킨다. 즉, addEventListener 앞에 기술된 객체를 가리킨다. addEventListener 메소드에서 지정한 이벤트 핸들러 내부의 this는 이벤트에 바인딩된 DOM 요소를 가리키며 이것은 이벤트 객체의 currentTarget 프로퍼티와 같다. 따라서 이벤트 핸들러 함수 내에서 currentTarget과 this는 언제나 일치한다.</p>
<p><em><strong>Event.type</strong></em></p>
<p>발생한 이벤트의 종류를 나타내는 문자열을 반환한다.</p>
<p><em><strong>Event.cancelable</strong></em></p>
<p>요소의 기본 동작을 취소시킬 수 있는지 여부(true/false)를 나타낸다.</p>
<p><em><strong>Event.eventPhase</strong></em></p>
<p>이벤트 흐름(event flow) 상에서 어느 단계(event phase)에 있는지를 반환한다.</p>
<table>
<thead>
<tr>
<th>반환값</th>
<th>의미</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>이벤트 없음</td>
</tr>
<tr>
<td>1</td>
<td>캡쳐링 단계</td>
</tr>
<tr>
<td>2</td>
<td>타깃</td>
</tr>
<tr>
<td>3</td>
<td>버블링 단계</td>
</tr>
</tbody></table>
<h3 id="Event-Delegation-이벤트-위임"><a href="#Event-Delegation-이벤트-위임" class="headerlink" title="Event Delegation (이벤트 위임)"></a>Event Delegation (이벤트 위임)</h3><p>이벤트 위임(Event Delegation)은 다수의 자식 요소에 각각 이벤트 핸들러를 바인딩하는 대신 하나의 부모 요소에 이벤트 핸들러를 바인딩하는 방법이다. 또한 DOM 트리에 새로운 자식 요소를 추가하더라도 이벤트 처리는 부모 요소에 위임되었기 때문에 새로운 요소에 이벤트를 핸들러를 다시 바인딩할 필요가 없다. 이는 이벤트가 이벤트 흐름에 의해 이벤트를 발생시킨 요소의 부모 요소에도 영향(버블링)을 미치기 때문에 가능한 것이다. 실제로 이벤트를 발생시킨 요소를 알아내기 위해서는 <code>Event.target</code>을 사용한다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;post-list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;post-1&quot;</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;post-2&quot;</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;post-3&quot;</span>&gt;</span>Item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;post-4&quot;</span>&gt;</span>Item 4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;post-5&quot;</span>&gt;</span>Item 5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;post-6&quot;</span>&gt;</span>Item 6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> msg = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.msg&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> list = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.post-list&#x27;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    list.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 이벤트를 발생시킨 요소</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;[target]: &#x27;</span> + e.target);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 이벤트를 발생시킨 요소의 nodeName</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;[target.nodeName]: &#x27;</span> + e.target.nodeName);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">// li 요소 이외의 요소에서 발생한 이벤트는 대응하지 않는다.</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (e.target &amp;&amp; e.target.nodeName === <span class="string">&#x27;LI&#x27;</span>) &#123;</span></span><br><span class="line"><span class="javascript">        msg.innerHTML = <span class="string">&#x27;li#&#x27;</span> + e.target.id + <span class="string">&#x27; was clicked!&#x27;</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="기본-동작의-변경"><a href="#기본-동작의-변경" class="headerlink" title="기본 동작의 변경"></a>기본 동작의 변경</h2><p>이벤트 객체는 요소의 기본 동작과 요소의 부모 요소들이 이벤트에 대응하는 방법을 변경하기 위한 메소드는 가지고 있다.</p>
<h3 id="Event-preventDefault"><a href="#Event-preventDefault" class="headerlink" title="Event.preventDefault()"></a>Event.preventDefault()</h3><p>요소가 가지고 있는 기본 동작을 중단시키기 위한 메소드이다.</p>
<h3 id="Event-stopPropagation"><a href="#Event-stopPropagation" class="headerlink" title="Event.stopPropagation()"></a>Event.stopPropagation()</h3><p>어느 한 요소를 이용하여 이벤트를 처리한 후 이벤트가 부모 요소로 이벤트가 전파되는 것을 중단시키기 위한 메소드이다. 부모 요소에 동일한 이벤트에 대한 다른 핸들러가 지정되어 있을 경우 사용된다.</p>
<h3 id="preventDefault-amp-stopPropagation"><a href="#preventDefault-amp-stopPropagation" class="headerlink" title="preventDefault &amp; stopPropagation"></a>preventDefault &amp; stopPropagation</h3><p>기본 동작의 중단과 버블링 또는 캡처링의 중단을 동시에 실시하는 방법(<code>return false;</code>)은 아래와 같다. jQuery를 사용할 때와 아래와 같이 사용할 때만 적용된다.  기본 동작의 중단과 이벤트 흐름의 중단 모두 적용되므로 이 두가지 중 하나만 중단하기 원하는 경우는 <code>preventDefault()</code> 또는 <code>stopPropagation()</code> 메소드를 개별적으로 사용한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.google.com&quot;</span> <span class="attr">onclick</span>=<span class="string">&#x27;return handleEvent()&#x27;</span>&gt;</span>go<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">handleEvent</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://poiemaweb.com/">https://poiemaweb.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>event</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 문서 객체 모델</title>
    <url>/2020/10/11/js-dom/</url>
    <content><![CDATA[<p>텍스트 파일로 만들어져 있는 웹문서는 브라우저가 이해할 수 있는 구조이어야 한다. 브라우저의 렌더링 엔진은 문서를 로드하고 파싱하여 웹문서를 브라우저가 이해할 수 있는 구조로 구성한다.</p>
<a id="more"></a>

<h2 id="DOM-Document-Object-Model"><a href="#DOM-Document-Object-Model" class="headerlink" title="DOM (Document Object Model)"></a>DOM (Document Object Model)</h2><p><strong>DOM</strong>: 모든 요소와 요소의 어트리뷰트, 텍스트를 각각 객체로 만들고 이들 객체를 부자 관계를 표현할 수 있는 트리 구조로 구성한 것. 자바스크립트를 통해 동적으로 변경 가능하다. 렌더링에 반영 가능. ECMAScript에서 정의한 표준이 아닌 별개의 W3C의 공식 표준이다.</p>
<p><strong>DOM API</strong>(Application Programming Interface): 일반적으로 프로퍼티와 메소드를 갖고 있는 자바스크립트 객체의 집합 형태로, DOM에게 접근하고 수정할 수 있는 방법.</p>
<p><em><strong>DOM이 담당하고 있는 기능</strong></em></p>
<ol>
<li><p><strong>HTML 문서에 대한 모델 구성</strong>: 브라우저는 HTML 문서를 로드한 후 해당 문서에 대한 모델을 메모리에 생성한다. 이때 모델은 객체의 트리(DOM tree)로 구성된다.</p>
</li>
<li><p><strong>HTML 문서 내의 각 요소에 접근 / 수정</strong>: DOM은 모델 내의 각 객체에 접근하고 수정할 수 있는 프로퍼티와 메소드를 따로 제공하며, DOM이 수정되면 브라우저를 통해 변경된 사항을 보여준다.</p>
</li>
</ol>
<h2 id="DOM-TREE"><a href="#DOM-TREE" class="headerlink" title="DOM TREE"></a>DOM TREE</h2><ul>
<li>브라우저가 HTML 문서 를로드한 후에 파싱하여 생성하는 모델이다.</li>
<li>객체의 트리로 구조화되어 있다.</li>
<li>모든 요소, 어트리뷰트, 텍스트는 하나의 객체이며 Document 객체의 자식이다.</li>
<li>요소의 중첩관계는 객체의 트리로구조화한다. (부자의관계를 표현해준다.)</li>
<li>DOM tree의 진입점(Entry point)는 dcoument 객체이다.</li>
<li>DOM tree의 최종점은 요소의 텍스트를 나타내는 객체이다.</li>
<li>DOM tree를 <code>크롬 브라우저 - 개발자 도구 - Elements - properties</code>에서 확인할 수 있다.</li>
</ul>
<p><em><strong>DOM tree를 구성하고 있는 노드</strong></em></p>
<ol>
<li><p><strong>문서 노드 (Document Node)</strong>: 트리의 최상위에 존재. 각각의 요소나 어트리뷰트, 텍스트 노드에 접근하기 위해서는 문서 노드를 통해서만 가능하다. DOM tree에 접근하기 위한 시작점.</p>
</li>
<li><p><strong>요소 노드 (Element Node)</strong>: HTML 요소를 표현한다. 중첩에 의해 부자 관계를 가진다. 부자 관계를 통해서 정보를 구조화하기 때문에 문서의 구조를 서술한다. 어트리뷰트, 텍스트 노드에 접근하려면 요소 노드에 먼저 접근하여야 한다.</p>
</li>
<li><p><strong>어트리뷰트 노드 (Attribute Node)</strong>: HTML의 어트리뷰트를 표현한다. 지정된 요소의 자식이 아니라  해당 요소의 일부이다. 해당 요소의 노드를 찾아 접근하면 어트리뷰트를 참조하고 수정할 수 있다.</p>
</li>
<li><p><strong>텍스트 노드(Text Node)</strong>: HTML 요소의 텍스트를 표현한다. 요소 노드의 자식이며 자식노드를 가질 수 없으므로 DOM tree의 최종단이다.</p>
</li>
</ol>
<p><em><strong>DOM을 통해 웹페이지를 조작하기 위한 수순</strong></em></p>
<ul>
<li>조작하고자 하는 요소를 선택 및 탐색</li>
<li>선택된 요소의 컨텐츠나 어트리뷰트를 조작</li>
</ul>
<h2 id="DOM-Query-Traversing-요소에의-접근"><a href="#DOM-Query-Traversing-요소에의-접근" class="headerlink" title="DOM Query / Traversing (요소에의 접근)"></a>DOM Query / Traversing (요소에의 접근)</h2><h3 id="하나의-요소-노드-선택-DOM-Query"><a href="#하나의-요소-노드-선택-DOM-Query" class="headerlink" title="하나의 요소 노드 선택(DOM Query)"></a>하나의 요소 노드 선택(DOM Query)</h3><p><em><strong>document.getElementById(id)</strong></em></p>
<ul>
<li>id 어트리뷰트 값으로 요소 노드를 하나 선택한다. 여러 개가 선택된 경우, 첫번째 요소만 반환.</li>
<li>Return: HTMLElement를 상속받은 객체</li>
<li>모든 브라우저에서 동작한다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// id로 하나의 요소를 선택한다.</span></span><br><span class="line"><span class="keyword">const</span> elem = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;one&#x27;</span>);</span><br><span class="line"><span class="comment">// 클래스 어트리뷰트의 값을 변경한다.</span></span><br><span class="line">elem.className = <span class="string">&#x27;blue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(elem); <span class="comment">// &lt;li id=&quot;one&quot; class=&quot;blue&quot;&gt;Seoul&lt;/li&gt;</span></span><br></pre></td></tr></table></figure>


<p><em><strong>document.querySelector(cssSelector)</strong></em></p>
<ul>
<li>CSS 셀렉터를 사용하여 요소 노드를 하나 선택한다. 여러 개가 선택된 경우, 첫번째 요소만 반환.</li>
<li>Return: HTMLElement를 상속받은 객체</li>
<li>IE8 이상의 브라우저에서 동작</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CSS 셀렉터를 이용해 요소를 선택한다</span></span><br><span class="line"><span class="keyword">const</span> elem = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;li.red&#x27;</span>);</span><br><span class="line"><span class="comment">// 클래스 어트리뷰트의 값을 변경한다</span></span><br><span class="line">elem.className = <span class="string">&#x27;blue&#x27;</span>;</span><br></pre></td></tr></table></figure>


<h3 id="여러-개의-요소-노드-선택-DOM-Query"><a href="#여러-개의-요소-노드-선택-DOM-Query" class="headerlink" title="여러 개의 요소 노드 선택(DOM Query)"></a>여러 개의 요소 노드 선택(DOM Query)</h3><p><em><strong>document.getElementsByClassName(class)</strong></em></p>
<ul>
<li>class 어트리뷰트 값으로 요소 노드를 모두 선택한다. 공백으로 구분하여 여러 개의 class를 지정할 수 있다.</li>
<li>Return: HTMLCollection (live) → 유사배열(array-like object). 실시간으로 Node의 상태 변경을 반영한다.</li>
<li>IE9 이상의 브라우저에서 동작</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTMLCollection을 반환한다. HTMLCollection은 live하다.</span></span><br><span class="line"><span class="keyword">const</span> elems = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;red&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; elems.length; i++) &#123;</span><br><span class="line">  <span class="comment">// 클래스 어트리뷰트의 값을 변경한다.</span></span><br><span class="line">  elems[i].className = <span class="string">&#x27;blue&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<details>
<summary><b>두번째 요소만 클래스 변경이 되지 않는 이유</b></summary>
<div markdown="1">

<ol>
<li><p>i가 0일때, elems의 첫 요소(<code>li#one.red</code>)의 class 어트리뷰트의 값이 <code>className</code> 프로퍼티에 의해 red에서 blue로 변경된다. 이때 elems는 실시간으로 Node의 상태 변경을 반영하는 HTMLCollection 객체이다. elems의 첫 요소는 <code>li#one.red</code>에서 <code>li#one.blue</code>로 변경되었으므로 <code>getElementsByClassName</code> 메소드의 인자로 지정한 선택 조건(‘red’)과 더이상 부합하지 않게 되어 반환값에서 실시간으로 제거된다.</p>
</li>
<li><p>i가 1일때, elems에서 첫째 요소는 제거되었으므로 elems[1]은 3번째 요소(<code>li#three.red</code>)가 된다. <code>li#three.red</code>의 class 어트리뷰트 값이 blue로 변경되고 마찬가지로 HTMLCollection에서 제외된다.</p>
</li>
<li><p>i가 2일때, HTMLCollection의 1, 3번째 요소가 실시간으로 제거되었으므로 2번째 요소(<code>li#two.red</code>)만 남았다. 이때 elems.length는 1이므로 for 문의 조건식 <code>i &lt; elems.length</code>가 <code>false</code>로 평가되어 반복을 종료한다. 따라서 elems에 남아 있는 2번째 li 요소(<code>li#two.red</code>)의 class 값은 변경되지 않는다.</p>
</div>
</details></li>
</ol>
<details>
<summary><b>해결방안</b></summary>

<div markdown="1">

<p>1.반복문을 역방향으로 돌린다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> elems = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;red&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = elems.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">  elems[i].className = <span class="string">&#x27;blue&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>while 반복문을 사용한다. 이때 elems에 요소가 남아 있지 않을 때까지 반복하기 위해 index는 0으로 고정한다.</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> elems = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;red&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (elems.length &gt; i) &#123; <span class="comment">// elems에 요소가 남아 있지 않을 때까지 무한반복</span></span><br><span class="line">  elems[i].className = <span class="string">&#x27;blue&#x27;</span>;</span><br><span class="line">  <span class="comment">// i++;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>HTMLCollection을 배열로 변경한다. (권장)</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> elems = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;red&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 배열로 변환된 HTMLCollection은 더 이상 live하지 않다.</span></span><br><span class="line"><span class="built_in">console</span>.log([...elems]); <span class="comment">// [li#one.red, li#two.red, li#three.red]</span></span><br><span class="line"></span><br><span class="line">[...elems].forEach(<span class="function"><span class="params">elem</span> =&gt;</span> elem.className = <span class="string">&#x27;blue&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><code>querySelectorAll</code> 메소드를 사용하여 HTMLCollection(live)이 아닌 NodeList(non-live)를 반환하게 한다.</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// querySelectorAll는 Nodelist(non-live)를 반환한다. IE8+</span></span><br><span class="line"><span class="keyword">const</span> elems = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.red&#x27;</span>);</span><br><span class="line"></span><br><span class="line">[...elems].forEach(<span class="function"><span class="params">elem</span> =&gt;</span> elem.className = <span class="string">&#x27;blue&#x27;</span>);</span><br></pre></td></tr></table></figure>
</div>
</details>

<p><em><strong>document.getElementsByTagName(tagName)</strong></em></p>
<ul>
<li>태그명으로 요소 노드를 모두 선택한다.</li>
<li>Return: HTMLCollection (live)</li>
<li>모든 브라우저에서 동작</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTMLCollection을 반환한다.</span></span><br><span class="line"><span class="keyword">const</span> elems = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line"></span><br><span class="line">[...elems].forEach(<span class="function"><span class="params">elem</span> =&gt;</span> elem.className = <span class="string">&#x27;blue&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><em><strong>document.querySelectorAll(selector)</strong></em></p>
<ul>
<li>지정된 CSS 선택자를 사용하여 요소 노드를 모두 선택한다.</li>
<li>Return: NodeList (non-live)</li>
<li>IE8 이상의 브라우저에서 동작</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Nodelist를 반환한다.</span></span><br><span class="line"><span class="keyword">const</span> elems = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;li.red&#x27;</span>);</span><br><span class="line"></span><br><span class="line">[...elems].forEach(<span class="function"><span class="params">elem</span> =&gt;</span> elem.className = <span class="string">&#x27;blue&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="DOM-Traversing-탐색"><a href="#DOM-Traversing-탐색" class="headerlink" title="DOM Traversing (탐색)"></a>DOM Traversing (탐색)</h3><p><em><strong>parentNode</strong></em></p>
<ul>
<li>부모 노드를 탐색한다.</li>
<li>Return: HTMLElement를 상속받은 객체</li>
<li>모든 브라우저에서 동작</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> elem = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#two&#x27;</span>);</span><br><span class="line"></span><br><span class="line">elem.parentNode.className = <span class="string">&#x27;blue&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><em><strong>firstChild, lastChild</strong></em></p>
<ul>
<li>자식 노드를 탐색한다.</li>
<li>Return: HTMLElement를 상속받은 객체</li>
<li>IE9 이상의 브라우저에서 동작</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">- <span class="keyword">const</span> elem = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// first Child</span></span><br><span class="line">elem.firstChild.className = <span class="string">&#x27;blue&#x27;</span>;</span><br><span class="line"><span class="comment">// last Child</span></span><br><span class="line">elem.lastChild.className = <span class="string">&#x27;blue&#x27;</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>예상대로 동작하지 않는 이유</strong>:  IE를 제외한 대부분의 브라우저들은 요소 사이의 공백 또는 줄바꿈 문자를 텍스트 노드로 취급한다.</p>
</blockquote>
<details>
<summary><b>해결방안</b></summary>
<div markdown="1">

<ol>
<li>HTML의 공백을 제거한다.</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&lt;li</span><br><span class="line">  id=&#x27;one&#x27; class=&#x27;red&#x27;&gt;Seoul<span class="tag">&lt;/<span class="name">li</span>&gt;</span>&lt;li</span><br><span class="line">  id=&#x27;two&#x27; class=&#x27;red&#x27;&gt;London<span class="tag">&lt;/<span class="name">li</span>&gt;</span>&lt;li</span><br><span class="line">  id=&#x27;three&#x27; class=&#x27;red&#x27;&gt;Newyork<span class="tag">&lt;/<span class="name">li</span>&gt;</span>&lt;li</span><br><span class="line">  id=&#x27;four&#x27;&gt;Tokyo<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p><code>firstElementChild</code>, <code>lastElementChild</code>를 사용한다.  IE9 이상에서 정상 동작한다.</p>
</li>
<li><p>jQuery: <code>.prev()</code>와 jQuery: <code>.next()</code>를 사용</p>
</div>
</details></li>
</ol>
<p><em><strong>hasChildNodes()</strong></em></p>
<ul>
<li>자식 노드가 있는지 확인후에 <code>Boolean</code> 값을 반환</li>
<li>Return: Boolean 값</li>
<li>모든 브라우저에서 동작</li>
</ul>
<p><em><strong>childNodes</strong></em></p>
<ul>
<li>자식 노드의 컬렉션을 반환</li>
<li>텍스트 요소를 포함한 모든 자식 요소를 반환</li>
<li>Return: NodeList (non-live)</li>
<li>모든 브라우저에서 동작</li>
</ul>
<p><em><strong>children</strong></em></p>
<ul>
<li>자식 노드의 컬렉션을 반환</li>
<li>자식 요소 중에서 Element type 요소만을 반환</li>
<li>Return: HTMLCollection (live)</li>
<li>IE9 이상의 브라우저에서 동작</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> elem = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (elem.hasChildNodes()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(elem.childNodes);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// NodeList(9) [text, li#one.red, text, li#two.red, text,</span></span><br><span class="line">  <span class="comment">// li#three.red, text, li#four, text]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(elem.children);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// HTMLCollection(4) [li#one.red, li#two.red, li#three.red, li#four,</span></span><br><span class="line">  <span class="comment">// one: li#one.red, two: li#two.red, three: li#three.red, four: li#four]</span></span><br><span class="line">  [...elem.children].forEach(<span class="function"><span class="params">el</span> =&gt;</span> <span class="built_in">console</span>.log(el.nodeType));</span><br><span class="line">  <span class="comment">// 1 (=&gt; Element node)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>previousSibling, nextSibling</strong></em></p>
<ul>
<li>형제 노드를 탐색</li>
<li>text node를 포함한 모든 형제 노드를 탐색</li>
<li>Return: HTMLElement를 상속받은 객체</li>
<li>모든 브라우저에서 동작</li>
</ul>
<p><em><strong>previousElementSibling, nextElementSibling</strong></em></p>
<ul>
<li>형제 노드를 탐색</li>
<li>형제 노드 중에서 Element type 요소만을 탐색</li>
<li>Return: HTMLElement를 상속받은 객체</li>
<li>IE9 이상의 브라우저에서 동작</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> elem = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line"></span><br><span class="line">elem.firstElementChild.nextElementSibling.className = <span class="string">&#x27;blue&#x27;</span>;</span><br><span class="line"></span><br><span class="line">elem.firstElementChild.nextElementSibling.</span><br><span class="line">previousElementSibling.className = <span class="string">&#x27;blue&#x27;</span>;</span><br></pre></td></tr></table></figure>


<h2 id="DOM-Manipulation-조작"><a href="#DOM-Manipulation-조작" class="headerlink" title="DOM Manipulation (조작)"></a>DOM Manipulation (조작)</h2><h3 id="텍스트-노드에의-접근-수정"><a href="#텍스트-노드에의-접근-수정" class="headerlink" title="텍스트 노드에의 접근/수정"></a>텍스트 노드에의 접근/수정</h3><p>요소의 텍스트는 텍스트 노드에 저장되어 있다. 텍스트 노드에 접근하는 순서는 다음과 같다.</p>
<ul>
<li>해당 텍스트 노드의 부모 노드를 선택한다. 텍스트 노드는 요소 노드의 자식이다.</li>
<li>firstChild 프로퍼티를 사용하여 텍스트 노드를 탐색한다.</li>
<li>텍스트 노드의 유일한 프로퍼티(<code>nodeValue</code>)를 이용하여 텍스트를 취득한다.</li>
<li><code>nodeValue</code>를 이용하여 텍스트를 수정한다.</li>
<li><code>nodeName</code>, <code>nodeType</code>을 통해 노드의 정보를 취득할 수 있다.</li>
</ul>
<p><em><strong>nodeValue</strong></em></p>
<ul>
<li>노드의 값을 반환한다.</li>
<li>Return: 텍스트 노드의 경우는 문자열, 요소 노드의 경우 <code>null</code> 반환</li>
<li>IE6 이상의 브라우저에서 동작한다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 해당 텍스트 노드의 부모 요소 노드를 선택한다.</span></span><br><span class="line"><span class="keyword">const</span> one = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;one&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.dir(one); <span class="comment">// HTMLLIElement: li#one.red</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// nodeName, nodeType을 통해 노드의 정보를 취득할 수 있다.</span></span><br><span class="line"><span class="built_in">console</span>.log(one.nodeName); <span class="comment">// LI</span></span><br><span class="line"><span class="built_in">console</span>.log(one.nodeType); <span class="comment">// 1: Element node</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// firstChild 프로퍼티를 사용하여 텍스트 노드를 탐색한다.</span></span><br><span class="line"><span class="keyword">const</span> textNode = one.firstChild;</span><br><span class="line"></span><br><span class="line"><span class="comment">// nodeName, nodeType을 통해 노드의 정보를 취득할 수 있다.</span></span><br><span class="line"><span class="built_in">console</span>.log(textNode.nodeName); <span class="comment">// #text</span></span><br><span class="line"><span class="built_in">console</span>.log(textNode.nodeType); <span class="comment">// 3: Text node</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// nodeValue 프로퍼티를 사용하여 노드의 값을 취득한다.</span></span><br><span class="line"><span class="built_in">console</span>.log(textNode.nodeValue); <span class="comment">// Seoul</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// nodeValue 프로퍼티를 이용하여 텍스트를 수정한다.</span></span><br><span class="line">textNode.nodeValue = <span class="string">&#x27;Pusan&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="어트리뷰트-노드에의-접근-수정"><a href="#어트리뷰트-노드에의-접근-수정" class="headerlink" title="어트리뷰트 노드에의 접근/수정"></a>어트리뷰트 노드에의 접근/수정</h3><p>어트리뷰트 노드을 조작할 때 다음 프로퍼티 또는 메소드를 사용할 수 있다.</p>
<p><em><strong>className</strong></em></p>
<ul>
<li>class 어트리뷰트의 값을 취득 또는 변경한다. <code>className</code> 프로퍼티에 값을 할당하는 경우, class 어트리뷰트가 존재하지 않으면 class 어트리뷰트를 생성하고 지정된 값을 설정한다.</li>
<li>class 어트리뷰트의 값이 여러 개일 경우, 공백으로 구분된 문자열이 반환되므로 String 메소드 <code>split(&#39; &#39;)</code>를 사용하여 배열로 변경하여 사용한다.</li>
<li>모든 브라우저에서 동작한다.</li>
</ul>
<p><em><strong>classList</strong></em></p>
<ul>
<li><code>add</code>, <code>remove</code>, <code>item</code>, <code>toggle</code>, <code>contains</code>, <code>replace</code> 메소드를 제공한다.</li>
<li>IE10 이상의 브라우저에서 동작한다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> elems = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// className</span></span><br><span class="line">[...elems].forEach(<span class="function"><span class="params">elem</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// class 어트리뷰트 값을 취득하여 확인</span></span><br><span class="line">  <span class="keyword">if</span> (elem.className === <span class="string">&#x27;red&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// class 어트리뷰트 값을 변경한다.</span></span><br><span class="line">    elem.className = <span class="string">&#x27;blue&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// classList</span></span><br><span class="line">[...elems].forEach(<span class="function"><span class="params">elem</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// class 어트리뷰트 값 확인</span></span><br><span class="line">  <span class="keyword">if</span> (elem.classList.contains(<span class="string">&#x27;blue&#x27;</span>)) &#123;</span><br><span class="line">    <span class="comment">// class 어트리뷰트 값 변경한다.</span></span><br><span class="line">    elem.classList.replace(<span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;red&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><em><strong>id</strong></em></p>
<ul>
<li>id 어트리뷰트의 값을 취득 또는 변경한다.</li>
<li>id 프로퍼티에 값을 할당하는 경우, id 어트리뷰트가 존재하지 않으면 id 어트리뷰트를 생성하고 지정된 값을 설정한다.</li>
<li>모든 브라우저에서 동작한다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// h1 태그 요소 중 첫번째 요소를 취득</span></span><br><span class="line"><span class="keyword">const</span> heading = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;h1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.dir(heading); <span class="comment">// HTMLHeadingElement: h1</span></span><br><span class="line"><span class="built_in">console</span>.log(heading.firstChild.nodeValue); <span class="comment">// Cities</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// id 어트리뷰트의 값을 변경.</span></span><br><span class="line"><span class="comment">// id 어트리뷰트가 존재하지 않으면 id 어트리뷰트를 생성하고 지정된 값을 설정</span></span><br><span class="line">heading.id = <span class="string">&#x27;heading&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(heading.id); <span class="comment">// heading</span></span><br></pre></td></tr></table></figure>

<p><em><strong>hasAttribute(attribute)</strong></em></p>
<ul>
<li>지정한 어트리뷰트를 가지고 있는지 검사한다.</li>
<li>Return : Boolean</li>
<li>IE8 이상의 브라우저에서 동작한다.</li>
</ul>
<p><em><strong>getAttribute(attribute)</strong></em></p>
<ul>
<li>어트리뷰트의 값을 취득한다.</li>
<li>Return : 문자열</li>
<li>모든 브라우저에서 동작한다.</li>
</ul>
<p><em><strong>setAttribute(attribute, value)</strong></em></p>
<ul>
<li>어트리뷰트와 어트리뷰트 값을 설정한다.</li>
<li>Return : undefined</li>
<li>모든 브라우저에서 동작한다.</li>
</ul>
<p><em><strong>removeAttribute(attribute)</strong></em></p>
<ul>
<li>지정한 어트리뷰트를 제거한다.</li>
<li>Return : undefined</li>
<li>모든 브라우저에서 동작한다.</li>
</ul>
<h3 id="HTML-콘텐츠-조작-Manipulation"><a href="#HTML-콘텐츠-조작-Manipulation" class="headerlink" title="HTML 콘텐츠 조작(Manipulation)"></a>HTML 콘텐츠 조작(Manipulation)</h3><p>HTML 콘텐츠를 조작(Manipulation)하기 위해 아래의 프로퍼티 또는 메소드를 사용할 수 있다. 마크업이 포함된 콘텐츠를 추가하는 행위는 크로스 스크립팅 공격(XSS: Cross-Site Scripting Attacks)에 취약하므로 주의가 필요하다.</p>
<p><em><strong>textContent</strong></em></p>
<ul>
<li>요소의 텍스트 콘텐츠를 취득 또는 변경한다. 이때 마크업은 무시된다.</li>
<li>textContent를 통해 요소에 새로운 텍스트를 할당하면 텍스트를 변경할 수 있다. 이때 순수한 텍스트만 지정해야 하며 마크업을 포함시키면 문자열로 인식되어 그대로 출력된다.</li>
<li>IE9 이상의 브라우저에서 동작한다.</li>
</ul>
<p><em><strong>innerText</strong></em></p>
<p><code>innerText</code> 프로퍼티를 사용하여도 요소의 텍스트 콘텐츠에만 접근할 수 있다. 하지만 아래의 이유로 사용하지 않는 것이 좋다.</p>
<ul>
<li>비표준이다.</li>
<li>CSS에 순종적이다. 예를 들어 CSS에 의해 비표시(<code>visibility: hidden;</code>)로 지정되어 있다면 텍스트가 반환되지 않는다.</li>
<li>CSS를 고려해야 하므로 <code>textContent</code> 프로퍼티보다 느리다.</li>
</ul>
<p><em><strong>innerHTML</strong></em></p>
<ul>
<li>해당 요소의 모든 자식 요소를 포함하는 모든 콘텐츠를 하나의 문자열로 취득할 수 있다.</li>
<li>이 문자열은 마크업을 포함한다.</li>
<li>위와 같이 마크업이 포함된 콘텐츠를 추가하는 것은 크로스 스크립팅 공격(XSS: Cross-Site Scripting Attacks)에 취약하다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ul.innerHTML);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    &lt;li id=&quot;one&quot; class=&quot;red&quot;&gt;Seoul&lt;/li&gt;</span></span><br><span class="line"><span class="comment">    &lt;li id=&quot;two&quot; class=&quot;red&quot;&gt;London&lt;/li&gt;</span></span><br><span class="line"><span class="comment">    &lt;li id=&quot;three&quot; class=&quot;red&quot;&gt;Newyork&lt;/li&gt;</span></span><br><span class="line"><span class="comment">    &lt;li id=&quot;four&quot;&gt;Tokyo&lt;/li&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p><code>innerHTML</code> 프로퍼티를 사용하여 마크업이 포함된 새로운 콘텐츠를 지정하면 새로운 요소를 DOM에 추가할 수 있다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> one = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;one&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 마크업이 포함된 콘텐츠 취득</span></span><br><span class="line"><span class="built_in">console</span>.log(one.innerHTML); <span class="comment">// Seoul</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 마크업이 포함된 콘텐츠 변경</span></span><br><span class="line">one.innerHTML += <span class="string">&#x27;&lt;em class=&quot;blue&quot;&gt;, Korea&lt;/em&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 마크업이 포함된 콘텐츠 취득</span></span><br><span class="line"><span class="built_in">console</span>.log(one.innerHTML); <span class="comment">// Seoul &lt;em class=&quot;blue&quot;&gt;, Korea&lt;/em&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="DOM-조작-방식"><a href="#DOM-조작-방식" class="headerlink" title="DOM 조작 방식"></a>DOM 조작 방식</h3><p><code>innerHTML</code> 프로퍼티를 사용하지 않고 새로운 콘텐츠를 추가할 수 있는 방법은 DOM을 직접 조작하는 것이다. 한 개의 요소를 추가하는 경우 사용한다. 이 방법은 다음의 수순에 따라 진행한다.</p>
<ol>
<li><p>요소 노드 생성 <code>createElement()</code> 메소드를 사용하여 새로운 요소 노드를 생성한다. <code>createElement()</code> 메소드의 인자로 태그 이름을 전달한다.</p>
</li>
<li><p>텍스트 노드 생성 <code>createTextNode()</code> 메소드를 사용하여 새로운 텍스트 노드를 생성한다. 경우에 따라 생략될 수 있지만 생략하는 경우, 콘텐츠가 비어 있는 요소가 된다.</p>
</li>
<li><p>생성된 요소를 DOM에 추가 <code>appendChild()</code> 메소드를 사용하여 생성된 노드를 DOM tree에 추가한다. 또는 <code>removeChild()</code> 메소드를 사용하여 DOM tree에서 노드를 삭제할 수도 있다.</p>
</li>
</ol>
<p><em><strong>createElement(tagName)</strong></em></p>
<ul>
<li>태그이름을 인자로 전달하여 요소를 생성한다.</li>
<li>Return: HTMLElement를 상속받은 객체</li>
<li>모든 브라우저에서 동작한다.</li>
</ul>
<p><em><strong>createTextNode(text)</strong></em></p>
<ul>
<li>텍스트를 인자로 전달하여 텍스트 노드를 생성한다.</li>
<li>Return: Text 객체</li>
<li>모든 브라우저에서 동작한다.</li>
</ul>
<p><em><strong>appendChild(Node)</strong></em></p>
<ul>
<li>인자로 전달한 노드를 마지막 자식 요소로 DOM 트리에 추가한다.</li>
<li>Return: 추가한 노드</li>
<li>모든 브라우저에서 동작한다.</li>
</ul>
<p><em><strong>removeChild(Node)</strong></em></p>
<ul>
<li>인자로 전달한 노드를 DOM 트리에 제거한다.</li>
<li>Return: 추가한 노드</li>
<li>모든 브라우저에서 동작한다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 태그이름을 인자로 전달하여 요소를 생성</span></span><br><span class="line"><span class="keyword">const</span> newElem = <span class="built_in">document</span>.createElement(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line"><span class="comment">// const newElem = document.createElement(&#x27;&lt;li&gt;test&lt;/li&gt;&#x27;);</span></span><br><span class="line"><span class="comment">// Uncaught DOMException: Failed to execute &#x27;createElement&#x27; on &#x27;Document&#x27;:</span></span><br><span class="line"><span class="comment">// The tag name provided (&#x27;&lt;li&gt;test&lt;/li&gt;&#x27;) is not a valid name.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 텍스트 노드를 생성</span></span><br><span class="line"><span class="keyword">const</span> newText = <span class="built_in">document</span>.createTextNode(<span class="string">&#x27;Beijing&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 텍스트 노드를 newElem 자식으로 DOM 트리에 추가</span></span><br><span class="line">newElem.appendChild(newText);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> container = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// newElem을 container의 자식으로 DOM 트리에 추가. 마지막 요소로 추가된다.</span></span><br><span class="line">container.appendChild(newElem);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> removeElem = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;one&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// container의 자식인 removeElem 요소를 DOM 트리에 제거한다.</span></span><br><span class="line">container.removeChild(removeElem);</span><br></pre></td></tr></table></figure>

<h3 id="insertAdjacentHTML"><a href="#insertAdjacentHTML" class="headerlink" title="insertAdjacentHTML()"></a>insertAdjacentHTML()</h3><p><em><strong>insertAdjacentHTML(position, string)</strong></em></p>
<ul>
<li>인자로 전달한 텍스트를 HTML로 파싱하고 그 결과로 생성된 노드를 DOM 트리의 지정된 위치에 삽입한다.</li>
<li>첫번째 인자는 삽입 위치, 두번째 인자는 삽입할 요소를 표현한 문자열이다.</li>
<li>첫번째 인자로 올 수 있는 값<ul>
<li>‘beforebegin’</li>
<li>‘afterbegin’</li>
<li>‘beforeend’</li>
<li>‘afterend’</li>
</ul>
</li>
<li>모든 브라우저에서 동작한다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> one = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;one&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 마크업이 포함된 요소 추가</span></span><br><span class="line">one.insertAdjacentHTML(<span class="string">&#x27;beforeend&#x27;</span>, <span class="string">&#x27;&lt;em class=&quot;blue&quot;&gt;, Korea&lt;/em&gt;&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="innerHTML-vs-DOM-조작-방식-vs-insertAdjacentHTML"><a href="#innerHTML-vs-DOM-조작-방식-vs-insertAdjacentHTML" class="headerlink" title="innerHTML vs. DOM 조작 방식 vs. insertAdjacentHTML()"></a>innerHTML vs. DOM 조작 방식 vs. insertAdjacentHTML()</h3><p><code>innerHTML</code>과 <code>insertAdjacentHTML()</code>은 크로스 스크립팅 공격(XSS: Cross-Site Scripting Attacks)에 취약하다. 따라서 untrusted data의 경우, 주의하여야 한다. 텍스트를 추가 또는 변경시에는 textContent, 새로운 요소의 추가 또는 삭제시에는 DOM 조작 방식을 사용하도록 한다.</p>
<p><em><strong>innerHTML</strong></em></p>
<ul>
<li><p><strong>장점</strong></p>
<ul>
<li>DOM 조작 방식에 비해 빠르고 간편하다.</li>
<li>간편하게 문자열로 정의한 여러 요소를 DOM에 추가할 수 있다.</li>
<li>콘텐츠를 취득할 수 있다.</li>
</ul>
</li>
<li><p><strong>단점</strong></p>
<ul>
<li>XSS공격에 취약점이 있기 때문에 사용자로 부터 입력받은 콘텐츠(untrusted data: 댓글, 사용자 이름 등)를 추가할 때 주의하여야 한다.</li>
<li>해당 요소의 내용을 덮어 쓴다. (HTML을 다시 파싱)</li>
</ul>
</li>
</ul>
<p><em><strong>DOM 조작 방식</strong></em></p>
<ul>
<li><p><strong>장점</strong></p>
<ul>
<li>특정 노드 한 개(노드, 텍스트, 데이터 등)를 DOM에 추가할 때 적합하다.</li>
</ul>
</li>
<li><p><strong>단점</strong></p>
<ul>
<li><code>innerHTML</code>보다 느리고 더 많은 코드가 필요하다.</li>
</ul>
</li>
</ul>
<p><em><strong>insertAdjacentHTML()</strong></em></p>
<ul>
<li><p><strong>장점</strong></p>
<ul>
<li>간편하게 문자열로 정의된 여러 요소를 DOM에 추가할 수 있다.</li>
<li>삽입되는 위치를 선정할 수 있다.</li>
</ul>
</li>
<li><p><strong>단점</strong></p>
<ul>
<li>XSS공격에 취약점이 있기 때문에 사용자로부터 입력받은 콘텐츠(untrusted data: 댓글, 사용자 이름 등)를 추가할 때 주의하여야 한다.</li>
</ul>
</li>
</ul>
<h2 id="style"><a href="#style" class="headerlink" title="style"></a>style</h2><ul>
<li>style 프로퍼티를 사용하면 inline 스타일 선언을 생성한다.</li>
<li>특정 요소에 inline 스타일을 지정하는 경우 사용한다.</li>
<li>style 프로퍼티의 값을 취득하려면 <code>window.getComputedStyle</code>을 사용한다.</li>
<li><code>window.getComputedStyle</code> 메소드는 인자로 주어진 요소의 모든 CSS 프로퍼티 값을 반환한다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> four = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;four&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// inline 스타일 선언을 생성</span></span><br><span class="line">four.style.color = <span class="string">&#x27;blue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// font-size와 같이 &#x27;-&#x27;으로 구분되는 프로퍼티는 카멜케이스로 변환하여 사용한다.</span></span><br><span class="line">four.style.fontSize = <span class="string">&#x27;2em&#x27;</span>;</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://poiemaweb.com/">https://poiemaweb.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Document Object Model</tag>
        <tag>DOM</tag>
        <tag>DOM tree</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 디스트럭처링 할당</title>
    <url>/2020/10/02/js-destructuring/</url>
    <content><![CDATA[<p><strong>디스트럭처링 할당(구조 분해 할당, Destructuring assignment)</strong> 은 구조화된 배열 또는 객체를 Destructuring(비구조화, 구조파괴)하여 1개 이상의 변수에 개별적으로 할당하는 것을 말한다. 배열 또는 객체 리터럴에서 필요한 값만을 추출하여 변수에 할당할 때 주로 사용한다.</p>
<a id="more"></a>

<h2 id="배열-디스트럭처링-할당"><a href="#배열-디스트럭처링-할당" class="headerlink" title="배열 디스트럭처링 할당"></a>배열 디스트럭처링 할당</h2><h3 id="ES5-디스트럭처링-할당"><a href="#ES5-디스트럭처링-할당" class="headerlink" title="ES5 디스트럭처링 할당"></a>ES5 디스트럭처링 할당</h3><p>ES5에서 구조화된 배열을 디스트럭처링하여 1개 이상의 변수에 할당하기 위해서는 아래와 같다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> one   = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> two   = arr[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> three = arr[<span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log(one, two, three); <span class="comment">// 1 2 3</span></span><br></pre></td></tr></table></figure>

<h3 id="ES6의-배열-디스트럭처링-할당"><a href="#ES6의-배열-디스트럭처링-할당" class="headerlink" title="ES6의 배열 디스트럭처링 할당"></a>ES6의 배열 디스트럭처링 할당</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> [one, two, three] = arr;</span><br><span class="line"><span class="built_in">console</span>.log(one, two, three); <span class="comment">// 1 2 3</span></span><br></pre></td></tr></table></figure>

<ul>
<li>배열의 각 요소를 배열로부터 추출하여 1개 이상의 변수에 할당한다.</li>
<li>할당 기준은 배열의 인덱스이다. (순서대로 할당됨)</li>
<li>배열 디스트럭처링 할당을 위해서는 할당 연산자 왼쪽에 값을 할당 받을 변수를 선언해야 한다. 이때 여러 개의 변수를 배열 리터럴 형태로 선언한다.</li>
<li>배열 디스트럭처링 할당을 위한 변수에 기본값을 설정할 수 있다.</li>
<li>배열 디스트럭처링 할당은 배열에서 필요한 요소만 추출하여 변수에 할당하고 싶을 때 유용하다.</li>
<li>배열 디스트럭처링 할당을 위한 변수에 Rest 파라미터와 유사하게 Rest 요소(Rest element) …을 사용할 수 있다. Rest 요소는 Rest 파라미터와 마찬가지로 반드시 마지막에 위치해야 한다.</li>
</ul>
<h3 id="Date-객체에서-년도-월-일을-추출하는-예제"><a href="#Date-객체에서-년도-월-일을-추출하는-예제" class="headerlink" title="Date 객체에서 년도, 월, 일을 추출하는 예제"></a>Date 객체에서 년도, 월, 일을 추출하는 예제</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="comment">// Mon Sep 16 2019 02:03:42 GMT+0900 (한국 표준시)</span></span><br><span class="line"><span class="keyword">const</span> formattedDate = today.toISOString().substring(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"><span class="comment">// &quot;2019-09-15&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 문자열을 분리하여 배열로 변환한 후</span></span><br><span class="line"><span class="comment">// 배열 디스트럭처링 할당을 통해 필요한 요소를 취득한다.</span></span><br><span class="line"><span class="keyword">const</span> [year, month, day] = formattedDate.split(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log([year, month, day]); <span class="comment">// [&#x27;2019&#x27;, &#x27;09&#x27;, &#x27;15&#x27;]</span></span><br></pre></td></tr></table></figure>

<h2 id="객체-디스트럭처링-할당"><a href="#객체-디스트럭처링-할당" class="headerlink" title="객체 디스트럭처링 할당"></a>객체 디스트럭처링 할당</h2><h3 id="ES5-디스트럭처링-할당-1"><a href="#ES5-디스트럭처링-할당-1" class="headerlink" title="ES5 디스트럭처링 할당"></a>ES5 디스트럭처링 할당</h3><p>ES5에서 객체의 각 프로퍼티를 객체로부터 디스트럭처링하여 변수에 할당하기 위해서는 <strong>프로퍼티 키를 사용</strong> 해야 한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">var</span> user = &#123; <span class="attr">firstName</span>: <span class="string">&#x27;Minjee&#x27;</span>, <span class="attr">lastName</span>: <span class="string">&#x27;Kim&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> firstName = user.firstName;</span><br><span class="line"><span class="keyword">var</span> lastName  = user.lastName;</span><br><span class="line"><span class="built_in">console</span>.log(firstName, lastName); <span class="comment">// Minjee Kim</span></span><br></pre></td></tr></table></figure>


<h3 id="ES6의-객체-디스트럭처링-할당"><a href="#ES6의-객체-디스트럭처링-할당" class="headerlink" title="ES6의 객체 디스트럭처링 할당"></a>ES6의 객체 디스트럭처링 할당</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">firstName</span>: <span class="string">&#x27;Minjee&#x27;</span>, <span class="attr">lastName</span>: <span class="string">&#x27;Kim&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> &#123; lastName, firstName &#125; = user;</span><br><span class="line"><span class="built_in">console</span>.log(firstName, lastName); <span class="comment">// Minjee Kim</span></span><br></pre></td></tr></table></figure>

<ul>
<li>객체의 각 프로퍼티를 객체로부터 추출하여 1개 이상의 변수에 할당한다.</li>
<li>할당 연산자 왼쪽에 값을 할당 받을 변수를 선언해야 한다.</li>
<li>여러 개의 변수를 객체 리터럴 형태로 선언한다. 순서는 의미가 없으며 변수 이름과 프로퍼티 키가 일치하면 할당된다.</li>
<li>객체의 프로퍼티 키와 다른 변수 이름으로 프로퍼티 값을 할당 받으려면 아래와 같이 변수를 선언한다.<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">firstName</span>: <span class="string">&#x27;Minjee&#x27;</span>, <span class="attr">lastName</span>: <span class="string">&#x27;Kim&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">lastName</span>: ln, <span class="attr">firstName</span>: fn &#125; = user;</span><br><span class="line"><span class="built_in">console</span>.log(fn, ln); <span class="comment">// Minjee Kim</span></span><br></pre></td></tr></table></figure></li>
<li>객체 디스트럭처링 할당을 위한 변수에 기본값을 설정할 수 있다.</li>
<li>프로퍼티 키로 객체에서 필요한 프로퍼티 값만을 추출할 수 있다.</li>
<li>객체를 인수로 전달받는 함수의 매개변수에도 사용할 수 있다.</li>
<li>보다 간단하고 가독성 좋게 표현이 가능하다.</li>
<li>배열의 요소가 객체인 경우, 배열 디스트럭처링 할당과 객체 디스트럭처링 할당을 혼용할 수 있다.</li>
<li>객체 디스트럭처링 할당을 위한 변수에 Rest 파라미터와 유사하게 Rest 프로퍼티 <code>…</code>을 사용할 수 있다. Rest 프로퍼티는 Rest 파라미터와 마찬가지로 반드시 마지막에 위치해야 한다.</li>
</ul>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://poiemaweb.com/">https://poiemaweb.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>destructuring</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 실행 컨텍스트</title>
    <url>/2020/09/17/js-execution-context/</url>
    <content><![CDATA[<p>실행 컨텍스트는 식별자, 스코프, 호이스팅, 클로저 등의 동작 원리를 담고 있는 자바스크립트의 핵심 개념이다. 동적 언어로서의 자바스크림트 성격을 잘 파악할 수 있다.</p>
<blockquote>
<p><strong>실행 컨텍스트</strong>: 실행할 코드에 제공할 환경 정보들을 모아놓은 객체.</p>
</blockquote>
<a id="more"></a>


<h2 id="실행-가능한-코드"><a href="#실행-가능한-코드" class="headerlink" title="실행 가능한 코드"></a>실행 가능한 코드</h2><p>ECMAScript 사양은 실행 가능한 코드(Executable Code)를 4가지 유형으로 구분한다. 각 유형마다 실행 컨텍스트를 생성하는 과정과 관리 내용이 다르기 때문에 구분해둔다.</p>
<table>
<thead>
<tr>
<th>실행 가능한 코드</th>
<th>설명</th>
</tr>
</thead>
<tbody><tr>
<td>전역 코드 (Global code)</td>
<td>전역에 존재하는 텍스트 코드. 전역에 정의된 함수, 클래스 등의 내부 코드는 포함되지 않음. 전역 코드는 <strong><u>전역 스코프를 생성</u></strong> 해야 하며 전역 객체와 연결되어야 한다.</td>
</tr>
<tr>
<td>함수 모드 (Function code)</td>
<td>함수 내부에 중첩된 함수, 클래스 등의 내부 코드는 포함되지 않음. 함수 코드는 <strong><u>지역 스코프를 생성</u></strong> 해야 하며 <strong><u>생성된 지역 스코프는 스코프 체인의 최상위인 전역 스코프에서 시작하는 스코프 체인의 일원으로 연결</u></strong> 되어야 한다.</td>
</tr>
<tr>
<td>eval 코드 (Eval code)</td>
<td>빌트인 전역 함수인 eval 함수에 인수로 전달된 텍스트 코드. eval 코드는 엄격 모드(strict mode)에서 자신만의 독자적인 스코프를 생성한다.</td>
</tr>
<tr>
<td>모듈 코드 (Module code)</td>
<td>모듈 내부에 존재하는 텍스트 코드. 모듈 내부의 함수, 클래스 등의 내부 코드는 포함되지 않음. 모듈 코드는 모듈 별로 독립적인 스코프를 생성한다.</td>
</tr>
</tbody></table>
<img src="https://mjae404.github.io/images/evaluate_and_execute_of_execution_context.jpg" alt="실행 가능한 코드의 평가와 실행">

<ol>
<li>실행 가능한 코드는 실행에 앞서 평가 과정을 거친다.</li>
<li>평가 과정에서 실행 컨텍스트가 생성된다.</li>
<li>변수, 함수, 클래스 등의 선언문이 평가된다. 그 결과는 생성된 실행 컨텍스트에 등록된다.</li>
<li>평가 과정이 끝나면 선언문을 제외한 코드가 순차적으로 실행된다. 이때 코드 실행에 필요한 정보를 실행 컨텍스트에서 취득하게 된다.</li>
<li>코드의 실행 결과는 실행 컨텍스트에서 관리된다.</li>
</ol>
<h2 id="실행-컨텍스트의-역할"><a href="#실행-컨텍스트의-역할" class="headerlink" title="실행 컨텍스트의 역할"></a>실행 컨텍스트의 역할</h2><blockquote>
<p><strong>실행 컨텍스트(Execution Context)</strong><br>실행 가능한 코드를 평가하고 실행하기 위해 필요한 환경을 제공하고 코드의 실행 결과를 실제로 관리하는 영역이다.</p>
</blockquote>
<ol>
<li><p><strong>선언에 의해 생성된 모든 식별자(변수, 함수, 클래스 등)를 스코프를 구분하여 등록</strong> 하고 식별자에 바인딩된 값의 변화를 <strong>지속적으로 관리</strong> 할 수 있어야 한다.</p>
</li>
<li><p><strong>스코프 체인을 통해 상위 스코프로 이동하며 식별자를 검색</strong> 할 수 있어야 한다.</p>
</li>
<li><p><strong>현재 실행 중인 코드의 실행 순서를 변경</strong>(ex. 함수 호출에 의한 실행 순서 변경)할 수 있어야 하며 다시 되돌아갈 수도 있어야 한다.</p>
</li>
</ol>
<h2 id="실행-컨텍스트-스택"><a href="#실행-컨텍스트-스택" class="headerlink" title="실행 컨텍스트 스택"></a>실행 컨텍스트 스택</h2><img src="https://mjae404.github.io/images/stack_of_execution_context.jpg" alt="실행 컨텍스트 스택">

<p>자바스크립트는 먼저 전역 코드를 평가하여 전역 실행 컨텍스트를 생성한다. 그리고 함수가 호출되면 코드를 평가하여 함수 실행 컨텍스트를 생성하는데, 이때 생성된 실행 컨텍스트는 스택 자료 구조로 관리된다. 이를 <strong>실행 컨택스트 스택(Execution context stack)</strong> 이라고 한다.</p>
<p> 실행 컨텍스트 스택은 <strong>코드의 실행 순서를 관리</strong> 한다. 실행 가능한 코드가 평가되면 실행 컨텍스트가 생성되고 실행 컨텍스트 스택의 최상위에 쌓인다. <strong>실행 컨텍스트 스택의 최상위에 존재하는 실행 컨텍스트를 <u>실행 중인 실행 컨텍스트(running execution context)</u></strong> 라 부른다.</p>
<h2 id="동기식-처리-모델과-비동기식-처리-모델"><a href="#동기식-처리-모델과-비동기식-처리-모델" class="headerlink" title="동기식 처리 모델과 비동기식 처리 모델"></a>동기식 처리 모델과 비동기식 처리 모델</h2><p>자바 스크립트 엔진은 단 하나의 실행 컨텍스트 스택을 갖는다. 동시에 두가지 이상의 태스크를 실행할 수 없으며, <strong>싱글스레드(single thread)로 동작한다</strong> 는 것을 의미한다.</p>
<ul>
<li><strong>동기식 처리 모델(Synchronous processing model)</strong>: 하나의 처리가 종료되어야 다음 처리를 실행할 수 있다. 직렬적으로 태스크를 수행하며, 어떤 작업이 수행중이면 다음 작업은 대기하게 된다.</li>
<li><strong>비동기식 처리 모델(Asynchronous processing model)</strong>: 병렬적으로 태스크를 수행하며 태스크가 종료되지 않더라도 대기하지 않고 다음 태스크를 실행한다. 자바스크립트에 동시성(concurrency)을 부여하여 싱글 스레드의 약점을 보완한다.<ul>
<li>단점:<ol>
<li>순차적으로 실행되지 않아서 가독성이 좋지 않다.</li>
<li>콜벡헬을 유발한다.</li>
<li>에러 처리가 어렵다.</li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="렉시컬-환경-Lexical-Environment"><a href="#렉시컬-환경-Lexical-Environment" class="headerlink" title="렉시컬 환경 (Lexical Environment)"></a>렉시컬 환경 (Lexical Environment)</h2><blockquote>
<p><strong>렉시컬 환경</strong>: 식별자가 선언되는 환경. (= 렉시컬 스코프)<br>객체 형태의 스코프(전역, 함수, 블록 스코프)를 만들고 이 곳에 식별자를 등록한다. 그리고 등록된 식별자에 바인딩된 값을 관리한다. 스코프를 구분하여 식별자를 등록하고 관리하는 저장소 역할.</p>
</blockquote>
<ul>
<li><strong>실행 컨텍스트 스택</strong>: 코드의 실행 순서를 관리</li>
<li><strong>렉시컬 환경</strong>: 스코프와 식별자를 관리</li>
</ul>
<p>렉시컬 환경은 <strong>3가지 컴포넌트</strong> 로 구성되어진다.</p>
<ol>
<li><p><strong>환경 레코드(Environment Record)</strong>: 스코프에 포함된 식별자를 등록하고 등록된 식별자에 바인딩된 값을 관리하는 저장소이다.</p>
</li>
<li><p><strong>외부 렉시컬 환경에 대한 참조(Outer Lexical Environment Reference)</strong>: 외부 렉시컬 환경을 가리키는 참조를 저장한다. 외부 렉시컬 환경이란 해당 실행 컨텍스트를 생성한 실행 가능한 코드를 포함하는 상위 코드의 렉시컬 환경을 말한다.</p>
</li>
<li><p><strong>this 바인딩(This binding)</strong>: 렉시컬 환경의 this에 바인딩된 객체(ThisBinding)를 나타낸다.</p>
</li>
</ol>
<blockquote>
<p><strong>함수 객체의 내부 슬롯 <code>[[Environment]]</code></strong><br>자바스크립트의 모든 함수는 함수 정의가 평가되어 함수 객체를 생성할 때, 현재 실행 중인 실행 컨텍스트의 렉시컬 환경을 함수 객체의 내부 슬롯 <code>[[Environment]]</code>에 저장한다. 함수 객체의 내부 슬롯 <code>[[Environment]]</code>이 바로 렉시컬 스코프를 구현하는 메커니즘이다.</p>
</blockquote>
<h2 id="실행-컨텍스트의-생성과-식별자-검색-과정"><a href="#실행-컨텍스트의-생성과-식별자-검색-과정" class="headerlink" title="실행 컨텍스트의 생성과 식별자 검색 과정"></a>실행 컨텍스트의 생성과 식별자 검색 과정</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> y = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">const</span> y = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span> (<span class="params">b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> z = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a + b + x + y + z);</span><br><span class="line">&#125;</span><br><span class="line">  bar(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(<span class="number">20</span>); <span class="comment">// 42</span></span><br></pre></td></tr></table></figure>

<h3 id="1-전역-객체-생성"><a href="#1-전역-객체-생성" class="headerlink" title="1. 전역 객체 생성"></a>1. 전역 객체 생성</h3><h3 id="2-전역-코드-평가"><a href="#2-전역-코드-평가" class="headerlink" title="2. 전역 코드 평가"></a>2. 전역 코드 평가</h3><ol>
<li>전역 실행 컨텍스트 생성</li>
<li>전역 렉시컬 환경 생성</li>
<li><ol>
<li>전역 환경 레코드 생성</li>
<li>1.1. 객체 환경 레코드 생성</li>
<li>1.2. 선언적 환경 레코드 생성</li>
</ol>
</li>
<li><ol start="2">
<li>외부 렉시컬 환경에 대한 참조 할당</li>
</ol>
</li>
<li><ol start="3">
<li>this 바인딩</li>
</ol>
</li>
</ol>
<h3 id="3-전역-코드-실행"><a href="#3-전역-코드-실행" class="headerlink" title="3. 전역 코드 실행"></a>3. 전역 코드 실행</h3><p>식별자를 검색할 때는 실행 중인 실행 컨텍스트의 렉시컬 환경에서 식별자를 검색한다.</p>
<h3 id="4-foo-함수-코드-평가"><a href="#4-foo-함수-코드-평가" class="headerlink" title="4. foo 함수 코드 평가"></a>4. foo 함수 코드 평가</h3><ol>
<li>함수 실행 컨텍스트 생성</li>
<li>함수 렉시컬 환경 생성</li>
<li><ol>
<li>함수 환경 레코드 생성</li>
</ol>
</li>
<li><ol start="2">
<li>외부 렉시컬 환경에 대한 참조 할당</li>
</ol>
</li>
<li><ol start="3">
<li>this 바인딩</li>
</ol>
</li>
</ol>
<h3 id="5-foo-함수-코드-실행"><a href="#5-foo-함수-코드-실행" class="headerlink" title="5. foo 함수 코드 실행"></a>5. foo 함수 코드 실행</h3><h3 id="6-bar-함수-코드-평가"><a href="#6-bar-함수-코드-평가" class="headerlink" title="6. bar 함수 코드 평가"></a>6. bar 함수 코드 평가</h3><h3 id="7-bar-함수-코드-실행"><a href="#7-bar-함수-코드-실행" class="headerlink" title="7. bar 함수 코드 실행"></a>7. bar 함수 코드 실행</h3><h3 id="8-bar-함수-코드-실행-종료"><a href="#8-bar-함수-코드-실행-종료" class="headerlink" title="8. bar 함수 코드 실행 종료"></a>8. bar 함수 코드 실행 종료</h3><h3 id="9-foo-함수-코드-실행-종료"><a href="#9-foo-함수-코드-실행-종료" class="headerlink" title="9. foo 함수 코드 실행 종료"></a>9. foo 함수 코드 실행 종료</h3><h3 id="10-전역-코드-실행-종료"><a href="#10-전역-코드-실행-종료" class="headerlink" title="10. 전역 코드 실행 종료"></a>10. 전역 코드 실행 종료</h3><h2 id="실행-컨텍스트와-블록-레벨-스코프"><a href="#실행-컨텍스트와-블록-레벨-스코프" class="headerlink" title="실행 컨텍스트와 블록 레벨 스코프"></a>실행 컨텍스트와 블록 레벨 스코프</h2><p><em>var 키워드로 선언한 변수</em><br>오로지 함수의 코드 블록 만을 지역 스코프로 인정하는 함수 레벨 스코프를 따른다.</p>
<p><em>let 키워드로 선언한 변수</em><br>모든 코드 블록(함수, if 문, for 문, while 문, try/catch 문 등) 을 지역 스코프로 인정하는 블록 레벨 스코프(Block-level scope)를 따른다.</p>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://poiemaweb.com/">https://poiemaweb.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>execution context</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 삼각형 출력하기</title>
    <url>/2020/10/21/js-exercise001/</url>
    <content><![CDATA[<p>다음을 참고하여 *(별)로  삼각형을 문자열로 완성하라. 개행문자(‘\n’)를 사용하여 개행한다. 완성된 문자열의 마지막은 개행문자(‘\n’)로 끝나도 관계없다.</p>
<a id="more"></a>

<h2 id="삼각형"><a href="#삼각형" class="headerlink" title="삼각형"></a>삼각형</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*</span><br><span class="line">**</span><br><span class="line">***</span><br><span class="line">****</span><br><span class="line">*****</span><br></pre></td></tr></table></figure>

<p><em>개인 풀이</em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> line = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= <span class="number">5</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= j) &#123;</span><br><span class="line">      line += <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  line += <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(line);</span><br></pre></td></tr></table></figure>

<h2 id="역삼각형"><a href="#역삼각형" class="headerlink" title="역삼각형"></a>역삼각형</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*****</span><br><span class="line"> ****</span><br><span class="line">  ***</span><br><span class="line">   **</span><br><span class="line">    *</span><br></pre></td></tr></table></figure>

<p><em>개인 풀이</em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> line = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= <span class="number">5</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i&gt;j) &#123;</span><br><span class="line">      line += <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      line += <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  line += <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(line);</span><br></pre></td></tr></table></figure>

<h2 id="역삼각형-1"><a href="#역삼각형-1" class="headerlink" title="역삼각형"></a>역삼각형</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*****</span><br><span class="line">****</span><br><span class="line">***</span><br><span class="line">**</span><br><span class="line">*</span><br></pre></td></tr></table></figure>

<p><em>개인 풀이</em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> line = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= <span class="number">5</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;=j) &#123;</span><br><span class="line">      line += <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  line += <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(line);</span><br></pre></td></tr></table></figure>

<h2 id="삼각형-1"><a href="#삼각형-1" class="headerlink" title="삼각형"></a>삼각형</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    *</span><br><span class="line">   **</span><br><span class="line">  ***</span><br><span class="line"> ****</span><br><span class="line">*****</span><br></pre></td></tr></table></figure>


<p><em>개인 풀이</em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> line = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> star = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;line; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> k=<span class="number">0</span>; k&lt;<span class="number">4</span>-i; k++) &#123;</span><br><span class="line">    star += <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j=<span class="number">0</span>; j&lt;=i; j++) &#123;</span><br><span class="line">    star += <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  star += <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(star);</span><br></pre></td></tr></table></figure>

<h2 id="정삼각형"><a href="#정삼각형" class="headerlink" title="정삼각형"></a>정삼각형</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    *</span><br><span class="line">   ***</span><br><span class="line">  *****</span><br><span class="line"> *******</span><br><span class="line">*********</span><br></pre></td></tr></table></figure>

<p><em>개인 풀이</em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> line = <span class="string">&#x27;5&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> star = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; line; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span> - i; k++) &#123;</span><br><span class="line">    star += <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span> * i + <span class="number">1</span>; j++) &#123;</span><br><span class="line">    star += <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  star += <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(star);</span><br></pre></td></tr></table></figure>

<h2 id="역정삼각형"><a href="#역정삼각형" class="headerlink" title="역정삼각형"></a>역정삼각형</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*********</span><br><span class="line"> *******</span><br><span class="line">  *****</span><br><span class="line">   ***</span><br><span class="line">    *</span><br></pre></td></tr></table></figure>


<p><em>개인 풀이</em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> line = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> star = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; line; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; line; k++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; k) &#123;</span><br><span class="line">      star += <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; -<span class="number">2</span> * i + <span class="number">9</span>; j++) &#123;</span><br><span class="line">    star += <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  star += <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(star);</span><br></pre></td></tr></table></figure>


<p><em>다른 사람 풀이</em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> star = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> line = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> revLine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= line; i++) &#123;</span><br><span class="line">  revLine = (line - i) * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">1</span>; k &lt;= i - <span class="number">1</span>; k++)</span><br><span class="line">    star += <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= revLine; j++)</span><br><span class="line">    star += <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">  star += <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(star);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>exercise</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>exercise</tag>
        <tag>control flow</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 두 날짜의 차이</title>
    <url>/2020/10/22/js-exercise002/</url>
    <content><![CDATA[<p>두 날짜 간의 차이를 구해라.</p>
<a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2112</span>, <span class="number">8</span>, <span class="number">24</span>);</span><br><span class="line"><span class="keyword">let</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2109</span>, <span class="number">7</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countDay</span>(<span class="params">startDate</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timeDiff = today.getTime() - startDate.getTime();</span><br><span class="line">    <span class="keyword">let</span> dayDiff = timeDiff / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">countDay(start);</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>코드잇 온라인 강의 프로그래밍 기초 in JavaScript</p>
</blockquote>
]]></content>
      <categories>
        <category>exercise</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>exercise</tag>
        <tag>JavaScript</tag>
        <tag>date object</tag>
        <tag>object</tag>
        <tag>built-in object</tag>
        <tag>wrapper object</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 팩토리얼</title>
    <url>/2020/10/23/js-exercise003-factorial/</url>
    <content><![CDATA[<p>자바스크립트로 팩토리얼을 구현하라.</p>
<a id="more"></a>

<p><em><strong>재귀함수</strong></em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( n&lt;= <span class="number">1</span> ) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> n * factorial(n-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>for문</strong></em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">2</span>; i&lt;=n; i++) result *= i;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>exercise</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>exercise</tag>
        <tag>control flow</tag>
        <tag>recursive function</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 수박수박수박수박수박수?</title>
    <url>/2020/10/26/js-exercise004-watermelon/</url>
    <content><![CDATA[<p>길이가 n이고, 수박수박수박수….와 같은 패턴을 유지하는 문자열을 리턴하는 함수, solution을 완성하세요. 예를들어 n이 4이면 수박수박을 리턴하고 3이라면 수박수를 리턴하면 됩니다.</p>
<blockquote>
<p>제한 조건<br>n은 길이 10,000이하인 자연수입니다.</p>
</blockquote>
<a id="more"></a>

<p><em><strong>개인풀이</strong></em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; n ; i++) &#123;</span><br><span class="line">        result += i % <span class="number">2</span> == <span class="number">0</span> ? <span class="string">&quot;수&quot;</span> : <span class="string">&quot;박&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>다른사람 풀이</strong></em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> waterMelon = <span class="function"><span class="params">n</span> =&gt;</span> <span class="string">&quot;수박&quot;</span>.repeat(n).slice(<span class="number">0</span>,n);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="string">&quot;수박&quot;</span>).repeat(n/<span class="number">2</span>) + ((n%<span class="number">2</span>) ? <span class="string">&#x27;수&#x27;</span> : <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= n ; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span> === <span class="number">1</span>)&#123;</span><br><span class="line">        result += <span class="string">&#x27;수&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result += <span class="string">&#x27;박&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>[문제] <a href="https://programmers.co.kr/learn/courses/30/lessons/12922">https://programmers.co.kr/learn/courses/30/lessons/12922</a></p>
</blockquote>
]]></content>
      <categories>
        <category>exercise</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>exercise</tag>
        <tag>JavaScript</tag>
        <tag>algorism</tag>
        <tag>programmers</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 짝수와 홀수</title>
    <url>/2020/10/27/js-exercise005-odd-even/</url>
    <content><![CDATA[<p>정수 <code>num</code>이 짝수일 경우 <code>Even</code>을 반환하고 홀수인 경우 <code>Odd</code>를 반환하는 함수, solution을 완성해주세요.</p>
<blockquote>
<p>제한 조건<br><code>num</code>은 <code>int</code> 범위의 정수입니다.<br><code>0</code>은 짝수입니다.</p>
</blockquote>
<a id="more"></a>

<p><em><strong>개인 풀이</strong></em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(num%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Even&quot;</span></span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Odd&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> answer = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>다른 사람 풀이</strong></em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">evenOrOdd</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num % <span class="number">2</span> ? <span class="string">&quot;Odd&quot;</span> : <span class="string">&quot;Even&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>[문제] <a href="https://programmers.co.kr/learn/courses/30/lessons/12937?language=javascript">https://programmers.co.kr/learn/courses/30/lessons/12937?language=javascript</a></p>
</blockquote>
]]></content>
      <categories>
        <category>exercise</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>exercise</tag>
        <tag>JavaScript</tag>
        <tag>algorism</tag>
        <tag>programmers</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 2 또는 3의 배수가 아닌 수의 총합</title>
    <url>/2020/11/17/js-exercise007/</url>
    <content><![CDATA[<p>1부터 20 미만의 정수 중에서 2 또는 3의 배수가 아닌 수의 총합을 구하시오.</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">73</span><br></pre></td></tr></table></figure>

<p><em><strong>개인 풀이</strong></em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">2</span> !== <span class="number">0</span> &amp;&amp; i % <span class="number">3</span> !== <span class="number">0</span>) sum += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>exercise</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>exercise</tag>
        <tag>control flow</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 2 또는 3의 배수인 수의 총합</title>
    <url>/2020/11/16/js-exercise006/</url>
    <content><![CDATA[<p>1부터 20 미만의 정수 중에서 2 또는 3의 배수인 수의 총합을 구하시오.</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">117</span><br></pre></td></tr></table></figure>

<p><em><strong>개인풀이</strong></em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">2</span> === <span class="number">0</span> || i % <span class="number">3</span> === <span class="number">0</span>) sum += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>exercise</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>exercise</tag>
        <tag>control flow</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 윤년인지 확인하는 함수</title>
    <url>/2020/11/18/js-exercise008/</url>
    <content><![CDATA[<p>특정 연도가 윤년인지 확인하는 함수. 윤년은 4로 나누어 떨어지고 100으로는 나누어 떨어지지는 않지만 400으로는 나누어 떨어지는 해이다.</p>
<a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isLeapYear</span>(<span class="params">year</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( year % <span class="number">400</span> == <span class="number">00</span> || ((year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; (year % <span class="number">100</span> != <span class="number">0</span>))) )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>exercise</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>exercise</tag>
        <tag>control flow</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS html 생성</title>
    <url>/2020/11/19/js-exercise009/</url>
    <content><![CDATA[<p>아래 배열을 사용하여 html을 생성하는 함수를 작성하라.</p>
<a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> todos = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">content</span>: <span class="string">&#x27;HTML&#x27;</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">content</span>: <span class="string">&#x27;CSS&#x27;</span>, <span class="attr">completed</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">content</span>: <span class="string">&#x27;Javascript&#x27;</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> html = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  todos.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">todo</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 작성하시오</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> html;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(render());</span><br></pre></td></tr></table></figure>

<p><em><strong>출력</strong></em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;li id&#x3D;&quot;3&quot;&gt;</span><br><span class="line">    &lt;label&gt;&lt;input type&#x3D;&quot;checkbox&quot;&gt;HTML&lt;&#x2F;label&gt;</span><br><span class="line">&lt;&#x2F;li&gt;</span><br><span class="line">&lt;li id&#x3D;&quot;2&quot;&gt;</span><br><span class="line">    &lt;label&gt;&lt;input type&#x3D;&quot;checkbox&quot; checked&gt;CSS&lt;&#x2F;label&gt;</span><br><span class="line">&lt;&#x2F;li&gt;</span><br><span class="line">&lt;li id&#x3D;&quot;1&quot;&gt;</span><br><span class="line">    &lt;label&gt;&lt;input type&#x3D;&quot;checkbox&quot;&gt;Javascript&lt;&#x2F;label&gt;</span><br><span class="line">&lt;&#x2F;li&gt;</span><br></pre></td></tr></table></figure>

<p><em><strong>풀이</strong></em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> todos = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">content</span>: <span class="string">&#x27;HTML&#x27;</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">content</span>: <span class="string">&#x27;CSS&#x27;</span>, <span class="attr">completed</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">content</span>: <span class="string">&#x27;Javascript&#x27;</span>, <span class="attr">completed</span>: <span class="literal">false</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> html = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  todos.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">todo</span>) </span>&#123;</span><br><span class="line">    html +=</span><br><span class="line">    <span class="string">`&lt;li id =&quot;<span class="subst">$&#123;todo.id&#125;</span>&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;label&gt;</span></span><br><span class="line"><span class="string">        &lt;input type=&quot;checkbox&quot;<span class="subst">$&#123;todo.completed ? <span class="string">&#x27; checked&#x27;</span> : <span class="string">&#x27;&#x27;</span>&#125;</span>&gt;</span></span><br><span class="line"><span class="string">        <span class="subst">$&#123;todo.content&#125;</span></span></span><br><span class="line"><span class="string">      &lt;/label&gt;</span></span><br><span class="line"><span class="string">    &lt;/li&gt;`</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> html;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(render());</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>exercise</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>exercise</tag>
        <tag>JavaScript</tag>
        <tag>arry</tag>
        <tag>array HOF</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 피보나치 수열</title>
    <url>/2021/02/04/js-exercise010/</url>
    <content><![CDATA[<p>피보나치 수열을 구하는 함수.</p>
<a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">2</span>) <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">if</span>(!(n <span class="keyword">in</span> fibonacci))&#123;</span><br><span class="line">        fibonacci[n] = fibonacci(n-<span class="number">1</span>) + fibonacci(n-<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fibonacci[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">20</span>; i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log((<span class="string">&quot; &quot;</span> + i).slice(-<span class="number">2</span>) + <span class="string">&quot; : &quot;</span> + fibonacci(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>exercise</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>exercise</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 배열 요소의 합계</title>
    <url>/2021/02/05/js-exercise011/</url>
    <content><![CDATA[<p>배열 요소의 합계를 구하라.</p>
<a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumArray</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; a.length; i++)&#123;</span><br><span class="line">        sum += a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="built_in">console</span>.log(sumArray(a)); <span class="comment">// 28</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>exercise</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>exercise</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 별찍기</title>
    <url>/2021/09/08/js-exercise013/</url>
    <content><![CDATA[<p>별찍기 연습.</p>
<a id="more"></a>

<h2 id="삼각형"><a href="#삼각형" class="headerlink" title="삼각형"></a>삼각형</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*</span><br><span class="line">**</span><br><span class="line">***</span><br><span class="line">****</span><br><span class="line">*****</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> star = <span class="number">1</span>; star &lt;= <span class="number">5</span>; star += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;*&#x27;</span>.repeat(star)); <span class="comment">// 반복하라</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> star = <span class="number">0</span>; star &lt; <span class="number">5</span>; star += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;*&#x27;</span>.repeat(star + <span class="number">1</span>)); <span class="comment">// 반복하라</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="역삼각형"><a href="#역삼각형" class="headerlink" title="역삼각형"></a>역삼각형</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*****</span><br><span class="line">****</span><br><span class="line">***</span><br><span class="line">**</span><br><span class="line">*</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> star = <span class="number">5</span>; star &gt;= <span class="number">1</span>; star -= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;*&#x27;</span>.repeat(star)); <span class="comment">// 반복하라</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*****</span><br><span class="line"> ****</span><br><span class="line">  ***</span><br><span class="line">   **</span><br><span class="line">    *</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> star = <span class="number">5</span>; star &gt;= <span class="number">1</span>; star -= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27; &#x27;</span>.repeat(<span class="number">5</span> - star) + <span class="string">&#x27;*&#x27;</span>.repeat(star)); <span class="comment">// 반복하라</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="정역삼각형"><a href="#정역삼각형" class="headerlink" title="정역삼각형"></a>정역삼각형</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*********</span><br><span class="line"> *******</span><br><span class="line">  *****</span><br><span class="line">   ***</span><br><span class="line">    *</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> star = <span class="number">9</span>; star &gt;= <span class="number">1</span>; star -= <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27; &#x27;</span>.repeat((<span class="number">9</span> - star) / <span class="number">2</span>) + <span class="string">&#x27;*&#x27;</span>.repeat(star)); <span class="comment">// 반복하라</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://www.inflearn.com/course/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B2%8C%EC%9E%84-%EA%B0%9C%EB%B0%9C/lecture/17159?tab=note&amp;mm=null">https://www.inflearn.com/course/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B2%8C%EC%9E%84-%EA%B0%9C%EB%B0%9C/lecture/17159?tab=note&amp;mm=null</a></p>
</blockquote>
]]></content>
      <categories>
        <category>exercise</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>exercise</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 구구단 구현</title>
    <url>/2021/09/09/js-exercise014/</url>
    <content><![CDATA[<p>구구단 구현하기.</p>
<a id="more"></a>

<ul>
<li><code>Math.floor</code>: 내림</li>
<li><code>Math.ceil</code>: 올림</li>
<li><code>Math.random</code>: 랜덤하지만 엄밀한 랜덤은 아니다.</li>
<li>무한 반복문의 경우 <code>shift</code> + <code>esc</code>을 눌러 종료가능.<ul>
<li><code>Number(null)</code> = 0 / 프롬프트에서 취소를 누르면 <code>null</code>이 됨.</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> num1 = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * <span class="number">9</span>);</span><br><span class="line">    <span class="keyword">var</span> num2 = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * <span class="number">9</span>);</span><br><span class="line">    <span class="keyword">var</span> result = num1 * num2;</span><br><span class="line">    <span class="keyword">var</span> condition = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(condition) &#123;</span><br><span class="line">        <span class="keyword">var</span> answer = prompt(<span class="built_in">String</span>(num1)  + <span class="string">&#x27;곱하기&#x27;</span> + <span class="built_in">String</span>(num2) + <span class="string">&#x27;는?&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(result === <span class="built_in">Number</span>(answer)) &#123;</span><br><span class="line">            alert(<span class="string">&#x27;딩동댕&#x27;</span>);</span><br><span class="line">            condition = <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            alert(<span class="string">&#x27;땡&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * <span class="number">9</span>);</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * <span class="number">9</span>);</span><br><span class="line"><span class="keyword">var</span> result = num1 * num2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> body = <span class="built_in">document</span>.body;</span><br><span class="line"><span class="keyword">var</span> word = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">word.textContent = <span class="built_in">String</span>(num1) + <span class="string">&#x27;곱하기&#x27;</span> + <span class="built_in">String</span>(num2) + <span class="string">&#x27;는?&#x27;</span>;</span><br><span class="line"><span class="built_in">document</span>.body.append(word);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.createElement(<span class="string">&#x27;form&#x27;</span>);</span><br><span class="line"><span class="built_in">document</span>.body.append(form);</span><br><span class="line"><span class="keyword">var</span> input = <span class="built_in">document</span>.createElement(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line">form.append(input);</span><br><span class="line"><span class="keyword">var</span> button = <span class="built_in">document</span>.createElement(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">form.append(button);</span><br><span class="line">button.textContent = <span class="string">&#x27;입력&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> answerBox = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="built_in">document</span>.body.append(answerBox);</span><br><span class="line"></span><br><span class="line">form.addEventListener(<span class="string">&#x27;submit&#x27;</span>, <span class="function"><span class="keyword">function</span> <span class="title">wordgame</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    <span class="keyword">if</span> (result === input.value &#123;</span><br><span class="line">        answerBox.textContent = <span class="string">&#x27;딩동댕&#x27;</span>;</span><br><span class="line">        num1 = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * <span class="number">9</span>);</span><br><span class="line">        num2 = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * <span class="number">9</span>);</span><br><span class="line">        result = num1 * num2;</span><br><span class="line">        input.value = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        input.focus();</span><br><span class="line">    &#125;) <span class="keyword">else</span> &#123;</span><br><span class="line">        answerBox.textContent = <span class="string">&#x27;땡&#x27;</span>;</span><br><span class="line">        input.value = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        input.focus();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://www.inflearn.com/course/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B2%8C%EC%9E%84-%EA%B0%9C%EB%B0%9C/lecture/17163?tab=note&amp;mm=null">https://www.inflearn.com/course/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B2%8C%EC%9E%84-%EA%B0%9C%EB%B0%9C/lecture/17163?tab=note&amp;mm=null</a></p>
</blockquote>
]]></content>
      <categories>
        <category>exercise</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>exercise</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 숫자야구 구현</title>
    <url>/2021/09/10/js-exercise015/</url>
    <content><![CDATA[<p>숫자야구 구현하기.</p>
<a id="more"></a>

<ul>
<li><code>push</code>: 뒤에 밀어 넣는 것 (1, 2, 3, 4)</li>
<li><code>pop</code>: 마지막 순으로 뽑아 나가는 것 (9, 8, 7, 6)</li>
<li><code>shift</code>: 앞에서부터 뽑아 나가는 것 (1, 2, 3, 4)</li>
<li><code>unshift</code>: 앞에 밀어 넣는 것 (4, 3, 2, 1)</li>
<li><code>splice</code>: 뽑고 싶은 위치 기입 <ul>
<li>4를 뽑고 싶으면 해당 위치인 3 / 해당 위치로부터 하나를 뽑고 싶다 1</li>
<li>ex) <code>splice(3, 1)</code> → 3</li>
<li>ex) <code>splice(3, 3)</code> → 3, 4, 5</li>
</ul>
</li>
<li><code>[0]</code>을 기입하는 이유는 첫번째로 선택하려고 하는 것. 그렇지 않으면 각각의 배열로 출력됨.<ul>
<li>ex) <code>[1]</code>, <code>[4]</code>, <code>[2]</code>, <code>[9]</code></li>
<li>우리가 원하는 배열 → <code>[1, 4, 2, 9]</code></li>
</ul>
</li>
<li><code>배열.join</code>: 배열을 합치게 해줌.<ul>
<li><code>join(&#39;&#39;)</code>: “1234”</li>
<li><code>join(&#39;,&#39;)</code>: “1,2,3,4”</li>
<li><code>join(&#39;:&#39;)</code>: “1:2:3:4”</li>
</ul>
</li>
<li><code>문자.split</code>: 문자를 배열로 만들어줌.</li>
<li><code>indexOf</code>: 해당 배열에서 해당 내용이 어디에 들어있는지 찾아줌.<ul>
<li>ex) <code>array[2, 3, 5, 9]</code>에서 <code>array.indexOf(3)</code> → <code>[1]</code></li>
<li>없으면 <code>-1</code></li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> body = <span class="built_in">document</span>.body;</span><br><span class="line"><span class="keyword">var</span> num;</span><br><span class="line"><span class="keyword">var</span> numArray;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pickNum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  num = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line">  numArray = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> pick = num.splice(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (<span class="number">9</span> - i)), <span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line">    numArray.push(pick);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pickNum();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">document</span>.createElement(<span class="string">&#x27;h1&#x27;</span>);</span><br><span class="line">body.append(result);</span><br><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.createElement(<span class="string">&#x27;form&#x27;</span>);</span><br><span class="line"><span class="built_in">document</span>.body.append(form);</span><br><span class="line"><span class="keyword">var</span> input = <span class="built_in">document</span>.createElement(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line">form.append(input);</span><br><span class="line">input.type = <span class="string">&#x27;text&#x27;</span>;</span><br><span class="line">input.maxLength = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">var</span> button = <span class="built_in">document</span>.createElement(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">button.textContent = <span class="string">&#x27;입력&#x27;</span>;</span><br><span class="line">form.append(button);</span><br><span class="line"><span class="keyword">var</span> wrong = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">form.addEventListener(<span class="string">&#x27;submit&#x27;</span>, <span class="function"><span class="keyword">function</span> <span class="title">num_baseball</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    <span class="built_in">console</span>.log(numArray);</span><br><span class="line">    <span class="keyword">var</span> answer = input.value;</span><br><span class="line">    <span class="keyword">if</span> (answer === numArray.join(<span class="string">&#x27;&#x27;</span>)) &#123;</span><br><span class="line">        result.textContent = <span class="string">&#x27;홈런&#x27;</span>;</span><br><span class="line">        input.value = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        input.focus();</span><br><span class="line">        pickNum();</span><br><span class="line">        wrong = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 답이 틀리면</span></span><br><span class="line">        <span class="keyword">var</span> answerArray = answer.split(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> strike = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> ball = <span class="number">0</span>;</span><br><span class="line">        wrong += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> ( wrong &gt; <span class="number">10</span>) &#123;</span><br><span class="line">            result.textContent = <span class="string">&#x27;10번 넘게 틀려서 실패! 답은&#x27;</span> + numArray.join(<span class="string">&#x27;,&#x27;</span>) + <span class="string">&#x27;였습니다!&#x27;</span>;</span><br><span class="line">            input.value = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            input.focus();</span><br><span class="line">            pickNum();</span><br><span class="line">            wrong = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>; i &lt; <span class="number">3</span>; i+= <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">Number</span>(answerArray[i]) === numArray[i]) &#123;</span><br><span class="line">                    strike += <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (numArray.indexOf(<span class="built_in">Number</span>(answerArray[i])) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">                    ball +=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            result.textContent = strike + <span class="string">&#x27;strike&#x27;</span> + ball + <span class="string">&#x27;ball입니다.&#x27;</span>;</span><br><span class="line">            input.value= <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            input.focus();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://www.inflearn.com/course/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B2%8C%EC%9E%84-%EA%B0%9C%EB%B0%9C/lecture/17174?tab=curriculum&amp;mm=null">https://www.inflearn.com/course/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B2%8C%EC%9E%84-%EA%B0%9C%EB%B0%9C/lecture/17174?tab=curriculum&amp;mm=null</a></p>
</blockquote>
]]></content>
      <categories>
        <category>exercise</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>exercise</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 끝말잇기</title>
    <url>/2021/02/22/js-exercise012/</url>
    <content><![CDATA[<p>끝말잇기 구현.</p>
<a id="more"></a>

<p><em><strong>while문</strong></em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> word = <span class="string">&#x27;엠제이&#x27;</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> answer = prompt(word);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 마지막 인덱스는 글자 길이보다 1이 작은 숫자</span></span><br><span class="line">    <span class="keyword">if</span>(word[word.length - <span class="number">1</span>] === answer[<span class="number">0</span>]) &#123;</span><br><span class="line">        alert(<span class="string">&#x27;딩동댕&#x27;</span>);</span><br><span class="line">        word = answer;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">&#x27;땡&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>for문</strong></em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> word = <span class="string">&#x27;엠제이&#x27;</span>; <span class="literal">true</span>; ) &#123;</span><br><span class="line">    <span class="keyword">var</span> answer = prompt(word);</span><br><span class="line">    <span class="keyword">if</span>(word[word.length - <span class="number">1</span>] === answer[<span class="number">0</span>]) &#123;</span><br><span class="line">        alert(<span class="string">&#x27;딩동댕&#x27;</span>);</span><br><span class="line">        word = answer;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">&#x27;땡&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>끝말잇기 화면에 구현</strong></em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> body = <span class="built_in">document</span>.body;</span><br><span class="line"><span class="keyword">var</span> wordBox = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">wordBox.textContent = <span class="string">&#x27;엠제이&#x27;</span>;</span><br><span class="line"><span class="built_in">document</span>.body.append(wordBox);</span><br><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.createElement(<span class="string">&#x27;form&#x27;</span>);</span><br><span class="line"><span class="built_in">document</span>.body.append(form);</span><br><span class="line"><span class="keyword">var</span> input = <span class="built_in">document</span>.createElement(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line">form.append(input);</span><br><span class="line"><span class="keyword">var</span> button = <span class="built_in">document</span>.createElement(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">form.append(button);</span><br><span class="line">button.textContent = <span class="string">&#x27;입력&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> answerBox = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="built_in">document</span>.body.append(answerBox);</span><br><span class="line"></span><br><span class="line">form.addEventListener(<span class="string">&#x27;submit&#x27;</span>, <span class="function"><span class="keyword">function</span> <span class="title">wordgame</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    <span class="keyword">if</span>(wordBox.textContent[wordBox.textContent.length - <span class="number">1</span>] === input.value[<span class="number">0</span>]) &#123;</span><br><span class="line">        answerBox.textContent = <span class="string">&#x27;딩동댕&#x27;</span>;</span><br><span class="line">        wordBox.textContent = input.value;</span><br><span class="line">        input.value = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        input.focus();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        answerBox.textContent = <span class="string">&#x27;땡&#x27;</span>;</span><br><span class="line">        input.value = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        input.focus();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://www.inflearn.com/course/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B2%8C%EC%9E%84-%EA%B0%9C%EB%B0%9C/lecture/17157?tab=curriculum">https://www.inflearn.com/course/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B2%8C%EC%9E%84-%EA%B0%9C%EB%B0%9C/lecture/17157?tab=curriculum</a></p>
</blockquote>
]]></content>
      <categories>
        <category>exercise</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>exercise</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 틱택토 게임</title>
    <url>/2021/09/13/js-exercise016/</url>
    <content><![CDATA[<p>틱택토 게임 구현하기.</p>
<a id="more"></a>

<ul>
<li><code>e.target</code> : 클릭된 타겟</li>
<li><code>e.target.parentNode</code> : 클릭된 타겟 부모 노드</li>
<li><code>e.target.children</code> : 클릭된 타겟 자식 노드</li>
<li><code>Math.abs</code> : 절대값</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> body = <span class="built_in">document</span>.body;</span><br><span class="line"><span class="keyword">var</span> table = <span class="built_in">document</span>.createElement(<span class="string">&#x27;table&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> trs = [];</span><br><span class="line"><span class="keyword">var</span> tds = [];</span><br><span class="line"><span class="keyword">var</span> turn = <span class="string">&#x27;X&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> click = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> trNum = trs.indexOf(e.target.parentNode); <span class="comment">// 몇번째 줄</span></span><br><span class="line">    <span class="keyword">var</span> tdNum = tds[trNum].indexOf(e.target); <span class="comment">// 몇번째 칸</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(tds[trNum][tdNum].textContent !== <span class="string">&quot;&quot;</span>) &#123; <span class="comment">// 칸이 이미 채워져 있는가</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        tds[trNum][tdNum].textContent = turn;</span><br><span class="line">        <span class="comment">// 세칸 다 채워졌나? - 하단 방법은 좋은 방법은 아님</span></span><br><span class="line">        <span class="keyword">var</span> full = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 가로줄 검사</span></span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">            tds[trNum][<span class="number">0</span>].textContent === turn &amp;&amp;</span><br><span class="line">            tds[trNum][<span class="number">1</span>].textContent === turn &amp;&amp;</span><br><span class="line">            tds[trNum][<span class="number">2</span>].textContent === turn</span><br><span class="line">            ) &#123;</span><br><span class="line">            full = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 세로줄 검사</span></span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">            tds[<span class="number">0</span>][tdNum].textContent === turn &amp;&amp;</span><br><span class="line">            tds[<span class="number">1</span>][tdNum].textContent === turn &amp;&amp;</span><br><span class="line">            tds[<span class="number">2</span>][tdNum].textContent === turn</span><br><span class="line">            ) &#123;</span><br><span class="line">            full = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 대각선 검사</span></span><br><span class="line">        <span class="keyword">if</span>(</span><br><span class="line">            tds[<span class="number">0</span>][<span class="number">0</span>].textContent === turn &amp;&amp;</span><br><span class="line">            tds[<span class="number">1</span>][<span class="number">1</span>].textContent === turn &amp;&amp;</span><br><span class="line">            tds[<span class="number">2</span>][<span class="number">2</span>].textContent === turn</span><br><span class="line">            ) &#123;</span><br><span class="line">            full = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(</span><br><span class="line">            tds[<span class="number">0</span>][<span class="number">2</span>].textContent === turn &amp;&amp;</span><br><span class="line">            tds[<span class="number">1</span>][<span class="number">1</span>].textContent === turn &amp;&amp;</span><br><span class="line">            tds[<span class="number">2</span>][<span class="number">0</span>].textContent === turn</span><br><span class="line">            ) &#123;</span><br><span class="line">            full = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (full) &#123;</span><br><span class="line">            result.textContent = turn + <span class="string">&#x27;님이 승리!&#x27;</span>;</span><br><span class="line">            turn = <span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">            tds.forEach (<span class="function"><span class="keyword">function</span> (<span class="params">tr</span>) </span>&#123;</span><br><span class="line">                tr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">td</span>) </span>&#123;</span><br><span class="line">                    td.textContent = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (turn === <span class="string">&#x27;X&#x27;</span>) &#123;</span><br><span class="line">                turn = <span class="string">&#x27;O&#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                turn = <span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;=<span class="number">3</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> tr = <span class="built_in">document</span>.createElement(<span class="string">&#x27;tr&#x27;</span>);</span><br><span class="line">    trs.push(tr);</span><br><span class="line">    tds.push([]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= <span class="number">3</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">var</span> td = <span class="built_in">document</span>.createElement(<span class="string">&#x27;td&#x27;</span>);</span><br><span class="line">        td.addEventListener(<span class="string">&#x27;click&#x27;</span>, click);</span><br><span class="line">        tds[i - <span class="number">1</span>].push(td);</span><br><span class="line">        tr.appendChild(td);</span><br><span class="line">    &#125;</span><br><span class="line">    table.appendChild(tr);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">body.appendChild(table);</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://www.inflearn.com/course/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B2%8C%EC%9E%84-%EA%B0%9C%EB%B0%9C/lecture/17180?tab=note">https://www.inflearn.com/course/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B2%8C%EC%9E%84-%EA%B0%9C%EB%B0%9C/lecture/17180?tab=note</a></p>
</blockquote>
]]></content>
      <categories>
        <category>exercise</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>exercise</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 로또추첨기</title>
    <url>/2021/09/17/js-exercise017/</url>
    <content><![CDATA[<p>로또 추첨기 구현하기.</p>
<a id="more"></a>
<ul>
<li><code>Array</code>: 너무 많은 num가 배열에 있을 때 빈값(<code>emtpy</code>이 그 갯수만큼 생성된다. <code>empty</code>는 반복문 불가하다.</li>
<li><code>for</code>문은 자신이 몇번 돌지 확실할 때 / <code>while</code>문은 얼마나 돌아야 할지 모를 때, 기준값이 변동될 때 사용.</li>
<li><code>sort</code>: 정렬. ex) <code>array.sort()</code></li>
<li><code>(function(p, c) &#123;return p - c;&#125;)</code> : 뺀 num가 0보다 크면 순서를 바꿈</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>로또<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        .공 &#123;</span><br><span class="line"><span class="css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>당첨 num<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;result&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>보너스!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bonus&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;lottery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 후보군 num 삽입</span></span><br><span class="line"><span class="comment">// 좋은 방법은 아님</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// var lotteryNum = Array(45);</span></span><br><span class="line"><span class="comment">// var fill = lotteryNum.fill();</span></span><br><span class="line"><span class="comment">// fill.forEach(function(argument, index) &#123;</span></span><br><span class="line"><span class="comment">//     fill[index] = index + 1;</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> lotteryNum = <span class="built_in">Array</span>(<span class="number">45</span>)</span><br><span class="line">.fill()</span><br><span class="line">.map(<span class="function"><span class="keyword">function</span>(<span class="params">argument, index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> index + <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> shuffle = [];</span><br><span class="line"><span class="keyword">while</span> (lotteryNum.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> moveNum = lotteryNum.splice(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * lotteryNum.length), <span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line">    shuffle.push(moveNum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bonus = shuffle[shuffle.length - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> winNum = shuffle.slice(<span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"><span class="comment">// var result = document.getElementById(&#x27;result&#x27;);</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#sresult&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;winNum&#x27;</span>, winNum.sort(<span class="function"><span class="keyword">function</span>(<span class="params">p, c</span>) </span>&#123;<span class="keyword">return</span> p - c;&#125;), <span class="string">&#x27;보너스&#x27;</span>, bonus);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fillColor</span>(<span class="params">num, space</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ball = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    ball.textContent = num;</span><br><span class="line">    ball.className = <span class="string">&#x27;ball&#x27;</span> + num; <span class="comment">// 클래스 네임 주기</span></span><br><span class="line">    ball.style.display = <span class="string">&#x27;inline-block&#x27;</span>;</span><br><span class="line">    ball.style.border = <span class="string">&#x27;1px solid black&#x27;</span>;</span><br><span class="line">    ball.style.borderRadius = <span class="string">&#x27;10px&#x27;</span>;</span><br><span class="line">    ball.style.width = <span class="string">&#x27;20px&#x27;</span>;</span><br><span class="line">    ball.style.height = <span class="string">&#x27;20px&#x27;</span>;</span><br><span class="line">    ball.style.textAlign = <span class="string">&#x27;center&#x27;</span>;</span><br><span class="line">    ball.style.marginRight = <span class="string">&#x27;10px&#x27;</span>;</span><br><span class="line">    ball.style.fontSize = <span class="string">&#x27;12px&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> backgroundColor;</span><br><span class="line">    <span class="keyword">if</span> (num &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">        backgroundColor = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num &lt;= <span class="number">20</span>) &#123;</span><br><span class="line">        backgroundColor = <span class="string">&#x27;orange&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num &lt;= <span class="number">30</span>) &#123;</span><br><span class="line">        backgroundColor = <span class="string">&#x27;yellow&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num &lt;= <span class="number">40</span>) &#123;</span><br><span class="line">        backgroundColor = <span class="string">&#x27;blue&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        backgroundColor = <span class="string">&#x27;green&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ball.style.background = backgroundColor;</span><br><span class="line">    space.appendChild(ball);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> <span class="title">lateNum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    fillColor(winNum[<span class="number">0</span>], result);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> <span class="title">lateNum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    fillColor(winNum[<span class="number">1</span>], result);</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> <span class="title">lateNum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    fillColor(winNum[<span class="number">2</span>], result);</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> <span class="title">lateNum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    fillColor(winNum[<span class="number">3</span>], result);</span><br><span class="line">&#125;, <span class="number">4000</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> <span class="title">lateNum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    fillColor(winNum[<span class="number">4</span>], result);</span><br><span class="line">&#125;, <span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> <span class="title">lateNum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    fillColor(winNum[<span class="number">5</span>], result);</span><br><span class="line">&#125;, <span class="number">6000</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> <span class="title">lateNum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// var bonusSpace = document.getElementsByClassName(&#x27;bonus&#x27;)[0];</span></span><br><span class="line">    <span class="keyword">var</span> bonusSpace = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.bonus&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">    fillColor(bonus, bonusSpace);</span><br><span class="line">&#125;, <span class="number">7000</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://www.inflearn.com/course/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B2%8C%EC%9E%84-%EA%B0%9C%EB%B0%9C/lecture/17186">https://www.inflearn.com/course/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B2%8C%EC%9E%84-%EA%B0%9C%EB%B0%9C/lecture/17186</a></p>
</blockquote>
]]></content>
      <categories>
        <category>exercise</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>exercise</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 가위바위보</title>
    <url>/2021/09/19/js-exercise018/</url>
    <content><![CDATA[<p>가위바위보 구현하기.</p>
<a id="more"></a>
<ul>
<li>자바스크립트 객체는 딕셔너리 자료구조 역할을 할 수 있다. 1:1 매핑을 표현한다.</li>
<li>딕셔너리 자료구조의 형태에서 1:다 형태는 배열로 표시할 수 있다. 보통 다국어시 사용한다.<ul>
<li>ex. rock: [rock, 0, 주먹…]</li>
</ul>
</li>
<li><code>object.entries</code>(객체)로 객체를 배열로 변경 가능하다.</li>
<li><code>배열.find</code>는 반복문이지만 원하는 것을 찾으면(<code>return</code>이 <code>true</code>) 멈춘다.</li>
<li>2차원 배열에서 <code>find</code>나 <code>findindex</code>를 많이 사용한다.</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>가위바위보<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        #computer &#123;</span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">600px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;computer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;scissor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>가위<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;rock&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>바위<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;paper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>보<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> computer = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> gameInfo = &#123;</span><br><span class="line">    scissor: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    rock: <span class="string">&#x27;-200px&#x27;</span>,</span><br><span class="line">    paper: <span class="string">&#x27;-400px&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> findArray = object.entries(gameInfo).find(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v[<span class="number">0</span>] === <span class="string">&#x27;scissor&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(computer == gameInfo.rock) &#123;</span><br><span class="line">        computer = gameInfo.scissor;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (computer == gameInfo.scissor) &#123;</span><br><span class="line">        computer = gameInfo.paper;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        computer = gameInfo.rock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#computer&#x27;</span>).style.background = <span class="string">&#x27;url(img.jpg) &#x27;</span> + computer + <span class="string">&#x27; 0&#x27;</span>;</span><br><span class="line">&#125;, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.btn&#x27;</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">btn</span>) </span>&#123;</span><br><span class="line">    btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> mine = <span class="built_in">this</span>.textContent;</span><br><span class="line">        <span class="built_in">console</span>.log(mine, game[computer]);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>exercise</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>exercise</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 함수</title>
    <url>/2020/08/16/js-function/</url>
    <content><![CDATA[<p>일련의 과정을 문(statement)들로 구현하고 코드 블록으로 감싸서 하나의 실행 단위로 정의한 것. 함수는 함수 정의를 통해 생성한다. 함수는 객체이며 일반 객체에는 없는 함수 객체만의 고유한 프로퍼티를 가지고 있다.</p>
<a id="more"></a>

<h2 id="함수를-사용하는-이유"><a href="#함수를-사용하는-이유" class="headerlink" title="함수를 사용하는 이유"></a>함수를 사용하는 이유</h2><ol>
<li>코드의 재사용</li>
<li>유지보수의 편의성을 높이고 실수를 줄여 코드의 신뢰성을 높임</li>
<li>코드의 가독성을 향상</li>
</ol>
<h2 id="함수-리터럴"><a href="#함수-리터럴" class="headerlink" title="함수 리터럴"></a>함수 리터럴</h2><p><img src="/images/function.jpg" alt="함수리터럴" title="함수 리터럴"></p>
<p>함수 리터럴은 function 키워드, 함수 이름,매개변수 목록, 함수 몸체로 구성되어 있다.</p>
<ul>
<li>함수 이름<ul>
<li>식별자이기 때문에 식별자 네이밍 규칙을 준수해야 함.</li>
<li>함수 몸체 내에서만 참조할 수 있다.</li>
<li>생략할 수 있다. 이름이 있으면 기명 함수, 없으면 익명 함수라고 부른다.</li>
</ul>
</li>
<li>매개변수 목록<ul>
<li>0개 이상의 매개변수를 괄호로 감싸고 쉼표로 구분.</li>
<li>함수 몸체 내에서 변수와 동일하게 취급되기 때문에 식별자 네이밍 규칙을 준수해야 함.</li>
</ul>
</li>
<li>함수 몸체<ul>
<li>호출되었을 때 실행될 문들을 하나의 실행단위로 정의한 코드 블록이다.</li>
<li>함수 호출에 의해 실행됨.</li>
</ul>
</li>
</ul>
<h2 id="함수-정의"><a href="#함수-정의" class="headerlink" title="함수 정의"></a>함수 정의</h2><h3 id="함수를-정의하는-법"><a href="#함수를-정의하는-법" class="headerlink" title="함수를 정의하는 법"></a>함수를 정의하는 법</h3><ol>
<li>함수 선언문(Function Declaration/Function Statement)</li>
<li>함수 표현식(Function Expression)</li>
<li>Function 생성자 함수(Function Constructor)</li>
<li>화살표 함수(Arrow Function): ES6</li>
</ol>
<blockquote>
<p><strong><u>변수 선언과 함수 정의</u></strong><br>함수 선언문이 평가되면 식별자가 암묵적으로 생성이 되고 함수 객체가 할당되기 때문에 변수는 선언, 함수는 정의된다는 표현을 사용하고 있다.</p>
</blockquote>
<h3 id="함수-선언문"><a href="#함수-선언문" class="headerlink" title="함수 선언문"></a>함수 선언문</h3><p>함수 리터럴 표기법과 동일하지만 함수 선언문은 함수 이름을 생략할 수 없다. 함수 이름과 동일한 이름의 식별자를 암묵적으로 선언하고 생성된 함수 객체를 할당한다. 함수 이름으로 호출하는 것이 아니라 함수 객체를 가리키는 식별자로 호출한다. 함수 선언문은 표현식이 아닌 문이다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.dir(add); <span class="comment">// f add(X, y)</span></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>


<h3 id="함수-표현식"><a href="#함수-표현식" class="headerlink" title="함수 표현식"></a>함수 표현식</h3><p>자바스크립트의 함수는 <strong>일급 객체</strong> 이기 때문에 함수를 값처럼 자유롭게 사용할 수 있다. 함수 표현식의 함수 리터럴은 이름을 생략하는 것이 일반적이다. 함수 이름은 함수 몸체 내부에서만 유효하므로 함수 이름으로 함수를 호출할 수는 없다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>


<h3 id="함수-생성-시점과-함수-호이스팅"><a href="#함수-생성-시점과-함수-호이스팅" class="headerlink" title="함수 생성 시점과 함수 호이스팅"></a>함수 생성 시점과 함수 호이스팅</h3><ul>
<li>함수 선언문으로 정의한 함수와 함수 표현식으로 정의한 함수의 생성 시점은 다르다.</li>
<li><strong><u>함수 선언문</u></strong> 으로 정의하게 될 경우 자바스크립트 엔진이 다른 코드가 실행되기 전에 함수 객체를 생성하고 함수 이름과 동일한 변수에 할당까지 완료한다.</li>
<li><strong><u>함수 표현식</u></strong> 을 정의했을 때 함수 표현식 이전에 함수를 참조하면 undefined가 반환되는데, 이때 호출하게 되면 undefined를 호출하게 되는 것이므로 타입에러가 발생한다.</li>
</ul>
<blockquote>
<p><strong>함수 호이스팅</strong><br>함수 선언문이 코드의 맨 위로 끌어올려진 것처럼 동작한다. 선언 단계, 초기화 단계, 할당 단계 전부 동시에 진행된다.</p>
</blockquote>
<blockquote>
<p><strong>변수 호이스팅</strong><br>선언 단계와 초기화 단계가 동시에 진행된다. 다른 코드가 실행되기 이전에 암묵적으로 수행됨.</p>
</blockquote>
<h3 id="Function-생성자-함수"><a href="#Function-생성자-함수" class="headerlink" title="Function 생성자 함수"></a>Function 생성자 함수</h3><ul>
<li>매개변수 목록과 함수 몸체를 문자열로 전달받는다.</li>
<li>new 연산자와 함께 호출하고 생성된 함수 객체를 반환. (new 연산자없이 호출해도 결과는 동일.)</li>
<li>클로저를 생성하지 않는다.</li>
</ul>
<blockquote>
<p><strong>생성자 함수</strong>: 객체를 생성하는 함수.</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;return x + y&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>


<h3 id="화살표-함수"><a href="#화살표-함수" class="headerlink" title="화살표 함수"></a>화살표 함수</h3><ul>
<li>function 키워드 대신 화살표(=&gt;, Fat arrow)를 사용하여 함수를 선언할 수 있다.</li>
<li>항상 익명 함수로 정의한다.</li>
<li>기존 함수와 this 바인딩 방식이 다르다.</li>
<li>prototype 프로퍼티가 없다.</li>
<li>arguments 객체를 생성하지 않는다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y;</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>


<h2 id="함수-호출"><a href="#함수-호출" class="headerlink" title="함수 호출"></a>함수 호출</h2><p>함수를 참조하는 변수와 한 쌍의 소괄호인 함수 호출 연산자로 호출한다. 함수 호출 연산자 내에는 0개 이상의 인수(argument)를 쉼표로 구분하여 나열하고, 매개변수에 할당할 수 있는 값이어야 한다.</p>
<h3 id="매개변수와-인수"><a href="#매개변수와-인수" class="headerlink" title="매개변수와 인수"></a>매개변수와 인수</h3><p>함수가 호출되면 함수 몸체 내에서 암묵적으로 매개변수가 생성된다. 변수와 마찬가지로 undefined로 초기화되고, 인수가 할당된다.</p>
<ul>
<li>매개변수의 스코프는 함수 내부이다.</li>
<li>매개변수의 갯수만큼 인수를 전달하지 않아도 오류가 발생하지는 않는다.<ul>
<li>인수가 부족한 경우 매개 변수의 값은 undefined.</li>
<li>인수가 초과하는 경우 초과되는 인수는 무시되며 모든 인수는 암묵적으로 arguments 객체의 프로퍼티로 보관된다.</li>
</ul>
</li>
</ul>
<h3 id="인수-확인"><a href="#인수-확인" class="headerlink" title="인수 확인"></a>인수 확인</h3><p>자바스크립트 함수는 매개변수와 인수의 개수가 일치하는지 따로 확인하지 않고 타입을 사전에 지정하지 않기 때문에 적절한 인수가 전달되었는지 확인이 필요하다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> x !== <span class="string">&#x27;number&#x27;</span> || <span class="keyword">typeof</span> y !== <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;숫자 타입이 아닌 값입니다.&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">2</span>));</span><br><span class="line"><span class="comment">// TypeError: 숫자 타입이 아닌 값입니다.</span></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>));</span><br><span class="line"><span class="comment">// TypeError: 숫자 타입이 아닌 값입니다.</span></span><br></pre></td></tr></table></figure>


<h3 id="매개변수의-개수"><a href="#매개변수의-개수" class="headerlink" title="매개변수의 개수"></a>매개변수의 개수</h3><p><strong>순서에 의미</strong> 가 있으므로 매개변수가 많으면 많을 수록 실수를 발생시킬 가능성이 높아진다. 또한 개수나 순서가 변경되게 되면 호출 방법도 변경되므로 함수의 코드 전체가 영향을 받는다. 매개변수의 개수가 많으면 함수가 여러가지 일을 한다는 증거이므로 바람직하지 않다. 그러므로 <strong>매개변수는 최대 3개 이상을 넘지 않는 것을 권장</strong> 한다.</p>
<h3 id="반환문"><a href="#반환문" class="headerlink" title="반환문"></a>반환문</h3><ul>
<li>함수의 실행을 중단하고 함수 몸체를 빠져나간다.</li>
<li>반환문은 return 키워드 뒤에 지정한 값을 반환한다.</li>
<li>반환문을 생략할 수 있다. undefined 반환.</li>
<li>return 키워드와 반환값 사이에 줄바꿈이 있으면 세미콜론이 자동으로 추가된다.</li>
</ul>
<h2 id="다양한-함수의-형태"><a href="#다양한-함수의-형태" class="headerlink" title="다양한 함수의 형태"></a>다양한 함수의 형태</h2><h3 id="즉시실행함수"><a href="#즉시실행함수" class="headerlink" title="즉시실행함수"></a>즉시실행함수</h3><ul>
<li>함수의 정의와 함께 즉시 호출된다.</li>
<li>한번만 호출되며 다시 호출할 수 없다.</li>
<li>익명 즉시 실행 함수를 사용하는 것이 일반적이다.</li>
<li>기명 즉시 실행 함수도 사용 가능하지만 함수 이름은 함수 몸체에만 참조할 수 있으므로 이름이 있다고 하더라도 다시 호출할 수는 없다.</li>
<li>그룹 연산자(…)로 감싸주어야 한다. 그렇지 않으면 오류 발생.</li>
<li>일반 함수처럼 값을 반환할 수 있고 인수를 전달할 수도 있다.</li>
<li>혹시 있을 수도 있는 변수나 함수 이름이 충돌하는 것을 방지할 수 있다.</li>
<li>함수 선언문이나 함수 표현식을 그룹 연산자로 감싸면 함수가 평가되어 함수 객체가 된다. 가장 일반적인 방식은 첫번째 방식이다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">!<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">+<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure>


<h3 id="재귀-함수"><a href="#재귀-함수" class="headerlink" title="재귀 함수"></a>재귀 함수</h3><ul>
<li>함수가 자기 자신을 호출하는 함수이다.</li>
<li>자신을 무한히 호출하므로 호출을 멈출 수 있는 탈출 조건을 만들어두어야 한다.</li>
<li>무한 반복에 빠질 수 있고 stack overflow 에러를 발생시킬 수 있다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 팩토리얼(계승)은 1부터 자신까지의 모든 양의 정수의 곱이다.</span></span><br><span class="line"><span class="comment">// n! = 1 * 2 * ... * (n-1) * n</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 탈출 조건: n이 1 이하일 때 재귀 호출을 멈춘다.</span></span><br><span class="line">  <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> factorial(n - <span class="number">1</span>) * n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(factorial(<span class="number">0</span>)); <span class="comment">// 0! = 1</span></span><br><span class="line"><span class="built_in">console</span>.log(factorial(<span class="number">1</span>)); <span class="comment">// 1! = 1</span></span><br><span class="line"><span class="built_in">console</span>.log(factorial(<span class="number">2</span>)); <span class="comment">// 2! = 1 * 2 = 2</span></span><br><span class="line"><span class="built_in">console</span>.log(factorial(<span class="number">3</span>)); <span class="comment">// 3! = 1 * 2 * 3 = 6</span></span><br></pre></td></tr></table></figure>


<h3 id="중첩-함수"><a href="#중첩-함수" class="headerlink" title="중첩 함수"></a>중첩 함수</h3><ul>
<li>함수 내부에 정의된 함수. 내부 함수라고도 한다.</li>
<li>자신을 포함하는 외부 함수를 돕는 헬퍼 함수 역할을 한다.</li>
<li>외부 함수의 변수에 접근할 수 있다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 중첩 함수</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(x + y); <span class="comment">// 3</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  inner();</span><br><span class="line">  <span class="built_in">console</span>.log(x + y);</span><br><span class="line">  <span class="comment">// ReferenceError: y is not defined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">outer();</span><br></pre></td></tr></table></figure>


<h3 id="콜백-함수"><a href="#콜백-함수" class="headerlink" title="콜백 함수"></a>콜백 함수</h3><p>자바스크립트의 함수 매개변수로 함수를 전달할 수 있는데, 매개변수로 전달하려는 함수를 콜백함수라고 한다.</p>
<blockquote>
<p><strong>고차 함수</strong>: 매개변수를 통해 함수를 전달받거나 반환값으로 함수를 반환하는 함수를 고차 함수라 한다.</p>
</blockquote>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://poiemaweb.com/">https://poiemaweb.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>function</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 연습문제</title>
    <url>/2022/01/09/js-exercise019/</url>
    <content><![CDATA[<p>연습문제.</p>
<a id="more"></a>

<h2 id="오늘-날짜-출력"><a href="#오늘-날짜-출력" class="headerlink" title="오늘 날짜 출력"></a>오늘 날짜 출력</h2><p>오늘 0000년00월00일 요일 시:분:초 순으로 날짜 객체로부터 받아와서 콘솔창에 출력하라. (요일정보는 배열데이터를 활용할 것)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">const</span> year = today.getFullYear();</span><br><span class="line"><span class="keyword">const</span> month = today.getMonth()+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> date = today.getDate();</span><br><span class="line"><span class="keyword">const</span> dayLabel = today.getDay();</span><br><span class="line"><span class="keyword">const</span> hours = today.getHours();</span><br><span class="line"><span class="keyword">const</span> minutes = today.getMinutes();</span><br><span class="line"><span class="keyword">const</span> seconds = today.getSeconds();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTodayLabel</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> week = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">&#x27;일요일&#x27;</span>, <span class="string">&#x27;월요일&#x27;</span>, <span class="string">&#x27;화요일&#x27;</span>, <span class="string">&#x27;수요일&#x27;</span>, <span class="string">&#x27;목요일&#x27;</span>, <span class="string">&#x27;금요일&#x27;</span>, <span class="string">&#x27;토요일&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>().getDay();</span><br><span class="line">    <span class="keyword">const</span> todayLabel = week[today];</span><br><span class="line">    <span class="keyword">return</span> todayLabel;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;year&#125;</span>년 <span class="subst">$&#123;month&#125;</span>월 <span class="subst">$&#123;date&#125;</span>일 <span class="subst">$&#123;getTodayLabel()&#125;</span> <span class="subst">$&#123;hours&#125;</span>:<span class="subst">$&#123;minutes&#125;</span>:<span class="subst">$&#123;seconds&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> $today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">const</span> $cur_year = $today.getFullYear();</span><br><span class="line"><span class="keyword">const</span> $cur_month = $today.getMonth() + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> $cur_date = $today.getDate();</span><br><span class="line"><span class="keyword">const</span> $cur_day = $today.getDay();  <span class="comment">//0 ~ 6</span></span><br><span class="line"><span class="keyword">const</span> $yoil = [<span class="string">&quot;일&quot;</span>, <span class="string">&quot;월&quot;</span>, <span class="string">&quot;화&quot;</span>, <span class="string">&quot;수&quot;</span>, <span class="string">&quot;목&quot;</span>, <span class="string">&quot;금&quot;</span>, <span class="string">&quot;토&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> $cur_hour = $today.getHours();</span><br><span class="line"><span class="keyword">const</span> $cur_min = $today.getMinutes();</span><br><span class="line"><span class="keyword">const</span> $cur_sec = $today.getSeconds();</span><br><span class="line"><span class="built_in">console</span>.log($cur_year + <span class="string">&quot;년 &quot;</span> + $cur_month + <span class="string">&quot;월 &quot;</span> + $cur_date + <span class="string">&quot;일 &quot;</span> + $yoil[$cur_day] + <span class="string">&quot;요일 &quot;</span> + $cur_hour + <span class="string">&quot; : &quot;</span> + $cur_min + <span class="string">&quot; : &quot;</span> + $cur_sec);</span><br></pre></td></tr></table></figure>

<h2 id="아기-돼지-삼형제"><a href="#아기-돼지-삼형제" class="headerlink" title="아기 돼지 삼형제"></a>아기 돼지 삼형제</h2><p>객체 배열을 활용하여 문장을 완성하시오.</p>
<ul>
<li>첫째 아기 돼지, 움막, 둘째 아기 돼지, 나무집, 막내 아기 돼지, 벽돌집 각 데이터로 구성할 것</li>
<li>해당 항목은 key를 만들어서 각각 value값으로 넣어서 활용할 것</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">첫째 아기 돼지는 움막을 지었고, 둘째 아기 돼지는 나무집을 지었고, 막내 아기 돼지는 벽돌집을 지었습니다.</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> $brother = [</span><br><span class="line">    &#123;<span class="attr">$pig</span> : <span class="string">&quot;첫째 아기 돼지&quot;</span>, <span class="attr">$house</span> : <span class="string">&quot;움막&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">$pig</span> : <span class="string">&quot;둘째 아기 돼지&quot;</span>, <span class="attr">$house</span> : <span class="string">&quot;나무집&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">$pig</span> : <span class="string">&quot;막내 아기 돼지&quot;</span>, <span class="attr">$house</span> : <span class="string">&quot;벽돌집&quot;</span>&#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;$brother[<span class="number">0</span>].$pig&#125;</span>는 <span class="subst">$&#123;$brother[<span class="number">0</span>].$house&#125;</span>을 지었고, <span class="subst">$&#123;$brother[<span class="number">1</span>].$pig&#125;</span>는 <span class="subst">$&#123;$brother[<span class="number">1</span>].$house&#125;</span>을 지었고, <span class="subst">$&#123;$brother[<span class="number">2</span>].$pig&#125;</span>는 <span class="subst">$&#123;$brother[<span class="number">2</span>].$house&#125;</span>을 지었습니다.`</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> $brother = [</span><br><span class="line">    &#123;<span class="attr">$pig</span> : <span class="string">&quot;첫째 아기 돼지&quot;</span>, <span class="attr">$house</span> : <span class="string">&quot;움막&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">$pig</span> : <span class="string">&quot;둘째 아기 돼지&quot;</span>, <span class="attr">$house</span> : <span class="string">&quot;나무집&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">$pig</span> : <span class="string">&quot;막내 아기 돼지&quot;</span>, <span class="attr">$house</span> : <span class="string">&quot;벽돌집&quot;</span>&#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log($brother[<span class="number">0</span>].$pig+<span class="string">&quot;는 &quot;</span>+$brother[<span class="number">0</span>].$house+<span class="string">&quot;을 지었고, &quot;</span>+$brother[<span class="number">1</span>].$pig+<span class="string">&quot;는 &quot;</span>+$brother[<span class="number">1</span>].$house+<span class="string">&quot;을 지었고, &quot;</span>+$brother[<span class="number">2</span>].$pig+<span class="string">&quot;는 &quot;</span>+$brother[<span class="number">2</span>].$house+<span class="string">&quot;을 지었습니다.&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ex_02 = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;$brother.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;$brother.length - <span class="number">1</span>)&#123;  <span class="comment">//i = 0, 1</span></span><br><span class="line">        ex_02 += $brother[i].$pig+<span class="string">&quot;는 &quot;</span>+$brother[i].$house+<span class="string">&quot;을 지었고, &quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;  <span class="comment">//i = 2</span></span><br><span class="line">        ex_02 += $brother[i].$pig+<span class="string">&quot;는 &quot;</span>+$brother[i].$house+<span class="string">&quot;을 지었습니다.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(ex_02);</span><br></pre></td></tr></table></figure>

<h2 id="좋아하는-과일"><a href="#좋아하는-과일" class="headerlink" title="좋아하는 과일"></a>좋아하는 과일</h2><ul>
<li>빈 배열 데이터를 만드시오.</li>
<li>순차적으로 배열 데이터 내에 좋아하는 과일 5개를 for문을 활용하여 하나씩 추가해 주시기 바랍니다.</li>
<li>for문을 반복하는 과정에서 console.log($fav_arr)로 출력하되 하나씩 추가되는 과정을 모두 출력하시오.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> $fav_arr = [];</span><br><span class="line"><span class="keyword">const</span> $fruit = [<span class="string">&quot;사과&quot;</span>, <span class="string">&quot;오렌지&quot;</span>, <span class="string">&quot;바나나&quot;</span>, <span class="string">&quot;포도&quot;</span>, <span class="string">&quot;자두&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;$fruit.length; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log($fruit[i]);</span><br><span class="line">    $fav_arr.push($fruit[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log($fav_arr);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;$fruit.length; i++)&#123;</span><br><span class="line">    $fav_arr.push($fruit[i]);</span><br><span class="line">    <span class="built_in">console</span>.log($fav_arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="데이터-변경"><a href="#데이터-변경" class="headerlink" title="데이터 변경"></a>데이터 변경</h2><p>다음과 같이 데이터를 변경하시오. (splice 메서드 활용)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&quot;HTML&quot;, &quot;CSS&quot;, &quot;JAVASCRIPT&quot;, &quot;JQUERY&quot;];</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&quot;HTML&quot;, &quot;WEB&quot;, &quot;JAVASCRIPT&quot;, &quot;JQUERY&quot;];</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ex_04 = [<span class="string">&quot;HTML&quot;</span>, <span class="string">&quot;CSS&quot;</span>, <span class="string">&quot;JAVASCRIPT&quot;</span>, <span class="string">&quot;JQUERY&quot;</span>];</span><br><span class="line">ex_04.splice(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;WEB&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ex_04);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ex_04.splice(<span class="number">1</span>, <span class="number">1</span> , <span class="string">&quot;Bootstrap&quot;</span>, <span class="string">&quot;mySQL&quot;</span>, <span class="string">&quot;...&quot;</span>);  <span class="comment">//지정한 위치에 두개 이상의 데이터를 넣을 때</span></span><br><span class="line"><span class="built_in">console</span>.log(ex_04);</span><br></pre></td></tr></table></figure>

<h2 id="데이터-삽입"><a href="#데이터-삽입" class="headerlink" title="데이터 삽입"></a>데이터 삽입</h2><p>다음과 같이 배열 사이에 새로운 데이터를 넣으세요. (splice 메서드 활용 - 힌트 : 개수는 0개)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&quot;red&quot;, &quot;yellow&quot;, &quot;green&quot;, &quot;blue&quot;];</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&quot;red&quot;, &quot;orange&quot;, &quot;yellow&quot;, &quot;green&quot;, &quot;blue&quot;];</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ex_05 = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;yellow&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>];</span><br><span class="line">ex_05.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;orange&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ex_05);</span><br></pre></td></tr></table></figure>

<h2 id="여러-데이터-삽입"><a href="#여러-데이터-삽입" class="headerlink" title="여러 데이터 삽입"></a>여러 데이터 삽입</h2><p>다음과 같이 배열 데이터를 변경하세요. (splice 메서드만 활용 - 힌트 : 개수는 0개)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&quot;korea&quot;, &quot;USA&quot;, &quot;Brazil&quot;, &quot;France&quot;];</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&quot;korea&quot;, &quot;Japan&quot;, &quot;USA&quot;, &quot;Brazil&quot;, &quot;France&quot;, &quot;China&quot;]</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ex_06 = [<span class="string">&quot;korea&quot;</span>, <span class="string">&quot;USA&quot;</span>, <span class="string">&quot;Brazil&quot;</span>, <span class="string">&quot;France&quot;</span>];</span><br><span class="line">ex_06.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;Japan&#x27;</span>);</span><br><span class="line">ex_06.splice(<span class="number">5</span>, <span class="number">0</span>, <span class="string">&#x27;China&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ex_06);</span><br></pre></td></tr></table></figure>

<h2 id="배열-데이터-추출"><a href="#배열-데이터-추출" class="headerlink" title="배열 데이터 추출"></a>배열 데이터 추출</h2><p>다음과 같이 배열 데이터를 추출하시오 (slice 메서드 활용)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&quot;red&quot;, &quot;yellow&quot;, &quot;green&quot;, &quot;blue&quot;];</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&quot;yellow&quot;, &quot;green&quot;]</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ex_07 = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;yellow&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> result = ex_07.slice(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure>

<h2 id="배열-데이터-추출2"><a href="#배열-데이터-추출2" class="headerlink" title="배열 데이터 추출2"></a>배열 데이터 추출2</h2><p>다음과 같이 배열 데이터를 추출하시오.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&quot;red&quot;, &quot;yellow&quot;, &quot;green&quot;, &quot;blue&quot;];</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&quot;yellow&quot;, &quot;blue&quot;]</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> $color = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;yellow&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> ex_08 = [];</span><br><span class="line"><span class="keyword">const</span> result1 = $color.slice(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> result2 = $color.slice(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">ex_08.push(result1[<span class="number">0</span>]);</span><br><span class="line">ex_08.push(result2[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ex_08);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> $c_1 = $color.slice(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> $c_2 = $color.slice(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">const</span> ex_08 = ex_08.concat($c_1, $c_2);</span><br><span class="line"><span class="built_in">console</span>.log(ex_08);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;$color.length; i++)&#123;  <span class="comment">//0,1,2,3</span></span><br><span class="line">    <span class="keyword">if</span>(i % <span class="number">2</span> != <span class="number">0</span>)&#123;  <span class="comment">//1, 3</span></span><br><span class="line">        ex_08.push($color.slice(i, i+<span class="number">1</span>).join());</span><br><span class="line">        <span class="built_in">console</span>.log(ex_08);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(ex_08);</span><br></pre></td></tr></table></figure>

<h2 id="문자-데이터-변경"><a href="#문자-데이터-변경" class="headerlink" title="문자 데이터 변경"></a>문자 데이터 변경</h2><p>문자 데이터 “2021-08-23”에서 “20210823”으로 변경하시오. (아래 방법 중에서 선택하여 적용하시오)</p>
<ul>
<li>방법1 : split() 메서드 활용하여 join() 메서드 적용하기</li>
<li>방법2 : replace() 메서드 활용하기</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> $date_str = <span class="string">&quot;2021-08-23&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> date = $date_str.split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> result = date.join(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure>
<p><em><strong>방법2</strong></em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> $replace_date = $date_str.replace(<span class="regexp">/-/g</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log($replace_date);  <span class="comment">//20210823</span></span><br></pre></td></tr></table></figure>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>뷰(Vue.js) 프로그래밍 과정 _ 하이미디어 아카데미</p>
</blockquote>
]]></content>
      <categories>
        <category>exercise</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>exercise</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 이터러블</title>
    <url>/2020/09/15/js-iterable/</url>
    <content><![CDATA[<p>이터러블 프로토콜을 준수한 객체를 이터러블(iterable)라 한다. 이터러블은 for…of 문으로 순회할 수 있으며 스프레드 문법과 디스트럭처링 할당의 대상으로 사용할 수 있다.</p>
<a id="more"></a>

<h2 id="이터레이션-프로토콜"><a href="#이터레이션-프로토콜" class="headerlink" title="이터레이션 프로토콜"></a>이터레이션 프로토콜</h2><blockquote>
<p>이터레이션 프로토콜(iteration protocol)은 순회 가능한(iterable) 데이터 컬렉션(자료 구조)을 만들기 위해 ECMAScript 사양에 정의하여 미리 약속한 규칙이다.</p>
</blockquote>
<p>Well-known Symbol인 Symbol.iterator를 프로퍼티 키로 사용한 메소드를 직접 구현하거나 프로토타입 체인에 의한 상속을 통해 소유하고, Symbol.iterator 메소드를 호출하면 이터레이터 프로토콜을 준수한 이터레이터(iterator)를 반환한다. 이러한 규약을 이터러블 프로토콜이라 한다.</p>
<ul>
<li>이터러블 프로토콜<ul>
<li>Well-known Symbol인 Symbol.iterator를 프로퍼티 키로 사용한 메소드를 직접 구현하거나 프로토타입 체인에 의한 상속을 통해 소유한다.</li>
<li>Symbol.iterator 메소드를 호출하면 이터레이터 프로토콜을 준수한 이터레이터(iterator)를 반환한다.</li>
</ul>
</li>
<li>이터레이터 프로토콜<ul>
<li>이터러블의 Symbol.iterator 메소드를 호출하면 이터레이터 프로토콜을 준수한 이터레이터(iterator)를 반환한다.</li>
<li>이터레이터는 next 메소드를 소유하며 next 메소드를 호출하면 이터러블을 순회하며 value와 done 프로퍼티를 갖는 이터레이터 리절트 객체를 반환한다.</li>
</ul>
</li>
</ul>
<h3 id="이터러블"><a href="#이터러블" class="headerlink" title="이터러블"></a>이터러블</h3><p>이터러블 프로토콜을 준수한 객체를 이터러블(iterable)이라 한다. 즉, 이터러블은 Symbol.iterator을 프로퍼티 키로 사용한 메소드를 직접 구현하거나 프로토타입 체인에 의해 상속한 객체를 말한다.</p>
<ul>
<li>배열은 Array.prototype의 Symbol.iterator 메소드를 상속받는 이터러블이다.</li>
<li>Symbol.iterator 메소드를 직접 구현하지 않거나 상속받지 않은 일반 객체는 이터러블 프로토콜을 준수한 이터러블이 아니다.</li>
<li>일반 객체도 이터러블 프로토콜을 준수하도록 구현하면 이터러블이 된다.</li>
</ul>
<h3 id="이터레이터"><a href="#이터레이터" class="headerlink" title="이터레이터"></a>이터레이터</h3><ul>
<li>이터러블의 <strong>Symbol.iterator 메소드</strong> 를 호출하면 이터레이터 프로토콜을 준수한 이터레이터(iterator)를 반환한다.</li>
<li>이터러블의 Symbol.iterator 메소드가 반환한 이터레이터는 next 메소드를 갖는다.</li>
<li>next 메소드를 호출하면 이터러블을 순차적으로 한 단계씩 순회하며 순회 결과를 나타내는 이터레이터 리절트 객체(Iterator result object)를 반환한다.<ul>
<li>이터레이터 리절트 객체의 <strong>value 프로퍼티</strong> 는 현재 순회 중인 이터러블의 값을 나타낸다.</li>
<li>이터레이터 리절트 객체의 <strong>done 프로퍼티</strong> 는 이터러블의 순회 완료 여부를 나타낸다.</li>
</ul>
</li>
</ul>
<h2 id="빌트인-이터러블"><a href="#빌트인-이터러블" class="headerlink" title="빌트인 이터러블"></a>빌트인 이터러블</h2><p>자바스크립트는 이터레이션 프로토콜을 준수한 객체인 빌트인 이터러블을 제공한다.</p>
<table>
<thead>
<tr>
<th>빌트인 이터러블</th>
<th>프로퍼티 키가 Symbol.iterator인 메소드</th>
</tr>
</thead>
<tbody><tr>
<td>Array</td>
<td>Array.prototype[Symbol.iterator]</td>
</tr>
<tr>
<td>String</td>
<td>String.prototype[Symbol.iterator]</td>
</tr>
<tr>
<td>Map</td>
<td>Map.prototype[Symbol.iterator]</td>
</tr>
<tr>
<td>Set</td>
<td>Set.prototype[Symbol.iterator]</td>
</tr>
<tr>
<td>TypedArray</td>
<td>TypedArray.prototype[Symbol.iterator]</td>
</tr>
<tr>
<td>arguments</td>
<td>arguments[Symbol.iterator]</td>
</tr>
<tr>
<td>DOM 컬렉션</td>
<td>NodeList.prototype[Symbol.iterator], HTMLCollection.prototype[Symbol.iterator]</td>
</tr>
</tbody></table>
<h2 id="for…of문"><a href="#for…of문" class="headerlink" title="for…of문"></a>for…of문</h2><p>for…of 문은 이터러블을 순회하면서 이터러블의 요소를 변수에 할당한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (변수선언문 <span class="keyword">of</span> 이터러블) &#123; … &#125;</span><br></pre></td></tr></table></figure>

<p>내부적으로 이터레이터의 next 메소드를 호출하여 이터러블을 순회하며 next 메소드가 반환한 이터레이터 리절트 객체의 value 프로퍼티 값을 for…of 문의 변수에 할당한다. 그리고 <strong>이터레이터 리절트 객체의 done 프로퍼티 값이 false이면 이터러블의 순회를 계속하고 true이면 이터러블의 순회를 중단한다.</strong></p>
<p><em>for…in 문</em><br> 객체의 프로토타입 체인 상에 존재하는 모든 프로토타입의 프로퍼티 중에서 프로퍼티 어트리뷰트 [[Enumerable]]의 값이 true인 프로퍼티를 순회하며 열거(enumeration)한다. 이때 프로퍼티 키가 심볼인 프로퍼티는 열거하지 않으며 순서를 보장하지 않는다.</p>
<p>for…of 문은 for…in 문의 형식과 매우 유사하다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (변수선언문 <span class="keyword">in</span> 객체) &#123; … &#125;</span><br></pre></td></tr></table></figure>


<h2 id="이터러블과-유사배열-객체"><a href="#이터러블과-유사배열-객체" class="headerlink" title="이터러블과 유사배열 객체"></a>이터러블과 유사배열 객체</h2><p><strong>유사배열객체</strong> 는 마치 배열처럼 인덱스로 프로퍼티 값에 접근할 수 있고 length 프로퍼티를 갖는 객체를 말한다. length 프로퍼티를 갖기 때문에 for 문으로 순회할 수 있다.</p>
<blockquote>
<p>arguments, NodeList, HTMLCollection은 유사 배열 객체이면서 이터러블이다. 하지만 모든 유사 배열 객체가 이터러블인 것은 아니다.</p>
</blockquote>
<h2 id="이터레이션-프로토콜의-필요성"><a href="#이터레이션-프로토콜의-필요성" class="headerlink" title="이터레이션 프로토콜의 필요성"></a>이터레이션 프로토콜의 필요성</h2><p>이터레이션 프로토콜은 다양한 데이터 소스가 하나의 순회 방식을 갖도록 규정하여 데이터 소비자가 효율적으로 다양한 데이터 소스를 사용할 수 있도록 <strong>데이터 소비자와 데이터 소스를 연결하는 인터페이스의 역할을 한다.</strong></p>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://poiemaweb.com/">https://poiemaweb.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>iterable</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 수학 상수와 함수를 위한 Math 객체</title>
    <url>/2020/10/05/js-math-object/</url>
    <content><![CDATA[<p>Math 객체는 수학 상수와 함수를 위한 프로퍼티와 메소드를 제공하는 빌트인 객체이다. Math 객체는 생성자 함수가 아니다. 따라서 Math 객체는 정적(static) 프로퍼티와 메소드만을 제공한다.</p>
<a id="more"></a>

<h2 id="Math-Property"><a href="#Math-Property" class="headerlink" title="Math Property"></a>Math Property</h2><h3 id="Math-PI"><a href="#Math-PI" class="headerlink" title="Math.PI"></a>Math.PI</h3><p>PI 값(π ≈ 3.141592653589793)을 반환한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.PI; <span class="comment">// 3.141592653589793</span></span><br></pre></td></tr></table></figure>


<h2 id="Math-Method"><a href="#Math-Method" class="headerlink" title="Math Method"></a>Math Method</h2><h3 id="Math-abs-x-number-number-ES1"><a href="#Math-abs-x-number-number-ES1" class="headerlink" title="Math.abs(x: number): number ES1"></a>Math.abs(x: number): number <sup>ES1</sup></h3><p>인수의 절댓값(absolute value)을 반환한다. 절댓값은 반드시 0 또는 양수이어야 한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.abs(-<span class="number">1</span>);       <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">Math</span>.abs(<span class="string">&#x27;-1&#x27;</span>);     <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">Math</span>.abs(<span class="string">&#x27;&#x27;</span>);       <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Math</span>.abs([]);       <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Math</span>.abs(<span class="literal">null</span>);     <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Math</span>.abs(<span class="literal">undefined</span>);<span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Math</span>.abs(&#123;&#125;);       <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Math</span>.abs(<span class="string">&#x27;string&#x27;</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Math</span>.abs();         <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure>


<h3 id="Math-round-x-number-number-ES1"><a href="#Math-round-x-number-number-ES1" class="headerlink" title="Math.round(x: number): number ES1"></a>Math.round(x: number): number <sup>ES1</sup></h3><p>인수의 소수점 이하를 반올림한 정수를 반환한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.round(<span class="number">1.4</span>);  <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">Math</span>.round(<span class="number">1.6</span>);  <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">Math</span>.round(-<span class="number">1.4</span>); <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">Math</span>.round(-<span class="number">1.6</span>); <span class="comment">// -2</span></span><br><span class="line"><span class="built_in">Math</span>.round(<span class="number">1</span>);    <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">Math</span>.round();     <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure>


<h3 id="Math-ceil-x-number-number-ES1"><a href="#Math-ceil-x-number-number-ES1" class="headerlink" title="Math.ceil(x: number): number ES1"></a>Math.ceil(x: number): number <sup>ES1</sup></h3><p>인수의 소수점 이하를 올림한 정수를 반환한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.ceil(<span class="number">1.4</span>);  <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">Math</span>.ceil(<span class="number">1.6</span>);  <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">Math</span>.ceil(-<span class="number">1.4</span>); <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">Math</span>.ceil(-<span class="number">1.6</span>); <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">Math</span>.ceil(<span class="number">1</span>);    <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">Math</span>.ceil();     <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure>


<h3 id="Math-floor-x-number-number-ES1"><a href="#Math-floor-x-number-number-ES1" class="headerlink" title="Math.floor(x: number): number ES1"></a>Math.floor(x: number): number <sup>ES1</sup></h3><p>인수의 소수점 이하를 내림한 정수를 반환한다. Math.ceil의 반대 개념이다.</p>
<ul>
<li>양수인 경우, 소수점 이하를 떼어 버린 다음 정수를 반환한다.</li>
<li>음수인 경우, 소수점 이하를 떼어 버린 다음 -1을 한 정수를 반환한다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.floor(<span class="number">1.9</span>);  <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">Math</span>.floor(<span class="number">9.1</span>);  <span class="comment">// 9</span></span><br><span class="line"><span class="built_in">Math</span>.floor(-<span class="number">1.9</span>); <span class="comment">// -2</span></span><br><span class="line"><span class="built_in">Math</span>.floor(-<span class="number">9.1</span>); <span class="comment">// -10</span></span><br><span class="line"><span class="built_in">Math</span>.floor(<span class="number">1</span>);    <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">Math</span>.floor();     <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure>


<h3 id="Math-sqrt-x-number-number-ES1"><a href="#Math-sqrt-x-number-number-ES1" class="headerlink" title="Math.sqrt(x: number): number ES1"></a>Math.sqrt(x: number): number <sup>ES1</sup></h3><p>인수의 제곱근을 반환한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.sqrt(<span class="number">9</span>);  <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">Math</span>.sqrt(-<span class="number">9</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Math</span>.sqrt(<span class="number">2</span>);  <span class="comment">// 1.414213562373095</span></span><br><span class="line"><span class="built_in">Math</span>.sqrt(<span class="number">1</span>);  <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">Math</span>.sqrt(<span class="number">0</span>);  <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Math</span>.sqrt();   <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure>


<h3 id="Math-random-number-ES1"><a href="#Math-random-number-ES1" class="headerlink" title="Math.random(): number ES1"></a>Math.random(): number <sup>ES1</sup></h3><p>임의의 부동 소수점을 반환한다. 반환된 부동 소수점은 0부터 1 미만이다. 즉, 0은 포함되지만 1은 포함되지 않는다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.random(); <span class="comment">// 0 ~ 1 미만의 부동 소수점 (0.8208720231391746)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> random = <span class="built_in">Math</span>.floor((<span class="built_in">Math</span>.random() * <span class="number">10</span>) + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(random); <span class="comment">// 1 ~ 10까지의 정수</span></span><br></pre></td></tr></table></figure>


<h3 id="Math-pow-x-number-y-number-number-ES1"><a href="#Math-pow-x-number-y-number-number-ES1" class="headerlink" title="Math.pow(x: number, y: number): number ES1"></a>Math.pow(x: number, y: number): number <sup>ES1</sup></h3><p>첫번째 인수를 밑(base), 두번째 인수를 지수(exponent)로하여 거듭제곱을 반환한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">8</span>);  <span class="comment">// 256</span></span><br><span class="line"><span class="built_in">Math</span>.pow(<span class="number">2</span>, -<span class="number">1</span>); <span class="comment">// 0.5</span></span><br><span class="line"><span class="built_in">Math</span>.pow(<span class="number">2</span>);     <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span> ** <span class="number">8</span>; <span class="comment">// 256</span></span><br></pre></td></tr></table></figure>


<h3 id="Math-max-…values-number-number-ES1"><a href="#Math-max-…values-number-number-ES1" class="headerlink" title="Math.max(…values: number[]): number ES1"></a>Math.max(…values: number[]): number <sup>ES1</sup></h3><p>인수 중에서 가장 큰 수를 반환한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.max(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 배열 요소 중에서 최대값 취득</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> max = <span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, arr); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 Spread operator</span></span><br><span class="line"><span class="built_in">Math</span>.max(...arr); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>


<h3 id="Math-min-…values-number-number-ES1"><a href="#Math-min-…values-number-number-ES1" class="headerlink" title="Math.min(…values: number[]): number ES1"></a>Math.min(…values: number[]): number <sup>ES1</sup></h3><p>인수 중에서 가장 작은 수를 반환한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.min(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 배열 요소 중에서 최소값 취득</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> min = <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>, arr); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 Spread operator</span></span><br><span class="line"><span class="built_in">Math</span>.min(...arr); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://poiemaweb.com/">https://poiemaweb.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>object</tag>
        <tag>built-in object</tag>
        <tag>wrapper object</tag>
        <tag>math object</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 객체</title>
    <url>/2020/08/17/js-object/</url>
    <content><![CDATA[<p>자바스크립트는 객체 기반의 프로그래밍 언어이다. 원시 타입을 제외한 나머지 값들은 모두 객체이다.</p>
<ul>
<li><strong>프로퍼티</strong>: 객체의 상태를 나타내는 값(data).</li>
<li><strong>메소드</strong>: 프로퍼티를 참조하고 조작할 수 있는 동작(behavior). 프로퍼티의 값이 함수일 경우에 일반 함수와 구분하기 위해 메소드라 부름.</li>
</ul>
<a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> animal = &#123;</span><br><span class="line">  name: <span class="string">&#x27;bunny&#x27;</span>, <span class="comment">// 프로퍼티</span></span><br><span class="line">  introduction: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`My name is <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>.`</span>);</span><br><span class="line">  &#125; <span class="comment">//메소드</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="리터럴을-생성하는-방법"><a href="#리터럴을-생성하는-방법" class="headerlink" title="리터럴을 생성하는 방법"></a>리터럴을 생성하는 방법</h3><ul>
<li>객체 리터럴</li>
<li>Object 생성자 함수</li>
<li>생성자 함수</li>
<li>Object.create 메소드</li>
<li>클래스 (ES6)</li>
</ul>
<h2 id="객체-리터럴에-의한-객체-생성"><a href="#객체-리터럴에-의한-객체-생성" class="headerlink" title="객체 리터럴에 의한 객체 생성"></a>객체 리터럴에 의한 객체 생성</h2><ul>
<li>가장 일반적이고 간단한 방법</li>
<li>다양한 타입의 값을 생성할 수 있다.</li>
<li>중괄호 안에 0개 이상의 프로퍼티를 정의.</li>
<li>객체 리터럴의 중괄호는 코드블록이 아니기 때문에 세미콜론을 붙인다. (표현식)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> animal = &#123;</span><br><span class="line">  name: <span class="string">&#x27;bunny&#x27;</span>,</span><br><span class="line">  introduction: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`My name is <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> animal); <span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.log(animal); <span class="comment">// &#123;name: &quot;bunny&quot;, introduction: ƒ&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="프로퍼티"><a href="#프로퍼티" class="headerlink" title="프로퍼티"></a>프로퍼티</h2><ul>
<li>객체는 프로퍼티(property)들의 집합</li>
<li>프로퍼티는 키(key)와 값(value)로 구성되어 있으며 쉼표로 구분한다. (맨 마지막 프로퍼티에는 사용해도, 하지 않아도 괜찮다.)</li>
<li>프로퍼티 키와 프로퍼티 값으로 사용할 수 있는 값<ul>
<li><strong>프로퍼티 키</strong>: 빈 문자열을 포함한 모든 문자열(string) 또는 심볼값. 식별자 네이밍 규칙을 따르지 않는 이름에는 반드시 따옴표를 사용하여야 한다. 따옴표를 쓰지 않을 시 SyntaxError.<ol>
<li>첫번째 글자는 반드시 문자, 밑줄(<code>_</code>), 달러 기호 (<code>$</code>)중 하나로 시작한다.</li>
<li>띄어쓰기나 하이픈(<code>-</code>)을 사용하면 안 된다.</li>
</ol>
</li>
<li><strong>프로퍼티 값</strong>: 자바스크립트에서 사용할 수 있는 모든 자료형이 들어갈 수 있다.</li>
</ul>
</li>
<li><strong>프로퍼티 키에 문자열이나 심볼값 이외의 값을 사용하면 암묵적 타입 변환이 되어 <u>문자열</u></strong> 이 된다.</li>
<li>프로퍼티 키를 중복 선언하면 나중에 선언한 프로퍼티가 먼저 선언한 프로퍼티를 덮어쓴다. 오류가 나지 않는다.</li>
<li>빈문자열을 프로퍼티 키로 사용해도 에러가 발생하지는 않으나 키의 의미를 갖지 못하므로 사용하지 않는 것이 좋다.</li>
<li>let, funtion 등의 예약어를 프로퍼티 키로 사용해도 에러가 발생하지는 않으나 에러가 발생할 여지가 있으므로 사용하지 않는 것이 좋다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> animal = &#123;</span><br><span class="line">  first_animal: <span class="string">&#x27;bunny&#x27;</span>, <span class="comment">// 유효한 이름</span></span><br><span class="line">  <span class="string">&#x27;2nd-animal&#x27;</span>: <span class="string">&#x27;rabbit&#x27;</span> <span class="comment">// 유효하지 않은 이름이기 때문에 따옴표 사용</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(animal);</span><br></pre></td></tr></table></figure>


<h3 id="계산된-프로퍼티-이름-Computed-Property-name"><a href="#계산된-프로퍼티-이름-Computed-Property-name" class="headerlink" title="계산된 프로퍼티 이름(Computed Property name)"></a>계산된 프로퍼티 이름(Computed Property name)</h3><p>문자열 또는 문자열로 변환 가능한 값을 반환하는 표현식을 사용해 프로퍼티 키를 동적으로 생성 가능하다. <u>프로퍼티 키로 사용할 표현식을 대괄호([ ])</u>로 묶어야 한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> animal = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> key = <span class="string">&#x27;bunny&#x27;</span>;</span><br><span class="line"></span><br><span class="line">animal[key] = <span class="string">&#x27;cute&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(animal); <span class="comment">// &#123;bunny: &quot;cute&quot;&#125;</span></span><br></pre></td></tr></table></figure>


<h2 id="메소드"><a href="#메소드" class="headerlink" title="메소드"></a>메소드</h2><p>객체에 제한되어 있는 함수. 연관성이 있는 함수를 한꺼번에 묶을 때에도 객체를 사용한다. 이런 함수를 객체의 메소드라고 한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> animal = &#123;</span><br><span class="line">  name: <span class="string">&#x27;bunny&#x27;</span>,</span><br><span class="line">  introduction: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(animal.introduction());</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> gretings = &#123;</span><br><span class="line">  sayHello: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    consonle.log(<span class="string">&#x27;HELLO&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  sayBye: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    consonle.log(<span class="string">&#x27;BYE&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greetings.sayHello(); <span class="comment">// HELLO</span></span><br><span class="line">greetings.sayHello(<span class="string">&#x27;bunny&#x27;</span>); <span class="comment">// HELLO bunny</span></span><br><span class="line">grettings[<span class="string">&#x27;sayHello&#x27;</span>](<span class="string">&#x27;bunny&#x27;</span>); <span class="comment">// HELLO bunny</span></span><br></pre></td></tr></table></figure>


<h2 id="프로퍼티-접근"><a href="#프로퍼티-접근" class="headerlink" title="프로퍼티 접근"></a>프로퍼티 접근</h2><ul>
<li>객체에서 데이터 접근하는 방법<ul>
<li>마침표 표기법(점표기법): 변수 삽입 불가능하다. ex) <code>animal.name</code></li>
<li>대괄호 표기법: 변수를 삽입할 수 있다. <strong>대괄호 내부에 지정하는 프로퍼티키는 반드시 따옴표로 감싼 문자열</strong> 이어야 한다. 단 <strong>프로퍼티 키가 숫자로 이루져 있는 경우 따옴표 생략 가능.</strong> ex) <code>animal[&#39;name&#39;]</code> → 자바스크립트 엔진은 대괄호 안에 이름이 따옴표로 감싸져 있지 않으면 식별자로 취급하기 때문.</li>
</ul>
</li>
<li>프로퍼티 키가 식별자 네이밍 규칙을 따르는 이름이면 마침표 / 대괄호 표기법 둘다 사용 가능하다.</li>
<li><strong>마침표 또는 대괄호 좌측</strong>: 객체로 평가할 수 있는 표현식 / <strong>우측&amp;대괄호 내부</strong>: 프로퍼티 키를 지정한다.</li>
<li>존재하지 않는 프로퍼티에 접근하면 <code>undeifned</code> 반환.</li>
</ul>
<h2 id="프로퍼티-값-갱신"><a href="#프로퍼티-값-갱신" class="headerlink" title="프로퍼티 값 갱신"></a>프로퍼티 값 갱신</h2><p>이미 존재하고 있는 프로퍼티에 값을 할당하면 갱신된다. (변수에 재할당하는 것과 비슷하다.)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> animal = &#123;</span><br><span class="line">  name: <span class="string">&#x27;snowball&#x27;</span>,</span><br><span class="line">  animal: <span class="string">&#x27;bunny&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(animal.name); <span class="comment">// snowball</span></span><br><span class="line">animal.name = <span class="string">&#x27;cute&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(animal.name); <span class="comment">// cute</span></span><br></pre></td></tr></table></figure>

<h2 id="프로퍼티-동적-생성"><a href="#프로퍼티-동적-생성" class="headerlink" title="프로퍼티 동적 생성"></a>프로퍼티 동적 생성</h2><p>존재하고 있지 않은 프로퍼티에 값을 할당하면 동적으로 생성되어 추가된 후에 할당까지 된다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> animal = &#123;</span><br><span class="line">  name: <span class="string">&#x27;snowball&#x27;</span>,</span><br><span class="line">  animal: <span class="string">&#x27;bunny&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(animal.like); <span class="comment">// undefined</span></span><br><span class="line">animal.like = <span class="string">&#x27;love&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(animal.name); <span class="comment">// love</span></span><br></pre></td></tr></table></figure>

<h2 id="프로퍼티-삭제"><a href="#프로퍼티-삭제" class="headerlink" title="프로퍼티 삭제"></a>프로퍼티 삭제</h2><ul>
<li>delete 연산자가 객체의 연산자를 삭제한다. 이때 delete 연산자의 피연산자는 프로퍼티 값에 접근이 가능한 표현식이어야 한다.</li>
<li>피연산자의 프로퍼티가 존재하지 않으면 무시됨.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> animal = &#123;</span><br><span class="line">  name: <span class="string">&#x27;snowball&#x27;</span>,</span><br><span class="line">  animal: <span class="string">&#x27;bunny&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(animal.animal); <span class="comment">// bunny</span></span><br><span class="line"><span class="keyword">delete</span> animal.animal;</span><br><span class="line"><span class="built_in">console</span>.log(animal.animal); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>예시</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myVoca = &#123;</span><br><span class="line">  addVoca: <span class="function"><span class="keyword">function</span> (<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">    myVoca[key] = value;</span><br><span class="line">  &#125;,</span><br><span class="line">  deleteVoca: <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">delete</span> myVoca[key];</span><br><span class="line">  &#125;,</span><br><span class="line">  printVoca: <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`&quot;<span class="subst">$&#123;key&#125;</span>&quot;의 뜻은 &quot;<span class="subst">$&#123;myVoca[key]&#125;</span>&quot;입니다.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="프로퍼티-존재-여부-확인"><a href="#프로퍼티-존재-여부-확인" class="headerlink" title="프로퍼티 존재 여부 확인"></a>프로퍼티 존재 여부 확인</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(animal.name !== <span class="literal">undefined</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> animal);</span><br><span class="line"><span class="comment">// 프로퍼티 in 객체이름 → 불리언값 리턴</span></span><br><span class="line"><span class="comment">// 프로퍼티 값에 undefined가 할당될 수 있으므로 in 연산자를 사용하는 것이 좋다.</span></span><br></pre></td></tr></table></figure>

<h2 id="for…in"><a href="#for…in" class="headerlink" title="for…in"></a>for…in</h2><p>프로퍼티 이름에는 숫자형(양수)를 작성해서 사용할 수는 있지만 사용될 때 문자열로 형변환이 된다. 이럴 경우 접근시에 대괄호표기법으로만 접근 가능하다. 객체는 <strong>정수형 프로퍼티 네임을 오름차순으로 먼저 정렬하고 나머지 프로퍼티들은 추가한 순서대로 정렬한다.</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (변수 <span class="keyword">in</span> 객체) &#123;</span><br><span class="line">  동작부분</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myObject = &#123;</span><br><span class="line">  <span class="string">&#x27;key1&#x27;</span>: <span class="string">&#x27;value1&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;key2&#x27;</span>: <span class="string">&#x27;value2&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;key3&#x27;</span>: <span class="string">&#x27;value3&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;key4&#x27;</span>: <span class="string">&#x27;value4&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> myObject) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key); <span class="comment">// key1</span></span><br><span class="line">  <span class="built_in">console</span>.log(myObject[key]); <span class="comment">// value1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="ES6에서-추가된-객체-리터럴의-확장-기능"><a href="#ES6에서-추가된-객체-리터럴의-확장-기능" class="headerlink" title="ES6에서 추가된 객체 리터럴의 확장 기능"></a>ES6에서 추가된 객체 리터럴의 확장 기능</h2><h3 id="프로퍼티-축약-표현"><a href="#프로퍼티-축약-표현" class="headerlink" title="프로퍼티 축약 표현"></a>프로퍼티 축약 표현</h3><p>ES6에서는 프로퍼티 값으로 변수를 사용하는 경우 변수와 프로퍼티 키의 이름이 동일하면 프로퍼티 키 생략 가능하다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> bunny = <span class="string">&#x27;cute&#x27;</span>, puppy = <span class="string">&#x27;sweet&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> obj = &#123; bunny, puppy &#125;;</span><br><span class="line"><span class="comment">// bunny:bunny, puppy:puppy와 동일</span></span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123;bunny: &#x27;cute&#x27;, puppy:&#x27;sweet&#x27;&#125;</span></span><br></pre></td></tr></table></figure>


<h3 id="프로퍼티-키-동적-생성"><a href="#프로퍼티-키-동적-생성" class="headerlink" title="프로퍼티 키 동적 생성"></a>프로퍼티 키 동적 생성</h3><p>ES5에서 프로퍼티키를 동적으로 생성하려면 객체 외부에서 대괄호 표기법을 사용해야 하지만 ES6에서는 객체 내부에서도 동적으로 프로퍼티 키를 생성할 수 있다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> animal = <span class="string">&#x27;bunny&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 객체 리터럴 내부에서 프로퍼티 키 동적 생성</span></span><br><span class="line"><span class="keyword">var</span> animal_family = &#123;</span><br><span class="line">  [<span class="string">`<span class="subst">$&#123;animal&#125;</span> <span class="subst">$&#123;++i&#125;</span>`</span>]: i,</span><br><span class="line">  [<span class="string">`<span class="subst">$&#123;animal&#125;</span> <span class="subst">$&#123;++i&#125;</span>`</span>]: i,</span><br><span class="line">  [<span class="string">`<span class="subst">$&#123;animal&#125;</span> <span class="subst">$&#123;++i&#125;</span>`</span>]: i</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(animal_family); <span class="comment">// &#123;bunny 1: 1, bunny 2: 2, bunny 3: 3&#125;</span></span><br></pre></td></tr></table></figure>


<h3 id="메소드-축약-표현"><a href="#메소드-축약-표현" class="headerlink" title="메소드 축약 표현"></a>메소드 축약 표현</h3><p>ES6에서는 메소드를 정의할 때 function 키워드를 생략하여 축약 표현을 사용할 수 있다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> animal = &#123;</span><br><span class="line">  name: <span class="string">&#x27;kitten&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;     <span class="comment">// sayHi: function() &#123;을 축약</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;mew mew &#x27;</span> + <span class="built_in">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">animal.sayHi(); <span class="comment">// mew mew kitten</span></span><br></pre></td></tr></table></figure>


<h2 id="프로퍼티-정의"><a href="#프로퍼티-정의" class="headerlink" title="프로퍼티 정의"></a>프로퍼티 정의</h2><ul>
<li>프로퍼티 어트리뷰트의 값을 정의하여 프로퍼티의 상태 관리한다.<ul>
<li>프로퍼티를 갱신 / 열거 / 재정의 가능하게 할 것인지 명확하게 정의</li>
</ul>
</li>
<li>프로퍼티를 생성할 때 프로퍼티의 상태를 나타내는 프로퍼티 어트리뷰트를 기본값으로 정의한다.</li>
<li>프로퍼티 동적 생성과 프로퍼티 정의는 다르다.<ul>
<li><strong>프로퍼티 동적 생성</strong>: 존재하지 않는 프로퍼티를 생성하여 추가</li>
<li><strong>프로퍼티 정의</strong>: 프로퍼티 어트리뷰트를 정의 (프로퍼티 값, 값의 갱신 여부, 열거 가능 여부, 재정의 가능 여부)</li>
</ul>
</li>
<li>Object.getOwnPropertyDescriptor 메소드를 사용해 참조 가능하다. 어트리뷰트 정보를 제공하는 객체인 프로퍼티 디스크립터(PropertyDescriptor) 반환</li>
<li>존재하지 않는 프로퍼티나 상속 받은 프로퍼티에 대한 프로퍼티 디스크립터를 요구하면 undefined 반환</li>
<li>인수는 객체의 참조와 데이터 프로퍼티의 키를 문자열로 전달</li>
<li>프로퍼티가 동적 생성될 때 자바스크립트 엔진은 프로퍼티 어트리뷰트를 기본값으로 정의하지만 이미 정의된 어트리뷰트를 재정의할 수도 있다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line">obj.prop = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, <span class="string">&#x27;prop&#x27;</span>);</span><br><span class="line"><span class="comment">// &#123;value: 1, writable: true, enumerable: true, configurable: true&#125;</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, <span class="string">&#x27;name&#x27;</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>


<ul>
<li><strong>데이터 프로퍼티</strong>: 키와 값으로 구성된 일반적인 프로퍼티. <u>value, writable, enumerable, configurable 프로퍼티 어트리뷰트</u>를 갖는다.</li>
<li><strong>접근자 프로퍼티</strong>: 자체적으로는 값을 갖고 있지 않지만 다른 데이터 프로퍼티 값을 읽거나 저장할 때 사용자는 접근자 함수로 구성되어 있는 프로퍼티. <u>get, set, enumerable, configurable 프로퍼티 어트리뷰트</u>를 갖는다.</li>
</ul>
<h2 id="내부-슬롯-메소드"><a href="#내부-슬롯-메소드" class="headerlink" title="내부 슬롯 / 메소드"></a>내부 슬롯 / 메소드</h2><p>자바스크립트 엔진이 코드를 실행하는 알고리즘을 설명하기 위해 ECMAScript 스펙에서 사용하는 의사 프로퍼티(Pseudo property)와 의사 메소드(Pseudo method). <strong>자바 스크립트 엔진의 내부 구현 사양 정의한 것</strong> 이라고 보면 됨. <strong>객체의 프로퍼티가 아니기 때문에 직접적으로 접근하거나 호출할 수 없다.</strong> 접근하고 싶다면 간접적으로 접근해야 한다.</p>
<h3 id="접근자-프로퍼티와-데이터-프로퍼티-구별-방법"><a href="#접근자-프로퍼티와-데이터-프로퍼티-구별-방법" class="headerlink" title="접근자 프로퍼티와 데이터 프로퍼티 구별 방법"></a>접근자 프로퍼티와 데이터 프로퍼티 구별 방법</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 일반 객체의 __proto__는 접근자 프로퍼티</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(<span class="built_in">Object</span>.prototype, <span class="string">&#x27;__proto__&#x27;</span>);</span><br><span class="line"><span class="comment">// &#123;get: ƒ, set: ƒ, enumerable: false, configurable: true&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 함수 객체의 prototype은 데이터 프로퍼티</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;, <span class="string">&#x27;prototype&#x27;</span>);</span><br><span class="line"><span class="comment">// &#123;value: &#123;…&#125;, writable: true, enumerable: false, configurable: false&#125;</span></span><br></pre></td></tr></table></figure>



<h2 id="접근자-프로퍼티"><a href="#접근자-프로퍼티" class="headerlink" title="접근자 프로퍼티"></a>접근자 프로퍼티</h2><ul>
<li>getter / setter 함수라고도 부른다. 둘다 정의해도 되고, 하나만 정의해도 된다.</li>
<li>자체적으로 값(value 프로퍼티)를 가지지 않으며 읽거나 저장할 때만 관여한다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  firstName: <span class="string">&#x27;Minjee&#x27;</span>,</span><br><span class="line">  lastName: <span class="string">&#x27;Kim&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// getter 함수</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title">fullName</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.lastName;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// setter 함수</span></span><br><span class="line">  <span class="keyword">set</span> <span class="title">fullName</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    [<span class="built_in">this</span>.firstName, <span class="built_in">this</span>.lastName] = name.split(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 데이터 프로퍼티를 통한 프로퍼티 값의 참조.</span></span><br><span class="line"><span class="built_in">console</span>.log(person.firstName + <span class="string">&#x27; &#x27;</span> + person.lastName); <span class="comment">// Minjee Kim</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 접근자 프로퍼티를 통한 프로퍼티 값의 저장</span></span><br><span class="line"><span class="comment">// 접근자 프로퍼티 fullName에 값을 저장하면 setter 함수가 호출.</span></span><br><span class="line">person.fullName = <span class="string">&#x27;Mia Kim&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person); <span class="comment">// &#123;firstName: &quot;Mia&quot;, lastName: &quot;Kim&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 접근자 프로퍼티를 통한 프로퍼티 값의 참조</span></span><br><span class="line"><span class="comment">// 접근자 프로퍼티 fullName에 접근하면 getter 함수가 호출.</span></span><br><span class="line"><span class="built_in">console</span>.log(person.fullName); <span class="comment">// Mia Kim</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(person, <span class="string">&#x27;firstName&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(descriptor);</span><br><span class="line"><span class="comment">// &#123;value: &quot;Mia&quot;, writable: true, enumerable: true, configurable: true&#125;</span></span><br><span class="line"></span><br><span class="line">descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(person, <span class="string">&#x27;fullName&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(descriptor);</span><br><span class="line"><span class="comment">// &#123;get: ƒ, set: ƒ, enumerable: true, configurable: true&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="프로퍼티-어트리뷰트"><a href="#프로퍼티-어트리뷰트" class="headerlink" title="프로퍼티 어트리뷰트"></a>프로퍼티 어트리뷰트</h2><ul>
<li><strong>프로퍼티 어트리뷰트</strong>: 모든 데이터 프로퍼티와 접근자 프로퍼티는 자신의 상태와 동작을 정의한 내부 슬롯과 내부 메소드를 가지고 있는데 이것을 프로퍼티 어트리뷰트라고 함.</li>
<li>자바 스크립트 엔진이 프로퍼티를 생성할 때 자동 정의됨.</li>
<li>각각의 프로퍼티의 세부 동작을 제어할 수 있음.</li>
</ul>
<p><em>데이터 어트리뷰트</em></p>
<table>
<thead>
<tr>
<th>프로퍼티 어트리뷰트</th>
<th>설명</th>
</tr>
</thead>
<tbody><tr>
<td>[[Value]]</td>
<td>프로퍼티 키로 프로퍼티 값에 접근하면 내부 메소드 [[Get]]에 의해 반환되는 값.</td>
</tr>
<tr>
<td>[[Writable]]</td>
<td>프로퍼티 값의 변경 가능 여부. <strong>불리언 값을 갖는다.</strong><br /><strong>값이 false인 경우, 해당 프로퍼티의 [[Value]]의 값을 변경할 수 없다.</strong></td>
</tr>
<tr>
<td>[[Enumerable]]</td>
<td>프로퍼티의 열거 가능 여부. <strong>불리언 값을 갖는다.</strong><br/>for…in 문 등으로 열거 불가.</td>
</tr>
<tr>
<td>[[Configurable]]</td>
<td>프로퍼티의 재정의 가능 여부. <strong>불리언 값을 갖는다.</strong> <br/> false인 경우, 해당 프로퍼티의 삭제, 프로퍼티 어트리뷰트 값의 변경이 금지된다.<br/>[[Writable]]이 true인 경우, [[Value]]의 변경과 [[Writable]]을 false로 변경하는 것은 가능.</td>
</tr>
</tbody></table>
<p><em>접근자 프로퍼티</em></p>
<table>
<thead>
<tr>
<th>프로퍼티 어트리뷰트</th>
<th>설명</th>
</tr>
</thead>
<tbody><tr>
<td>[[Get]]</td>
<td>접근자 프로퍼티 키로 프로퍼티 값에 <u>접근</u>하면 getter 함수가 호출되고 그 결과가 프로퍼티 값으로 <strong>반환</strong> 된다.</td>
</tr>
<tr>
<td>[[Set]]</td>
<td>접근자 프로퍼티 키로 프로퍼티 값을 <u>저장</u>하면 setter 함수가 호출되고 그 결과가 프로퍼티 값으로 <strong>저장</strong> 된다.</td>
</tr>
<tr>
<td>[[Enumerable]]</td>
<td>데이터 프로퍼티의 [[Enumerable]]와 동일</td>
</tr>
<tr>
<td>[[Configurable]]</td>
<td>데이터 프로퍼티의 [[Configurable]]와 동일</td>
</tr>
</tbody></table>
<p><em>Object.defineProperty 메소드로 정의할 때 프로퍼티 디스크립터 객체에서 누락된 어트리뷰트의 기본값</em></p>
<table>
<thead>
<tr>
<th>프로퍼티 디스크립터 객체의 프로퍼티</th>
<th>디스크립터 객체의 프로퍼티 누락시 기본값</th>
</tr>
</thead>
<tbody><tr>
<td>value</td>
<td>undefined</td>
</tr>
<tr>
<td>get</td>
<td>undefined</td>
</tr>
<tr>
<td>set</td>
<td>undefined</td>
</tr>
<tr>
<td>writable</td>
<td>false</td>
</tr>
<tr>
<td>enumerable</td>
<td>fasle</td>
</tr>
<tr>
<td>configurable</td>
<td>false</td>
</tr>
</tbody></table>
<h2 id="전역-객체-Global-Object"><a href="#전역-객체-Global-Object" class="headerlink" title="전역 객체 (Global Object)"></a>전역 객체 (Global Object)</h2><p>코드가 실행되기 이전 단계에 자바스크립트 엔진에 의해 생성되는 특수한 객체. 클라이언트 측 자바스크립트에서 제일 중요.</p>
<blockquote>
<p><strong>브라우저 환경</strong>: window(self, this, frames)<br><strong>Node.js</strong>: global</p>
</blockquote>
<h3 id="전역-객체의-특징"><a href="#전역-객체의-특징" class="headerlink" title="전역 객체의 특징"></a>전역 객체의 특징</h3><ul>
<li>개발자가 의도적으로 생성 불가.</li>
<li>전역 객체의 프로퍼티를 참조할 때, window(global)을 생략할 수 있다.</li>
<li>모든 표준 빌트인 객체를 프로퍼티로 가지고 있다.</li>
<li>실행 환경에 따라 추가적으로 프로퍼티와 메소드를 가질 수 있다.</li>
<li>var 키워드로 선언한 전역 변수 / 선언하지 않은 변수에 값을 할당한 암묵적 전역 변수 / 전역 함수는 전역 객체의 프로퍼티가 된다.</li>
</ul>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://poiemaweb.com/">https://poiemaweb.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>object</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 모듈</title>
    <url>/2020/10/10/js-module/</url>
    <content><![CDATA[<p>모듈이란 애플리케이션을 구성하는 개별적 요소로서 재사용 가능한 코드 조각을 말한다. 모듈은 세부 사항을 캡슐화하고 공개가 필요한 API만을 외부에 노출한다. 일반적으로 모듈은 파일 단위로 분리되어 있으며 애플리케이션은 필요에 따라 명시적으로 모듈을 로드하여 재사용한다.</p>
<a id="more"></a>

<p>script 태그에 <code>type=&quot;module&quot;</code> 어트리뷰트를 추가하면 로드된 자바스크립트 파일은 모듈로서 동작한다. ES6 모듈의 파일 확장자는 모듈임을 명확히 하기 위해 mjs를 사용하도록 권장한다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;lib.mjs&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;app.mjs&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="브라우저가-지원하는-ES6-모듈-기능보다는-Webpack-등의-모듈-번들러를-사용하는-이유"><a href="#브라우저가-지원하는-ES6-모듈-기능보다는-Webpack-등의-모듈-번들러를-사용하는-이유" class="headerlink" title="브라우저가 지원하는 ES6 모듈 기능보다는 Webpack 등의 모듈 번들러를 사용하는 이유"></a>브라우저가 지원하는 ES6 모듈 기능보다는 Webpack 등의 모듈 번들러를 사용하는 이유</h3><ul>
<li>IE를 포함한 구형 브라우저는 ES6 모듈을 지원하지 않는다.</li>
<li>브라우저의 ES6 모듈 기능을 사용하더라도 트랜스파일링이나 번들링이 필요하다.</li>
<li>아직 지원하지 않는 기능(Bare import 등)이 있다.</li>
<li>점차 해결되고는 있지만 아직 몇가지 이슈가 있다.</li>
</ul>
<h2 id="모듈-스코프"><a href="#모듈-스코프" class="headerlink" title="모듈 스코프"></a>모듈 스코프</h2><p>ES6 모듈 기능을 사용하지 않으면 분리된 자바스크립트 파일에 독자적인 스코프를 갖지 않고 하나의 전역을 공유한다. ES6 모듈은 독자적인 모듈 스코프를 갖는다. 따라서, 모듈 내에서 <code>var</code> 키워드로 선언한 변수는 더 이상 전역 변수가 아니며 window 객체의 프로퍼티도 아니다.</p>
<h2 id="export-키워드"><a href="#export-키워드" class="headerlink" title="export 키워드"></a>export 키워드</h2><p>듈 안에 선언한 식별자를 외부에 공개하여 다른 모듈들이 참조할 수 있게 하고 싶다면 export 키워드를 사용한다. 선언된 변수, 함수, 클래스 모두 export할 수 있다. export 대상을 모아 하나의 객체로 구성하여 한번에 export할 수도 있다.</p>
<h2 id="import-키워드"><a href="#import-키워드" class="headerlink" title="import 키워드"></a>import 키워드</h2><p>모듈에서 공개(export)한 대상을 로드하려면 import 키워드를 사용한다. 모듈이 export한 식별자로 import하며 ES6 모듈의 파일 확장자를 생략할 수 없다.</p>
<ul>
<li>모듈이 export한 식별자를 각각 지정하지 않고 하나의 이름으로 한꺼번에 import할 수도 있다.</li>
<li>이름을 변경하여 import할 수 있다.</li>
<li>모듈에서 하나만을 export할 때는 <code>default</code> 키워드를 사용할 수 있다.</li>
<li><code>default</code>를 사용하는 경우, <code>var</code>, <code>let</code>, <code>const</code>는 사용할 수 없다.</li>
<li><code>default</code> 키워드와 함께 export한 모듈은 <code>&#123;&#125;</code> 없이 임의의 이름으로 import한다.</li>
</ul>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://poiemaweb.com/">https://poiemaweb.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>es6</tag>
        <tag>module</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 전역 변수의 문제점</title>
    <url>/2020/08/18/js-global-variable/</url>
    <content><![CDATA[<p>전역 변수의 무분별한 사용은 위험하다. 전역 변수를 반드시 사용할 이유가 없다면 지역 변수를 사용하는 것이 좋다.</p>
<a id="more"></a>

<h2 id="전역-변수의-문제점"><a href="#전역-변수의-문제점" class="headerlink" title="전역 변수의 문제점"></a>전역 변수의 문제점</h2><h3 id="암묵적-결합"><a href="#암묵적-결합" class="headerlink" title="암묵적 결합"></a><em>암묵적 결합</em></h3><p>전역변수를 선언한 의도는 코드 어디에서든 전역 변수를 사용하겠다는 것이다. 모든 코드가 전역 변수를 참조하고 변경할 수 있는 <strong>암묵적 결합(implicit coupling)을 허용</strong> 한다.</p>
<h3 id="긴-생명주기"><a href="#긴-생명주기" class="headerlink" title="긴 생명주기"></a><em>긴 생명주기</em></h3><p><strong>전역 변수는 생명 주기가 길다.</strong> 전역 변수의 상태를 변경할 수 있는 시간도 길고, 모든 함수가 참조할 수 있기 때문에 상태를 변경할 기회도 많다. 또한 메모리 리소스도 오랜 기간 소비한다.  변수의 중복 선언을 허용하므로 변수 이름이 중복될 가능성이 있다.</p>
<h3 id="스코프-체인-상에서-종점에-존재"><a href="#스코프-체인-상에서-종점에-존재" class="headerlink" title="스코프 체인 상에서 종점에 존재"></a><em>스코프 체인 상에서 종점에 존재</em></h3><p><strong>스코프 체인 상에서 종점에 존재한다</strong>. 이는 변수를 검색할 때 전역 변수가 가장 마지막에 검색되어 전역 변수의 검색 속도가 가장 느리다.</p>
<h3 id="네임-스페이스-오염"><a href="#네임-스페이스-오염" class="headerlink" title="네임 스페이스 오염"></a><em>네임 스페이스 오염</em></h3><p>파일이 분리되어 있다하여도 하나의 전역 스코프를 공유하기 때문에 다른 파일 내에서 동일한 이름으로 명명된 변수나 함수가 같은 스코프 내에 존재할 경우 예상치 못한 결과를 가져올 수 있다.</p>
<h2 id="전역-변수-사용-억제-방법"><a href="#전역-변수-사용-억제-방법" class="headerlink" title="전역 변수 사용 억제 방법"></a>전역 변수 사용 억제 방법</h2><h3 id="즉시-실행-함수"><a href="#즉시-실행-함수" class="headerlink" title="즉시 실행 함수"></a><em>즉시 실행 함수</em></h3><p>모든 코드를 즉시 실행 함수로 감싸면 모든 변수는 즉시 실행 함수의 지역 변수가 된다.</p>
<h3 id="네임-스페이스-객체"><a href="#네임-스페이스-객체" class="headerlink" title="네임 스페이스 객체"></a><em>네임 스페이스 객체</em></h3><p>전역에 네임 스페이스(Namespace) 역할을 담당할 객체를 생성하고 전역 변수처럼 사용하고 싶은 변수를 프로퍼티로 추가한다. 네임 스페이스 객체에 또 다른 네임 스페이스 객체를 프로퍼티로 추가하여 네임 스페이스를 계층적으로 구성할 수도 있다. <strong>네임 스페이스를 분리하여 식별자 충돌을 방지하는 효과는 있으나 네임 스페이스 객체 자체가 전역 변수에 할당</strong> 된다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> MYAPP = &#123;&#125;; <span class="comment">// 전역 네임 스페이스 객체</span></span><br><span class="line"></span><br><span class="line">MYAPP.name = <span class="string">&#x27;kim&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(MYAPP.name); <span class="comment">// Kim</span></span><br></pre></td></tr></table></figure>


<h3 id="모듈-패턴"><a href="#모듈-패턴" class="headerlink" title="모듈 패턴"></a><em>모듈 패턴</em></h3><p>클래스를 모방하여 관련이 있는 변수와 함수를 모아 즉시 실행 함수로 감싸 하나의 모듈을 만든다. <strong>모듈 패턴은 자바스크립트의 강력한 기능인 클로저를 기반으로 동작한다.</strong> 모듈 패턴은 전역 변수의 억제는 물론 캡슐화까지 구현할 수 있다.</p>
<h3 id="ES6-모듈"><a href="#ES6-모듈" class="headerlink" title="ES6 모듈"></a><em>ES6 모듈</em></h3><p>script 태그에 <code>type=&quot;module&quot;</code> 어트리뷰트를 추가하면 로드된 자바스크립트 파일은 모듈로서 동작한다. 모듈의 파일 확장자는 mjs를 권장한다. 하지만 ES6 모듈은 IE를 포함한 구형 브라우저는 동작하지 않으며, 브라우저의 ES6 모듈 기능을 사용하더라도 트랜스파일링이나 번들링이 필요하다.</p>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://poiemaweb.com/">https://poiemaweb.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>global variable</tag>
      </tags>
  </entry>
  <entry>
    <title>자바스크립트 개요</title>
    <url>/2020/08/11/js-overview/</url>
    <content><![CDATA[<blockquote>
<p><strong>자바스크립트란?</strong></p>
</blockquote>
<p>1.인터프리터 언어이다.<br>2.동적 프로토타입 기반 객체 지향 언어이다.<br>3. 동적 타입 언어이다.<br>4. 함수가 일급 객체다.<br>5. 함수가 클로저를 정의한다.</p>
<a id="more"></a>

<h2 id="ECMAScript-6"><a href="#ECMAScript-6" class="headerlink" title="ECMAScript 6"></a>ECMAScript 6</h2><p>[ECMAScript 6 브라우저별 구현 상황] <a href="http://kangax.github.io/compat-table/es6/">http://kangax.github.io/compat-table/es6/</a></p>
<h2 id="작성법"><a href="#작성법" class="headerlink" title="작성법"></a>작성법</h2><ol>
<li>문자코드: 유니코드 문자로 작성</li>
<li>알파벳 대문자와 소문자 구별 (잘못 입력시 참조 오류 발생)</li>
<li>토큰과 공백 문자</li>
</ol>
<ul>
<li>토큰: 프로그램을 구성하는 최소단위</li>
<li>어휘 분석: 프로그램을 토큰으로 분해</li>
<li>구문분석(파싱): 구문 규약을 비추어 보았을 때 올바른 프로그램인지 판정</li>
<li>공백문자: 토큰과 토큰 사이에 공백 입력 (일본어 반각 스페이스 등 Zs에 포함된 모든 문자는 스페이스로 인식)</li>
<li>공백 문자 생략하는 경우: 산술 연산자 / 괄호 / 세미콜론 / 쉼표 / 콜론 / 마침표 앞뒤</li>
<li>공백 문자를 넣으므로써 프로그램 가독성 높임.</li>
</ul>
<ol start="4">
<li>문장</li>
</ol>
<ul>
<li>; (세미콜론)으로 문장을 끝맺음</li>
<li>한 줄에는 한 문장만 작성</li>
<li>복합문(블록문): 문장 여러 개를 중괄호({})로 감싼 코드. 세미콜론을 붙이지 않는다.</li>
<li>빈문장: 문장이 하나도 없는 문장. 세미콜론으로 작성.</li>
<li>세미콜론 자동추가: 문장을 작성하고 다음 줄에 문장을 작성하면 앞 문장 끝에 세미콜론이 없어도 암묵적으로 세미콜론 추가됨. 단, 다음 줄가 이어지고 있다고 판단되면 자동으로 추가하지 않는다.</li>
<li>자동 삽입 규칙 예외: return문, break문, continue문(ex: return(개행)1; 의 경우 return;1;로 해석된다.)</li>
</ul>
<ol start="5">
<li>주석: 소스코드에 삽입하는 설명문.</li>
</ol>
<ul>
<li>/* 주석문 */ : 줄 중간이나 여러줄 나누어 작성 가능.</li>
<li>// 주석문</li>
</ul>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://poiemaweb.com/">https://poiemaweb.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>overview</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS number 래퍼 객체</title>
    <url>/2020/10/06/js-number-wrapper-object/</url>
    <content><![CDATA[<p>Number 객체는 원시 타입 number를 다룰 때 유용한 프로퍼티와 메소드를 제공하는 레퍼(wrapper) 객체이다. 변수 또는 객체의 프로퍼티가 숫자를 값으로 가지고 있다면 Number 객체의 별도 생성없이 Number 객체의 프로퍼티와 메소드를 사용할 수 있다.</p>
<a id="more"></a>

<h2 id="Number-Constructor"><a href="#Number-Constructor" class="headerlink" title="Number Constructor"></a>Number Constructor</h2><p>Number 객체는 Number() 생성자 함수를 통해 생성할 수 있다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Number</span>(value);</span><br></pre></td></tr></table></figure>


<ul>
<li>만일 인자가 숫자로 변환될 수 없다면 NaN을 반환한다.</li>
<li>Number() 생성자 함수를 new 연산자를 붙이지 않아 생성자로 사용하지 않으면 Number 객체를 반환하지 않고 원시 타입 숫자를 반환한다. (형변환이 발생할 수 있음)</li>
<li>일반적으로 숫자를 사용할 때는 원시 타입 숫자를 사용한다.</li>
</ul>
<h2 id="Number-Property"><a href="#Number-Property" class="headerlink" title="Number Property"></a>Number Property</h2><p>정적(static) 프로퍼티로 Number 객체를 생성할 필요없이 <code>Number.propertyName</code>의 형태로 사용한다.</p>
<h3 id="Number-EPSILON-ES6"><a href="#Number-EPSILON-ES6" class="headerlink" title="Number.EPSILON ES6"></a>Number.EPSILON <sup>ES6</sup></h3><p><code>Number.EPSILON</code>은 JavaScript에서 표현할 수 있는 가장 작은 수이다. 부동소수점의 비교는 <code>Number.EPSILON</code>을 사용하여 비교 기능을 갖는 함수를 작성하여야 한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">0.1</span> + <span class="number">0.2</span>);        <span class="comment">// 0.30000000000000004</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0.1</span> + <span class="number">0.2</span> == <span class="number">0.3</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEqual</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.abs(a - b) &lt; <span class="built_in">Number</span>.EPSILON;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(isEqual(<span class="number">0.1</span> + <span class="number">0.2</span>, <span class="number">0.3</span>));</span><br></pre></td></tr></table></figure>


<h3 id="Number-MAX-VALUE-ES1"><a href="#Number-MAX-VALUE-ES1" class="headerlink" title="Number.MAX_VALUE ES1"></a>Number.MAX_VALUE <sup>ES1</sup></h3><p>자바스크립트에서 사용 가능한 가장 큰 숫자(1.7976931348623157e+308)를 반환한다. <code>MAX_VALUE</code>보다 큰 숫자는 <code>Infinity</code>이다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>.MAX_VALUE; <span class="comment">// 1.7976931348623157e+308</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">num.MAX_VALUE;    <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">Infinity</span> &gt; <span class="built_in">Number</span>.MAX_VALUE); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>


<h3 id="Number-MIN-VALUE-ES1"><a href="#Number-MIN-VALUE-ES1" class="headerlink" title="Number.MIN_VALUE ES1"></a>Number.MIN_VALUE <sup>ES1</sup></h3><p>자바스크립트에서 사용 가능한 가장 작은 숫자(5e-324)를 반환한다. MIN_VALUE는 0에 가장 가까운 양수 값이다. <code>MIN_VALUE</code>보다 작은 숫자는 0으로 변환된다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>.MIN_VALUE; <span class="comment">// 5e-324</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">num.MIN_VALUE;    <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MIN_VALUE &gt; <span class="number">0</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>


<h3 id="Number-POSITIVE-INFINITY-ES1"><a href="#Number-POSITIVE-INFINITY-ES1" class="headerlink" title="Number.POSITIVE_INFINITY ES1"></a>Number.POSITIVE_INFINITY <sup>ES1</sup></h3><p>양의 무한대 <code>Infinity</code>를 반환한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>.POSITIVE_INFINITY <span class="comment">// Infinity</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">num.POSITIVE_INFINITY;   <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>


<h3 id="Number-NEGATIVE-INFINITY-ES1"><a href="#Number-NEGATIVE-INFINITY-ES1" class="headerlink" title="Number.NEGATIVE_INFINITY ES1"></a>Number.NEGATIVE_INFINITY <sup>ES1</sup></h3><p>음의 무한대 <code>-Infinity</code>를 반환한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>.NEGATIVE_INFINITY <span class="comment">// -Infinity</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">num.NEGATIVE_INFINITY;   <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>


<h3 id="Number-NaN-ES1"><a href="#Number-NaN-ES1" class="headerlink" title="Number.NaN ES1"></a>Number.NaN <sup>ES1</sup></h3><p>숫자가 아님(Not-a-Number)을 나타내는 숫자값이다. <code>Number.NaN</code> 프로퍼티는 <code>window.NaN</code> 프로퍼티와 같다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">&#x27;xyz&#x27;</span>)); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> * <span class="string">&#x27;string&#x27;</span>);  <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">NaN</span>);    <span class="comment">// number</span></span><br></pre></td></tr></table></figure>


<h2 id="Number-Method"><a href="#Number-Method" class="headerlink" title="Number Method"></a>Number Method</h2><h3 id="Number-isFinite-testValue-number-boolean-ES6"><a href="#Number-isFinite-testValue-number-boolean-ES6" class="headerlink" title="Number.isFinite(testValue: number): boolean ES6"></a>Number.isFinite(testValue: number): boolean <sup>ES6</sup></h3><p>매개변수에 전달된 값이 정상적인 유한수인지를 검사하여 그 결과를 Boolean으로 반환한다.</p>
<blockquote>
<p><code>Number.isFinite()</code>는 전역 함수 <code>isFinite()</code>와 차이가 있다. 전역 함수 <code>isFinite()</code>는 인수를 숫자로 변환하여 검사를 수행하지만 <code>Number.isFinite()</code>는 인수를 변환하지 않는다. 따라서 숫자가 아닌 인수가 주어졌을 때 반환값은 언제나 false가 된다.</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>.isFinite(testValue)</span><br></pre></td></tr></table></figure>


<h3 id="Number-isInteger-testValue-number-boolean-ES6"><a href="#Number-isInteger-testValue-number-boolean-ES6" class="headerlink" title="Number.isInteger(testValue: number): boolean ES6"></a>Number.isInteger(testValue: number): boolean <sup>ES6</sup></h3><p>매개변수에 전달된 값이 정수(Integer)인지 검사하여 그 결과를 Boolean으로 반환한다. 검사전에 인수를 숫자로 변환하지 않는다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>.isInteger(testValue)</span><br></pre></td></tr></table></figure>


<h3 id="Number-isNaN-testValue-number-boolean-ES6"><a href="#Number-isNaN-testValue-number-boolean-ES6" class="headerlink" title="Number.isNaN(testValue: number): boolean ES6"></a>Number.isNaN(testValue: number): boolean <sup>ES6</sup></h3><p>매개변수에 전달된 값이 NaN인지를 검사하여 그 결과를 Boolean으로 반환한다.</p>
<blockquote>
<p><code>Number.isNaN()</code>는 전역 함수 <code>isNaN()</code>와 차이가 있다. 전역 함수 <code>isNaN()</code>는 인수를 숫자로 변환하여 검사를 수행하지만 <code>Number.isNaN()</code>는 인수를 변환하지 않는다. 따라서 숫자가 아닌 인수가 주어졌을 때 반환값은 언제나 false가 된다.</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>.isNaN(testValue)</span><br></pre></td></tr></table></figure>


<h3 id="Number-isSafeInteger-testValue-number-boolean-ES6"><a href="#Number-isSafeInteger-testValue-number-boolean-ES6" class="headerlink" title="Number.isSafeInteger(testValue: number): boolean ES6"></a>Number.isSafeInteger(testValue: number): boolean <sup>ES6</sup></h3><p>매개변수에 전달된 값이 안전한(safe) 정수값인지 검사하여 그 결과를 Boolean으로 반환한다. 검사전에 인수를 숫자로 변환하지 않는다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>.isSafeInteger(testValue)</span><br></pre></td></tr></table></figure>


<h3 id="Number-prototype-toExponential-fractionDigits-number-string-ES3"><a href="#Number-prototype-toExponential-fractionDigits-number-string-ES3" class="headerlink" title="Number.prototype.toExponential(fractionDigits?: number): string ES3"></a>Number.prototype.toExponential(fractionDigits?: number): string <sup>ES3</sup></h3><p>대상을 지수 표기법으로 변환하여 문자열로 반환한다. 지수 표기법이란 매우 큰 숫자를 표기할 때 주로 사용하며 e(Exponent) 앞에 있는 숫자에 10의 n승이 곱하는 형식으로 수를 나타내는 방식이다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">numObj.toExponential([fractionDigits])</span><br></pre></td></tr></table></figure>


<h3 id="Number-prototype-toFixed-fractionDigits-number-string-ES3"><a href="#Number-prototype-toFixed-fractionDigits-number-string-ES3" class="headerlink" title="Number.prototype.toFixed(fractionDigits?: number): string ES3"></a>Number.prototype.toFixed(fractionDigits?: number): string <sup>ES3</sup></h3><p>매개변수로 지정된 소숫점자리를 반올림하여 문자열로 반환한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">numObj.toFixed([fractionDigits])</span><br></pre></td></tr></table></figure>


<h3 id="Number-prototype-toPrecision-precision-number-string-ES3"><a href="#Number-prototype-toPrecision-precision-number-string-ES3" class="headerlink" title="Number.prototype.toPrecision(precision?: number): string ES3"></a>Number.prototype.toPrecision(precision?: number): string <sup>ES3</sup></h3><p>매개변수로 지정된 전체 자릿수까지 유효하도록 나머지 자릿수를 반올림하여 문자열로 반환한다. 지정된 전체 자릿수로 표현할 수 없는 경우 지수 표기법으로 결과를 반환한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">numObj.toPrecision([precision])</span><br></pre></td></tr></table></figure>


<h3 id="Number-prototype-toString-radix-number-string-ES1"><a href="#Number-prototype-toString-radix-number-string-ES1" class="headerlink" title="Number.prototype.toString(radix?: number): string ES1"></a>Number.prototype.toString(radix?: number): string <sup>ES1</sup></h3><p>숫자를 문자열로 변환하여 반환한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">numObj.toString([radix])</span><br></pre></td></tr></table></figure>


<h3 id="Number-prototype-valueOf-number-ES1"><a href="#Number-prototype-valueOf-number-ES1" class="headerlink" title="Number.prototype.valueOf(): number ES1"></a>Number.prototype.valueOf(): number <sup>ES1</sup></h3><p>Number 객체의 원시 타입 값(primitive value)을 반환한다.</p>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://poiemaweb.com/">https://poiemaweb.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>object</tag>
        <tag>built-in object</tag>
        <tag>wrapper object</tag>
        <tag>number wrapper object</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 스프레드 문법</title>
    <url>/2020/10/04/js-spread-syntax/</url>
    <content><![CDATA[<p>ES6에서 새롭게 도입된 <strong>스프레드 문법(Spread syntax, 전개 문법) <code>…</code></strong> 은 하나로 뭉쳐 있는 여러 값들의 집합을 펼쳐서(전개, 분산하여, spread) 개별적인 값들의 목록으로 만든다. 스프레드 문법을 사용할 수 있는 대상은 Array, String, Map, Set, DOM 컬렉션(NodeList, HTMLCollection), Arguments와 같이 for…of 문으로 <strong>순회할 수 있는 이터러블에 한정</strong> 된다.</p>
<a id="more"></a>

<p>스프레드 문법의 결과물은 단독으로 사용할 수 없고, 아래와 같이 쉼표로 구분한 값의 목록을 사용하는 문에서 사용한다.</p>
<ul>
<li>함수 호출문의 인수 목록</li>
<li>배열 리터럴의 요소 목록</li>
<li>객체 리터럴의 프로퍼티 목록 (2019년 11월 현재 Stage 4 제안)</li>
</ul>
<blockquote>
<p><em>Rest 파라미터와 스프레드 문법의 차이</em><br>Rest 파라미터는 함수에 전달된 인수들의 목록을 배열로 전달받기 위해 매개변수 이름 앞에 …을 붙이는 것이다. 스프레드 문법은 여러 개의 값이 하나로 뭉쳐 있는 배열과 같은 이터러블을 펼쳐서 개별적인 값들의 목록을 만드는 것이다. 따라서 Rest 파라미터와 스프레드 문법은 서로 반대의 개념이다.</p>
</blockquote>
<h2 id="함수-호출문의-인수-목록에서-사용하는-경우"><a href="#함수-호출문의-인수-목록에서-사용하는-경우" class="headerlink" title="함수 호출문의 인수 목록에서 사용하는 경우"></a>함수 호출문의 인수 목록에서 사용하는 경우</h2><p>요소값들의 집합인 배열을 펼쳐서 개별적인 값들의 목록으로 만든 후, 이를 함수의 인수 목록으로 전달해야 하는 경우가 있다. <strong><code>Math.max</code> 메소드는 매개변수 개수를 확정할 수 없는 가변 인자 함수</strong> 이다. 아래와 같이 개수가 정해져 있지 않은 여러 개의 숫자를 인수로 전달받아 인수 중에서 최대값을 반환한다. 숫자가 아닌 배열을 인수로 전달하면 최대값을 구할 수 없으므로 <code>NaN</code>을 반환하기 때문에 <strong>배열을 펼쳐서 요소값들을 개별적인 값들의 목록으로 만든 후 <code>Math.max</code> 메소드의 인수로 전달해야 한다.</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// 스프레드 문법을 사용하여 배열 arr을 1, 2, 3으로 펼쳐서 `Math.max`에 전달한다.</span></span><br><span class="line"><span class="keyword">const</span> maxValue = <span class="built_in">Math</span>.max(...arr);</span><br><span class="line"><span class="built_in">console</span>.log(maxValue); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<h2 id="배열-리터럴-내부에서-사용하는-경우"><a href="#배열-리터럴-내부에서-사용하는-경우" class="headerlink" title="배열 리터럴 내부에서 사용하는 경우"></a>배열 리터럴 내부에서 사용하는 경우</h2><p>스프레드 문법을 배열 리터럴에서 사용하면 보다 간결하고 가독성이 좋게 표현할 수 있다. ES5에서 사용하던 방식과 비교해본다.</p>
<h3 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h3><p>기존의 배열 요소들을 새로운 배열의 일부로 만들고 싶은 경우 스프레드 문법을 사용하면 별도의 메소드를 사용하지 않고 <strong>배열 리터럴 만으로 기존의 배열 요소들을 새로운 배열의 일부로 만들 수 있다.</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>].concat([<span class="number">3</span>, <span class="number">4</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">const</span> arr = [...[<span class="number">1</span>, <span class="number">2</span>], <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>


<h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3><p>ES5에서 기존의 배열에 다른 배열의 요소들을 push하는 경우</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="built_in">Array</span>.prototype.push.apply(arr1, arr2);</span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="comment">// arr1.push(3, 4)와 같다.</span></span><br><span class="line">arr1.push(...arr2);</span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>


<h3 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h3><p>기존의 배열에 다른 배열의 요소들을 삽입하는 경우</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">Array</span>.prototype.splice.apply(arr1, [<span class="number">1</span>, <span class="number">0</span>].concat(arr2));</span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr1.splice(<span class="number">1</span>, <span class="number">0</span>, ...arr2);</span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>


<h3 id="배열-복사-slice"><a href="#배열-복사-slice" class="headerlink" title="배열 복사(slice)"></a>배열 복사(slice)</h3><p>기존의 배열을 복사하고 싶은 경우</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">var</span> origin = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> copy = origin.slice();</span><br><span class="line"><span class="built_in">console</span>.log(copy); <span class="comment">// [1, 2]</span></span><br><span class="line"><span class="built_in">console</span>.log(copy === origin); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">const</span> origin = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> copy = [...origin];</span><br><span class="line"><span class="built_in">console</span>.log(copy); <span class="comment">// [1, 2]</span></span><br><span class="line"><span class="built_in">console</span>.log(copy === origin); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>이때 원본 배열의 각 요소를 얕은 복사(shallow copy)하여 새로운 복사본을 생성한다. 이는 slice 메소드도 마찬가지.</p>
</blockquote>
<h3 id="유사-배열-객체를-배열로-변환-slice-메소드를-apply-함수로-호출"><a href="#유사-배열-객체를-배열로-변환-slice-메소드를-apply-함수로-호출" class="headerlink" title="유사 배열 객체를 배열로 변환 (slice 메소드를 apply 함수로 호출)"></a>유사 배열 객체를 배열로 변환 (slice 메소드를 apply 함수로 호출)</h3><p>유사 배열 객체(Array-like object)를 배열로 변환하려는 경우 스프레드 문법을 사용하면 보다 <strong>간편하게 유사 배열 객체를 배열로 변환할 수 있다.</strong> 유사 배열 객체인 arguments 객체는 이터러블이다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.apply(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="keyword">return</span> args.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">pre, cur</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pre + cur;</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> args = [...arguments];</span><br><span class="line">  <span class="keyword">return</span> args.reduce(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> pre + cur, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure>


<h2 id="객체-리터럴-내부에서-사용하는-경우"><a href="#객체-리터럴-내부에서-사용하는-경우" class="headerlink" title="객체 리터럴 내부에서 사용하는 경우"></a>객체 리터럴 내부에서 사용하는 경우</h2><ul>
<li>스프레드 문법의 대상은 이터러블이어야 하지만 <strong>스프레드 프로퍼티 제안은 일반 객체를 대상으로도 스프레드 문법의 사용을 허용</strong> 한다.</li>
<li>스프레드 프로퍼티가 도입되기 이전에는 ES6에서 도입된 <code>Object.assign</code> 메소드를 사용하여 <strong>여러 개의 객체를 병합하거나 특정 프로퍼티를 변경 또는 추가</strong> 하였다. 스프레드 프로퍼티는 <code>Object.assign</code> 메소드를 대체할 수 있다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> n = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, ...&#123; <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span> &#125; &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(n); <span class="comment">// &#123; x: 1, y: 2, a: 3, b: 4 &#125;</span></span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://poiemaweb.com/">https://poiemaweb.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>spread syntax</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 스코프</title>
    <url>/2020/08/17/js-scope/</url>
    <content><![CDATA[<p><strong>식별자가 유효한 범위</strong> 를 말한다. 모든 식별자(변수 이름, 함수 이름, 클래스 이름 등)는 자신이 선언된 위치에 의해 다른 코드가 식별자 자신을 참조할 수 있는 유효범위가 결정된다. 자바스크립트 엔진이 <strong>식별자를 검색할 때 사용하는 규칙</strong> 이라고도 할 수 있다.</p>
<a id="more"></a>


<p> <em>순수 함수</em></p>
<ol>
<li>동일한 인수가 전달되면 언제나 동일한 값을 반환하는 함수.</li>
<li>오직 인수에게만 의존하여 반환값을 만든다.</li>
<li>함수의 외부 상태를 변경하지 않는다.</li>
</ol>
<p><em>비순수함수</em></p>
<ol>
<li>외부 상태에 의존하여 외부 상태에 따라 반환값이 달라지는 함수.</li>
<li>함수의 외부 상태를 변경하는 부수 효과(side effect)가 있다.</li>
</ol>
<blockquote>
<p><strong>코드의 문맥</strong>(Context)과 <strong>환경</strong>(Environment)<br>코드가 어디서 실행되며 주변에 어떤 코드들이 있는지를 <strong>환경</strong> 이라고 부른다. 코드의 문맥(Context)는 환경들로 이루어져 있고 이를 구현한 것이 “<strong>실행 컨텍스트</strong>(Excution context)”이다. 모든 코드는 실행 컨텍스트에서 평가되고 실행된다.</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="string">&#x27;global&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="string">&#x27;local&#x27;</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(x); <span class="comment">// ①</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">// ②</span></span><br></pre></td></tr></table></figure>

<p>가장 바깥 영역에 선언된 변수 x는 어디서든 참조할 수 있다. 함수 foo 내부에서 선언된 변수 x는 함수 foo 내에서만 참조할 수 있고, 함수 foo 외부에서는 참조할 수 없다. <strong>두 개의 변수 x는 식별자 이름이 동일하지만 유효한 범위, 스코프가 다른 별개의 변수</strong> 이다.</p>
<p>식별자는 어떤 값을 구별해야 하므로 유일(unique)해야 한다. 식별자 변수 이름은 중복될 수 없고, 하나의 값은 유일한 식별자에 연결(Name binding)되어야 한다. 다만, 다른 스코프에는 같은 이름의 식별자를 사용할 수 있다.</p>
<blockquote>
<p><strong>var 키워드로 선언한 변수의 중복 선언</strong><br>var 키워드로 선언된 변수는 같은 스코프내에서 중복 선언이 허용된다. 의도치 않게 변수값이 재할당되어 변경되는 부작용이 발생할 수 있다. 하지만 let이나 const 키워드로 선언된 변수는 같은 스코프 내에서 중복선언을 허용하지 않는다.</p>
</blockquote>
<h2 id="스코프의-종류"><a href="#스코프의-종류" class="headerlink" title="스코프의 종류"></a>스코프의 종류</h2><p>코드는 전역(global)과 지역(local)으로 구분할 수 있다. 이때 변수는 자신이 선언된 위치에 의해 유효한 범위인 스코프(전역, 지역)가 결정된다.</p>
<table>
<thead>
<tr>
<th>구분</th>
<th>설명</th>
<th>스코프</th>
<th>변수</th>
</tr>
</thead>
<tbody><tr>
<td>전역</td>
<td>코드의 가장 바깥 영역</td>
<td>전역 스코프</td>
<td>전역 변수</td>
</tr>
<tr>
<td>지역</td>
<td>함수 몸체 내부</td>
<td>지역 스코프</td>
<td>지역 변수</td>
</tr>
</tbody></table>
<h3 id="전역과-전역-스코프"><a href="#전역과-전역-스코프" class="headerlink" title="전역과 전역 스코프"></a>전역과 전역 스코프</h3><p>전역이란 코드의 가장 바깥 영역을 말한다. 전역은 전역 스코프(global scope)를 만든다. 전역에 변수를 선언하면 전역 스코프를 갖는 전역 변수(global variable)가 된다. <strong>전역 변수는 어디서든지 참조할 수 있다.</strong></p>
<h3 id="지역과-지역-스코프"><a href="#지역과-지역-스코프" class="headerlink" title="지역과 지역 스코프"></a>지역과 지역 스코프</h3><p>지역이란 함수 몸체 내부를 말한다. 지역은 지역 스코프(local scope)를 만든다. 지역에 변수를 선언하면 지역 스코프를 갖는 지역 변수(local variable)가 된다. 지역 변수는 자신이 선언된 지역과 하위 지역(중첩 함수)에서만 참조할 수 있다.</p>
<h2 id="스코프-체인"><a href="#스코프-체인" class="headerlink" title="스코프 체인"></a>스코프 체인</h2><p><img src="/images/scope.jpg" alt="스코프 체인" title="스코프 체인"></p>
<p>함수는 중첩될 수 있으므로 함수의 지역 스코프도 중첩될 수 있다. 중첩 함수의 지역 스코프는 중첩 함수를 포함하는 외부 함수의 지역 스코프와 계층적 구조를 갖는다. 이때 외부 함수의 지역 스코프를 중첩 함수의 상위 스코프라 한다.</p>
<p><em>변수를 참조할 때, 자바스크립트 엔진은 스코프 체인을 통해 변수를 참조하는 코드의 스코프에서 시작하여 상위 스코프 방향으로 이동하며 선언된 변수를 검색한다.</em></p>
<p>자바스크립트 엔진은 코드를 실행하기 앞서 위 그림과 유사한 자료 구조(렉시컬 환경)를 실제로 생성하고 변수의 할당이 일어나면 이 자료구조의 값을 변경한다.</p>
<blockquote>
<p><strong>렉시컬 환경</strong><br>스코프체인은 실행 컨텍스트의 렉시컬 환경을 단방향으로 연결(Chainning)한 것이다. 전역 렉시컬 환경은 코드가 로드되면 곧바로 생성되고 함수의 렉시컬 환경은 함수가 호출되면 곧바로 생성된다.</p>
</blockquote>
<h2 id="스코프-체인에-의한-변수-검색"><a href="#스코프-체인에-의한-변수-검색" class="headerlink" title="스코프 체인에 의한 변수 검색"></a>스코프 체인에 의한 변수 검색</h2><p>자바스크립트 엔진은 스코프 체인을 따라 변수를 참조하는 코드의 스코프에서 상위 스코프 방향으로 이동하며 선언된 변수를 검색한다. 절대 하위 스코프로 내려가면 식별자를 검색하는 일은 없다. <strong>상위 스코프에서 유효한 변수는 하위 스코프에서 자유롭게 참조할 수 있지만 하위 스코프에서 유효한 변수를 상위 스코프에서 참조할 수 없다.</strong></p>
<h2 id="스코프-체인에-의한-함수-검색"><a href="#스코프-체인에-의한-함수-검색" class="headerlink" title="스코프 체인에 의한 함수 검색"></a>스코프 체인에 의한 함수 검색</h2><p> <strong>자바스크립트 엔진은 함수 이름과 동일한 이름의 변수를 암묵적으로 선언하고 생성된 함수 객체를 할당한다.</strong> 함수도 변수에 할당되기 때문에 스코프를 갖는다.</p>
<h2 id="함수-레벨-스코프"><a href="#함수-레벨-스코프" class="headerlink" title="함수 레벨 스코프"></a>함수 레벨 스코프</h2><p>지역은 함수 몸체 내부를 말하고 지역은 지역 스코프를 만든다는 의미는 <strong>코드 블록이 아닌 함수에 의해서만 지역 스코프가 생성된다</strong> 는 의미이다.</p>
<p><em>블록 레벨 스코프(Block level scope)</em><br>모든 코드 블록(if, for, while, try/catch 등)이 지역 스코프를 만든다.</p>
<p><em>함수 레벨 스코프(Function level scope)</em><br>var 키워드로 선언된 변수는 오로지 함수의 코드 블록만을 지역 스코프로 인정한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for문에서 선언한 i는 전역 변수이다.</span></span><br><span class="line"><span class="comment">// 이미 선언된 전역 변수 i가 있으므로 중복 선언된다.</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i); <span class="comment">// 0 1 2 3 4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>

<p>var 키워드로 선언된 변수는 블록 레벨 스코프를 인정하지 않기 때문에 변수 i는 전역 변수가 된다. 따라서 전역 변수 i는 중복 선언되고 그 결과 의도치 않은 전역 변수의 값이 재할당된다.</p>
<h2 id="렉시컬-스코프"><a href="#렉시컬-스코프" class="headerlink" title="렉시컬 스코프"></a>렉시컬 스코프</h2><p>자바스크립트는 <strong>어디에 정의했는지에 따라 상위 스코프를 결정한다.</strong> 함수가 호출되면 언제나 자신이 기억하고 있는 자신이 정의된 스코프를 상위 스코프로 사용한다. 함수가 호출된 위치는 함수 자신이 기억하고 있는 스코프, 즉 상위 스코프 결정에 어떠한 영향을 주지 않는다.</p>
<h2 id="암묵적-전역-변수"><a href="#암묵적-전역-변수" class="headerlink" title="암묵적 전역 변수"></a>암묵적 전역 변수</h2><p>선언하지 않은 변수에 값을 할당하면 자바스크립트 엔진은 아무런 에러없이 암묵적으로 전역 변수를 선언하고 값을 할당한다. 전역 변수가 중복 선언되면 의도치 않게 먼저 선언된 전역 변수의 값이 변경된다.</p>
<p>자바스크립트는 파일마다 독립적인 파일 스코프를 갖지 않는다. 따라서 자바스크립트 파일을 여러 개로 분리하여도 결국 하나의 자바스크립트 파일로 통합된 것처럼 동작한다.</p>
<blockquote>
<p><strong>모듈</strong><br>모듈이란 애플리케이션을 구성하는 개별적 요소로서 재사용 가능한 코드 조각을 말한다. 모듈은 세부 사항을 캡슐화하고 공개가 필요한 API만을 외부에 노출한다. 모듈화가 가능하려면 우선 파일 스코프가 지원되어야 한다. 자바스크립트에는 모듈 개념이 없다.</p>
</blockquote>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://poiemaweb.com/">https://poiemaweb.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>scope</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 정규표현식</title>
    <url>/2020/10/12/js-regexp/</url>
    <content><![CDATA[<p>정규 표현식은 문자열에서 특정 내용을 찾거나 대체, 발췌하기 위해서 사용한다. (ex. 입력받는 전화번호 유효 체크) 반복문이나 조건문을 사용한 복잡한 코드도 정규표현식을 이용하면 간단하게 표현할 수 있지만 여러가지 기호를 혼합하여 사용하기 때문에 가독성이 좋지 않다.</p>
<a id="more"></a>

<h2 id="플래그"><a href="#플래그" class="headerlink" title="플래그"></a>플래그</h2><p>플래그는 옵션이므로 선택적으로 사용할 수 있다. 사용하지 않을 경우 검색 매칭 대상이 하나 이상일 경우에 첫번째 대상만 검색후 종료한다.</p>
<table>
<thead>
<tr>
<th>Flag</th>
<th>Meaning</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><code>i</code></td>
<td>Ignore Case</td>
<td>대소문자를 구별하지 않고 검색</td>
</tr>
<tr>
<td><code>g</code></td>
<td>Global</td>
<td>문자열 내의 모든  패턴을 검색</td>
</tr>
<tr>
<td><code>m</code></td>
<td>Multi Line</td>
<td>문자열의 행이 바뀌더라도 검색을 계속 진행</td>
</tr>
</tbody></table>
<h2 id="패턴"><a href="#패턴" class="headerlink" title="패턴"></a>패턴</h2><ul>
<li>패턴을 검색하고 싶은 문자열을 지정한다.</li>
<li>문자열의 따옴표는 생략한다. (포함시 따옴표도 함께 검색)</li>
<li>특별한 의미를 가지는 메타문자나 기호로 표현할 수 있다.</li>
</ul>
<table>
<thead>
<tr>
<th>패턴 표현 방법</th>
<th>의미</th>
</tr>
</thead>
<tbody><tr>
<td><code>.</code></td>
<td>임의의 문자 하나. 문자 내용 하나는 무엇이든 상관 없다. 추출을 반복하지 않으며 반복하기 위해서는 플래그 <code>g</code>를 사용.</td>
</tr>
<tr>
<td><code>.</code> + <code>g</code></td>
<td>모든 문자 선택</td>
</tr>
<tr>
<td>패턴에 문자 또는 문자열 지정</td>
<td>일치하는 문자 또는 문자열 추출. 대소문자를 구분하며, 패턴과일치한 첫번째 결과만 반환된다. 구분하지 않으려면 플래그 <code>i</code> 사용.</td>
</tr>
<tr>
<td><code>+</code></td>
<td>앞선 패턴을 최소 한번 반복</td>
</tr>
<tr>
<td><code>│</code></td>
<td>or의 의미</td>
</tr>
<tr>
<td><code>│</code> + <code>+</code></td>
<td>분해되지 않은 단어 레벨로 추출</td>
</tr>
<tr>
<td><code>[</code> + <code>-</code> + <code>]</code></td>
<td>범위 지정. 대소문자를 구별하지 않고 추출하고 싶을시 <code>/[A-Za-z]+/g;</code></td>
</tr>
<tr>
<td><code>\w</code></td>
<td>알파벳과 숫자</td>
</tr>
</tbody></table>
<h2 id="자주-사용하는-정규표현식"><a href="#자주-사용하는-정규표현식" class="headerlink" title="자주 사용하는 정규표현식"></a>자주 사용하는 정규표현식</h2><h3 id="특정-단어로-시작하는지-검사"><a href="#특정-단어로-시작하는지-검사" class="headerlink" title="특정 단어로 시작하는지 검사"></a>특정 단어로 시작하는지 검사</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="string">&#x27;http://example.com&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ^ : 문자열의 처음을 의미한다.</span></span><br><span class="line"><span class="keyword">const</span> regexr = <span class="regexp">/^http/</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(regexr.test(url)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>


<h3 id="특정-단어로-끝나는지-검사"><a href="#특정-단어로-끝나는지-검사" class="headerlink" title="특정 단어로 끝나는지 검사"></a>특정 단어로 끝나는지 검사</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fileName = <span class="string">&#x27;index.html&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// $ : 문자열의 끝을 의미한다.</span></span><br><span class="line"><span class="keyword">const</span> regexr = <span class="regexp">/html$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(regexr.test(fileName)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>


<h3 id="숫자인지-검사"><a href="#숫자인지-검사" class="headerlink" title="숫자인지 검사"></a>숫자인지 검사</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> targetStr = <span class="string">&#x27;12345&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 모두 숫자인지 검사</span></span><br><span class="line"><span class="comment">// [^]: 부정(not)을 의미한다.</span></span><br><span class="line"><span class="comment">// [] 바깥의 ^는 문자열의 처음을 의미한다.</span></span><br><span class="line"><span class="keyword">const</span> regexr = <span class="regexp">/^\d+$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(regexr.test(targetStr)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>


<h3 id="하나-이상의-공백으로-시작하는지-검사"><a href="#하나-이상의-공백으로-시작하는지-검사" class="headerlink" title="하나 이상의 공백으로 시작하는지 검사"></a>하나 이상의 공백으로 시작하는지 검사</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> targetStr = <span class="string">&#x27; Hi!&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1개 이상의 공백으로 시작하는지 검사</span></span><br><span class="line"><span class="comment">// \s : 여러 가지 공백 문자 (스페이스, 탭 등) =&gt; [\t\r\n\v\f]</span></span><br><span class="line"><span class="keyword">const</span> regexr = <span class="regexp">/^[\s]+/</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(regexr.test(targetStr)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>


<h3 id="아이디로-사용-가능한지-검사"><a href="#아이디로-사용-가능한지-검사" class="headerlink" title="아이디로 사용 가능한지 검사"></a>아이디로 사용 가능한지 검사</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> id = <span class="string">&#x27;abc123&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 알파벳 대소문자 또는 숫자로 시작하고 끝나며 4 ~10자리인지 검사</span></span><br><span class="line"><span class="comment">// &#123;4,10&#125;: 4 ~ 10자리</span></span><br><span class="line"><span class="keyword">const</span> regexr = <span class="regexp">/^[A-Za-z0-9]&#123;4,10&#125;$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(regexr.test(id)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>


<h3 id="메일-주소-형식에-맞는지-검사"><a href="#메일-주소-형식에-맞는지-검사" class="headerlink" title="메일 주소 형식에 맞는지 검사"></a>메일 주소 형식에 맞는지 검사</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> email = <span class="string">&#x27;ungmo2@gmail.com&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> regexr =</span><br><span class="line">/^[<span class="number">0</span>-9a-z]([-_\.]?[<span class="number">0</span>-9a-z])*@[<span class="number">0</span>-9a-z]([-_\.]?[<span class="number">0</span>-9a-z])*\.[a-z]&#123;<span class="number">2</span>,<span class="number">3</span>&#125;$/;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(regexr.test(email)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>


<h3 id="핸드폰-번호-형식에-맞는지-검사"><a href="#핸드폰-번호-형식에-맞는지-검사" class="headerlink" title="핸드폰 번호 형식에 맞는지 검사"></a>핸드폰 번호 형식에 맞는지 검사</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cellphone = <span class="string">&#x27;010-1234-5678&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> regexr = <span class="regexp">/^\d&#123;3&#125;-\d&#123;3,4&#125;-\d&#123;4&#125;$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(regexr.test(cellphone)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>


<h3 id="특수-문자-포함-여부를-검사"><a href="#특수-문자-포함-여부를-검사" class="headerlink" title="특수 문자 포함 여부를 검사"></a>특수 문자 포함 여부를 검사</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> targetStr = <span class="string">&#x27;abc#123&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A-Za-z0-9 이외의 문자가 있는지 검사</span></span><br><span class="line"><span class="keyword">let</span> regexr = <span class="regexp">/[^A-Za-z0-9]/gi</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(regexr.test(targetStr)); <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 아래 방식도 동작한다.</span></span><br><span class="line"><span class="comment">// 이 방식의 장점은 특수 문자를 선택적으로 검사할 수 있다.</span></span><br><span class="line">regexr = <span class="regexp">/[\&#123;\&#125;\[\]\/?.,;:|\)*~`!^\-_+&lt;&gt;@\#$%&amp;\\\=\(\&#x27;\&quot;]/gi</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(regexr.test(targetStr)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 특수 문자 제거</span></span><br><span class="line"><span class="built_in">console</span>.log(targetStr.replace(regexr, <span class="string">&#x27;&#x27;</span>)); <span class="comment">// abc123</span></span><br></pre></td></tr></table></figure>


<h2 id="Javascript-Regular-Expression"><a href="#Javascript-Regular-Expression" class="headerlink" title="Javascript Regular Expression"></a>Javascript Regular Expression</h2><h3 id="RegExp-Constructor"><a href="#RegExp-Constructor" class="headerlink" title="RegExp Constructor"></a>RegExp Constructor</h3><p>자바스크립트는 RegExp 객체를 지원한다. <strong>리터럴 방식(일반적)</strong> 과 <strong>RegExp 생성자 함수</strong> 를 사용하여 생성할 수 있다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">RegExp</span>(pattern[, flags])</span><br></pre></td></tr></table></figure>

<h3 id="RegExp-Method"><a href="#RegExp-Method" class="headerlink" title="RegExp Method"></a>RegExp Method</h3><p><em><strong>RegExp.prototype.exec(target: string): RegExpExecArray | null <sup>ES3</sup></strong></em></p>
<ul>
<li>문자열을 검색하여 매칭 결과를 반환</li>
<li>반환값은 배열 또는 null</li>
<li>exec 메소드는 g 플래그를 지정하여도 첫번째 매칭 결과만을 반환</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> target = <span class="string">&#x27;Is this all there is?&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> regExp = <span class="regexp">/is/</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res = regExp.exec(target);</span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">// [ &#x27;is&#x27;, index: 5, input: &#x27;Is this all there is?&#x27; ]</span></span><br></pre></td></tr></table></figure>

<p><em><strong>RegExp.prototype.test(target: string): boolean <sup>ES3</sup></strong></em></p>
<ul>
<li>문자열을 검색하여 매칭 결과를 반환</li>
<li>반환값은 true 또는 false</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> target = <span class="string">&#x27;Is this all there is?&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> regExp = <span class="regexp">/is/</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res = regExp.test(target);</span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://poiemaweb.com/">https://poiemaweb.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>regexp</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 프로토타입</title>
    <url>/2020/09/20/js-prototype/</url>
    <content><![CDATA[<p><strong>자바스크립트</strong> 는 명령형(Imperative), 함수형(Functional), 프로토타입 기반(Prototype-based) 객체지향 프로그래밍(OOP, Object Oriented Programming)을 지원하는 프로그래밍 언어다.</p>
<a id="more"></a>

<h2 id="객체지향-프로그래밍"><a href="#객체지향-프로그래밍" class="headerlink" title="객체지향 프로그래밍"></a>객체지향 프로그래밍</h2><ul>
<li>객체지향 프로그래밍은 객체의 상태(state)를 나타내는 데이터와 상태 데이터를 조작할 수 있는 동작(behavior)을 하나의 논리적인 단위로 묶어 생각한다.</li>
<li><strong>객체</strong>: 상태 데이터와 동작을 하나의 논리적인 단위로 묶은 복합적인 자료 구조. 각각의 객체는 고유의 기능을 갖는 독립적인 부품이라고 볼 수 있지만, 다르 객체와도 관계성을 가질 수 있다.</li>
<li><strong>속성(attribute, property)</strong>: 속성을 통해 어떠한 사물이나 개념을 구체화</li>
<li><strong>추상화(abstraction)</strong>: 다양한 속성 중에서 프로그램에 필요한 속성만을 간추려 내어 표현하는 것</li>
</ul>
<h2 id="상속과-프로토타입"><a href="#상속과-프로토타입" class="headerlink" title="상속과 프로토타입"></a>상속과 프로토타입</h2><ul>
<li><strong>상속(Inheritance)</strong>: 어떤 객체의 프로퍼티 또는 메소드를 다른 객체가 상속받아 그대로 사용할 수 있는 것</li>
<li> 자바스크립트는 <strong>프로토타입(prototype)을 기반으로 상속을 구현</strong> 한다.</li>
<li>생성자 함수가 생성할 모든 인스턴스가 공통적으로 사용할 프로퍼티나 메소드를 프로토타입에 미리 구현해두면 생성자 함수가 생성할 모든 인스턴스는 별도의 구현없이 상위(부모) 객체인 프로토타입의 자산을 공유하여 사용할 수 있다.</li>
</ul>
<h2 id="프로토타입-객체"><a href="#프로토타입-객체" class="headerlink" title="프로토타입 객체"></a>프로토타입 객체</h2><ul>
<li>모든 객체는<code>[[Prototype]]</code>이라는 내부 슬롯을 갖는다.</li>
<li>모든 객체는 하나의 프로토타입을 갖는다. 프로토타입은 <code>null</code>이거나 객체이다. 그리고 모든 프로토타입은 생성자 함수와 연결되어 있다. 즉, 객체와 프로토타입과 생성자 함수는 서로 연결되어 있다.</li>
</ul>
<h3 id="proto-접근자-프로퍼티"><a href="#proto-접근자-프로퍼티" class="headerlink" title="__proto__ 접근자 프로퍼티"></a><code>__proto__</code> 접근자 프로퍼티</h3><p>모든 객체는 <code>__proto__</code> 접근자 프로퍼티를 통해 자신의 프로토타입, 즉 <code>[[Prototype]]</code> 내부 슬롯에 접근할 수 있다.</p>
<p><em>1. <code>__proto__</code>는 접근자 프로퍼티이다.</em></p>
<ul>
<li><code>[[Prototype]]</code> 내부 슬롯에 직접 접근할 수 없기 때문에 <code>__prototype</code> 접근자 프로퍼티를 통해 간접적으로 접근한다.</li>
<li><code>Object.prototype</code>의 프로퍼티인 <code>__proto__</code> 접근자 프로퍼티는 <code>getter</code>/<code>setter</code> 함수라고 부르는 접근자 함수를 통해 <code>[[Prototype]]</code> 내부 슬롯의 값, 즉 프로토타입을 취득하거나 할당한다.</li>
<li><code>__proto__</code> 접근자 프로퍼티를 통해 <strong><u>프로토타입에 접근</u></strong> 하면 내부적으로 <code>__proto__</code> 접근자 프로퍼티의 <code>getter</code> 함수인 <code>get __proto__</code>가 호출</li>
<li> <code>__proto__</code> 접근자 프로퍼티를 통해 <strong><u>새로운 프로토타입을 할당</u></strong> 하면 <code>__proto__</code> 접근자 프로퍼티의 <code>setter</code> 함수인 <code>set __proto__</code>가 호출</li>
</ul>
<p><em>2. <code>__proto__</code> 접근자 프로퍼티는 상속을 통해 사용된다.</em></p>
<ul>
<li><code>__proto__</code> 접근자 프로퍼티는 객체가 직접 소유하는 프로퍼티가 아니라 <code>Object.prototype</code>의 프로퍼티이다.</li>
<li>모든 객체는 상속을 통해 <code>Object.prototype.__proto__</code> 접근자 프로퍼티를 사용할 수 있다.</li>
</ul>
<p><em>3. <code>__proto__</code> 접근자를 통해 프로토타입에 접근하는 이유</em></p>
<ul>
<li>상호 참조에 의해 프로토타입 체인이 생성되는 것을 방지하기 위함이다.</li>
<li>프로토타입 체인은 단방향 링크드 리스트로 구현되어야 한다. (프로퍼티 검색 방향이 한쪽 방향으로만 흘러가야 한다.)</li>
<li>순환 참조(circular reference)적인 프로토타입 체인이 만들어지면 프로토타입 체인 종점이 존재하지 않기 때문에 프로토타입 체인에서 프로퍼티를 검색할 때 무한 루프에 빠진다.</li>
</ul>
<p><em>4. <code>__proto__</code> 접근자 프로퍼티를 코드내에서 직접 사용하는 것은 추천하지 않는다.</em></p>
<ul>
<li><code> Object.prototype</code>을 상속받지 않는 객체를 생성할 수도 있어서 모든 객체가 <code>__proto__</code> 접근자 프로퍼티를 사용할 수 있는 것은 아니기 때문이다.</li>
<li> <code>__proto__</code> 접근자 프로퍼티 대신 프로토타입의 참조를 취득할 경우는 <code>Object.getPrototypeOf</code> 메소드를, 프로토타입을 교체하는 경우는 <code>Object.setPrototypeOf</code> 메소드를 사용하는 것을 권장한다.</li>
</ul>
<h3 id="함수-객체의-prototype-프로퍼티"><a href="#함수-객체의-prototype-프로퍼티" class="headerlink" title="함수 객체의 prototype 프로퍼티"></a>함수 객체의 <code>prototype</code> 프로퍼티</h3><ul>
<li>함수 객체는 <code>__proto__</code> 접근자 프로퍼티 이외에 <code>prototype</code> 프로퍼티도 소유한다. 함수 객체의 <code>prototype</code> 프로퍼티는 생성자 함수가 생성할 인스턴스의 프로토타입을 가리킨다.</li>
<li><code>prototype</code> 프로퍼티는 <strong>함수 객체만이 소유하는 프로퍼티</strong> 이다. 일반 객체에는 <code>prototype</code> 프로퍼티가 없다.</li>
<li>생성자 함수가 아닌 일반 함수도  <code>prototype</code> 프로퍼티를 소유하지만 객체를 생성하지 않는 일반 함수의 <code>prototype</code> 프로퍼티는 아무런 의미가 없다.</li>
<li>모든 객체가 가지고 있는(<code>Object.prototype</code>로부터 상속받은) <code>__proto__</code> 접근자 프로퍼티와 함수 객체만이 가지고 있는 <code>prototype</code> 프로퍼티는 동일한 프로토타입을 가리키지만 <strong>이들 프로퍼티를 사용하는 주체가 다르다.</strong><table>
<thead>
<tr>
<th>구분</th>
<th>소유</th>
<th>값</th>
<th>사용 주체</th>
<th>사용 목적</th>
</tr>
</thead>
<tbody><tr>
<td><code>__proto__</code> 접근자 프로퍼티</td>
<td>모든 객체</td>
<td>프로토타입의 참조</td>
<td>모든 객체</td>
<td>모든 객체가 상속을 위해 자신의 프로토타입에 접근</td>
</tr>
<tr>
<td><code>prototype</code> 프로퍼티</td>
<td>함수 객체</td>
<td>프로토타입의 참조</td>
<td>생성자 함수</td>
<td>생성자 함수가 자신이 생성할 객체(인스턴스)의 프로토타입을 할당</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="프로토타입의-constructor-프로퍼티와-생성자-함수"><a href="#프로토타입의-constructor-프로퍼티와-생성자-함수" class="headerlink" title="프로토타입의 constructor 프로퍼티와 생성자 함수"></a>프로토타입의 constructor 프로퍼티와 생성자 함수</h3><ul>
<li>모든 프로토타입은 <code>constructor</code> 프로퍼티를 갖는다.</li>
<li><code>constructor</code> 프로퍼티는 <code>prototype</code> 프로퍼티로 자신을 참조하고 있는 생성자 함수를 가리킨다. 이 연결은 생성자 함수가 생성될 때, 즉 함수 객체가 생성될 때 이루어진다.</li>
</ul>
<h2 id="리터럴-표기법에-의해-생성된-객체의-생성자-함수와-프로토타입"><a href="#리터럴-표기법에-의해-생성된-객체의-생성자-함수와-프로토타입" class="headerlink" title="리터럴 표기법에 의해 생성된 객체의 생성자 함수와 프로토타입"></a>리터럴 표기법에 의해 생성된 객체의 생성자 함수와 프로토타입</h2><ul>
<li>프로토타입과 생성자 함수는 단독으로 존재할 수 없고 언제나 쌍(pair)으로 존재한다.</li>
<li>명시적으로 <code>new</code> 연산자와 함께 생성자 함수를 호출하여 인스턴스를 생성하지 않는 객체 생성 방식도 존재한다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 객체 리터럴</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 함수 리터럴</span></span><br><span class="line"><span class="keyword">const</span> add = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123; <span class="keyword">return</span> a + b; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 배열 리터럴</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 정규표현식 리터럴</span></span><br><span class="line"><span class="keyword">const</span> regexr = <span class="regexp">/is/ig</span>;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>리터럴 표기법</th>
<th>생성자 함수</th>
<th>프로토 타입</th>
</tr>
</thead>
<tbody><tr>
<td>객체 리터럴</td>
<td>Object</td>
<td>Object.protptype</td>
</tr>
<tr>
<td>함수 리터럴</td>
<td>Function</td>
<td>Function.prototype</td>
</tr>
<tr>
<td>배열 리터럴</td>
<td>Array</td>
<td>Array.prototype</td>
</tr>
<tr>
<td>정규 표현식 리터럴</td>
<td>RegExp</td>
<td>RegExp.protptype</td>
</tr>
</tbody></table>
<h2 id="프로토타입의-생성-시점"><a href="#프로토타입의-생성-시점" class="headerlink" title="프로토타입의 생성 시점"></a>프로토타입의 생성 시점</h2><p>객체는 리터럴 표기법 또는 생성자 함수에 의해 생성되므로 결국 모든 객체는 생성자 함수와 연결되어 있다.</p>
<blockquote>
<p><strong>생성자 함수</strong><br>사용자가 직접 정의한 <strong>사용자 정의 생성자 함수</strong> 와 자바스크립트가 기본 제공하는 <strong>빌트인 생성자 함수</strong> 로 구분</p>
</blockquote>
<h3 id="사용자-정의-생성자-함수와-프로토타입-생성-시점"><a href="#사용자-정의-생성자-함수와-프로토타입-생성-시점" class="headerlink" title="사용자 정의 생성자 함수와 프로토타입 생성 시점"></a>사용자 정의 생성자 함수와 프로토타입 생성 시점</h3><p>빌트인 생성자 함수가 아닌 <strong>사용자 정의 생성자 함수</strong> 는 자신이 평가되어 함수 객체로 생성되는 시점에 프로토타입도 더불어 생성되며 <strong>생성된 프로토타입의 프로토타입은 언제나 <code>Object.prototype</code></strong> 이다.</p>
<h3 id="빌트인-생성자-함수와-프로토타입-생성-시점"><a href="#빌트인-생성자-함수와-프로토타입-생성-시점" class="headerlink" title="빌트인 생성자 함수와 프로토타입 생성 시점"></a>빌트인 생성자 함수와 프로토타입 생성 시점</h3><p>빌트인 생성자 함수가 생성되는 시점에 프로토타입이 생성된다. <strong>모든 빌트인 생성자 함수는 전역 객체가 생성되는 시점에 생성</strong> 된다. 전역 객체는 누구보다도 먼저 생성된다. 이때 빌트인 생성자 함수와 더불어 프로토타입이 생성된다. 생성된 프로토타입은 빌트인 생성자 함수의 <code>prototype</code> 프로퍼티에 바인딩된다.</p>
<blockquote>
<p><strong>전역 객체(Global Object)</strong><br>전역 객체는 코드가 실행되기 이전 단계에 자바스크립트 엔진에 의해 생성되는 특수한 객체이다. 전역 객체는 클라이언트 사이드 환경(브라우저)에서는 <code>window</code>, 서버 사이드 환경(Node.js)에서는 <code>global</code> 객체를 의미한다.</p>
</blockquote>
<h2 id="객체-생성-방식과-프로토타입의-결정"><a href="#객체-생성-방식과-프로토타입의-결정" class="headerlink" title="객체 생성 방식과 프로토타입의 결정"></a>객체 생성 방식과 프로토타입의 결정</h2><p>각각의 방식 마다 세부적인 객체 생성 방식의 차이는 있으나 <strong>추상 연산 <code>ObjectCreate</code>에 의해 생성된다는 공통점</strong> 을 갖는다.</p>
<ul>
<li>객체 리터럴</li>
<li>Object 생성자 함수</li>
<li>생성자 함수</li>
<li>Object.create 메소드</li>
<li>클래스 (ES6)</li>
</ul>
<h3 id="객체-리터럴에-의해-생성된-객체의-프로토타입"><a href="#객체-리터럴에-의해-생성된-객체의-프로토타입" class="headerlink" title="객체 리터럴에 의해 생성된 객체의 프로토타입"></a>객체 리터럴에 의해 생성된 객체의 프로토타입</h3><p>자바스크립트 엔진은 객체 리터럴을 평가하여 객체를 생성할 때, 추상 연산 <code>ObjectCreate</code>를 호출한다. 이때 추상 연산 <code>ObjectCreate</code>에 전달되는 프로토타입은 <code>Object.prototype</code>이다. 객체 리터럴에 의해 생성되는 객체의 프로토타입은 <code>Object.prototype</code>이다.</p>
<h3 id="Object-생성자-함수에-의해-생성된-객체의-프로토타입"><a href="#Object-생성자-함수에-의해-생성된-객체의-프로토타입" class="headerlink" title="Object 생성자 함수에 의해 생성된 객체의 프로토타입"></a>Object 생성자 함수에 의해 생성된 객체의 프로토타입</h3><p>명시적으로 <code>Object</code> 생성자 함수를 호출하여 객체를 생성하면 빈 객체가 생성된다. <code>Object</code> 생성자 함수를 호출하면 객체 리터럴과 마찬가지로 추상 연산 <code>ObjectCreate</code>를 호출한다. 이때 추상 연산 <code>ObjectCreate</code>에 전달되는 프로토타입은 <code>Object.prototype</code>이다. <code>Object</code> 생성자 함수에 의해 생성되는 객체의 프로토타입은 <code>Object.prototype</code>이다.</p>
<blockquote>
<p><strong>객체 리터럴과 <code>Object</code> 생성자 함수에 의한 객체 생성 방식의 차이</strong>: 프로퍼티를 추가하는 방식<br><strong>객체 리터럴 방식</strong>: 객체 리터럴 내부에 프로퍼티를 추가<br><strong>Object 생성자 함수 방식</strong>: 일단 빈객체를 생성한 이후 프로퍼티를 추가</p>
</blockquote>
<h3 id="생성자-함수에-의해-생성된-객체의-프로토타입"><a href="#생성자-함수에-의해-생성된-객체의-프로토타입" class="headerlink" title="생성자 함수에 의해 생성된 객체의 프로토타입"></a>생성자 함수에 의해 생성된 객체의 프로토타입</h3><p><code>new</code> 연산자와 함께 생성자 함수를 호출하여 인스턴스를 생성하면 다른 객체 방식과 마찬가지로 추상 연산 <code>ObjectCreate</code>를 호출한다. 이때 추상 연산 <code>ObjectCreate</code>에 전달되는 프로토타입은 생성자 함수의 <code>prototype</code> 프로퍼티에 바인딩되어 있는 객체이다. 즉, 생성자 함수에 의해 생성되는 객체의 프로토타입은 생성자 함수의 <code>prototype</code> 프로퍼티에 바인딩되어 있는 객체이다.</p>
<h2 id="프로토타입-체인"><a href="#프로토타입-체인" class="headerlink" title="프로토타입 체인"></a>프로토타입 체인</h2><p>자바스크립트는 객체의 프로퍼티(메소드 포함)에 접근하려고 할 때 해당 객체에 접근하려는 프로퍼티가 없다면 <u><code>__proto__</code> 접근자 프로퍼티가 가리키는 링크를 따라 자신의 부모 역할을 하는 프로토타입의 프로퍼티를 순차적으로 검색한다.</u> 이것을 <strong>프로토타입 체인</strong> 이라 한다. 프로토타입 체인은 자바스크립트가 객체 지향 프로그래밍의 상속을 구현하는 메커니즘이다.</p>
<h3 id="프로토-타입의-종점-End-of-prototype-chain"><a href="#프로토-타입의-종점-End-of-prototype-chain" class="headerlink" title="프로토 타입의 종점(End of prototype chain)"></a><strong>프로토 타입의 종점</strong>(End of prototype chain)</h3><p>프로토타입 체인의 최상위에 위치하는 객체는 언제나 <code>Object.prototype</code>이다. 따라서 모든 객체는 <code>Object.prototype</code>을 상속받는다.  <code>Object.prototype</code>의 프로토타입, 즉 <code>[[Prototype]]</code> 내부 슬롯의 값은 <code>null</code>이다.</p>
<h2 id="캡슐화"><a href="#캡슐화" class="headerlink" title="캡슐화"></a>캡슐화</h2><blockquote>
<p><strong>캡슐화(encapsulation)</strong><br>정보의 일부를 외부에 감추어 은닉(정보 은닉(information hiding))하는 것</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Person = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 생성자 함수</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 프로토타입 메소드</span></span><br><span class="line">  Person.prototype.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Hi! My name is <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 생성자 함수를 반환</span></span><br><span class="line">  <span class="keyword">return</span> Person;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> me = <span class="keyword">new</span> Person(<span class="string">&#x27;Lee&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>외부에 공개할 필요가 없는 구현의 일부를 외부에 노출되지 않도록 감추어 적절치 못한 접근으로부터 정보를 보호하고 객체간의 상호 의존성, 즉 결합도를 낮추는 효과가 있다. <strong>자바스크립트는 <code>public</code>, <code>private</code>, <code>protected</code>와 같은 접근 제한자를 제공하지 않는다.</strong></p>
<p>클로저 참고.</p>
<h2 id="오버라이딩과-프로퍼티-쉐도잉"><a href="#오버라이딩과-프로퍼티-쉐도잉" class="headerlink" title="오버라이딩과 프로퍼티 쉐도잉"></a>오버라이딩과 프로퍼티 쉐도잉</h2><ul>
<li>하위 객체를 통해 프로토타입의 프로퍼티를 변경 또는 삭제하는 것은 불가능하다.</li>
<li>하위 객체를 통해 프로토타입에 <code>get</code> 액세스는 허용되나 <code>set</code> 액세스는 허용되지 않는다.</li>
</ul>
<blockquote>
<p><strong>프로토타입 프로퍼티</strong>: 프로토타입이 소유한 프로퍼티 (메소드 포함)<br><strong>인스턴스 프로퍼티</strong>: 인스턴스가 소유한 프로퍼티</p>
</blockquote>
<blockquote>
<p><strong>오버라이딩(Overriding)</strong><br>상위 클래스가 가지고 있는 메소드를 하위 클래스가 재정의하여 사용하는 방식</p>
</blockquote>
<blockquote>
<p><strong>오버로딩(Overloading)</strong><br>함수의 이름은 동일하지만 매개변수의 타입 또는 개수가 다른 메소드를 구현하고 매개변수에 의해 메소드를 구별하여 호출하는 방식이다. 자바스크립트는 오버로딩을 지원하지 않지만 arguments 객체를 사용하여 구현할 수는 있다.</p>
</blockquote>
<h2 id="프로토타입의-교체"><a href="#프로토타입의-교체" class="headerlink" title="프로토타입의 교체"></a>프로토타입의 교체</h2><p>프로토타입은 <strong>다른 임의의 객체로 변경</strong> 할 수 있다. 부모 객체인 프로토타입을 동적으로 변경할 수 있다는 의미이다. <strong><u>생성자 함수 또는 인스턴스에 의해 교체</u></strong> 할 수 있다.</p>
<blockquote>
<p>프로토타입 교체를 통해 객체 간의 상속 관계를 동적으로 변경하는 것은 꽤나 번거롭다. 하지만 ES6에서 도입된 클래스를 사용하면 간편하고 직관적으로 상속 관계를 구현할 수 있다.</p>
</blockquote>
<h3 id="생성자-함수에-의한-프로토타입의-교체"><a href="#생성자-함수에-의한-프로토타입의-교체" class="headerlink" title="생성자 함수에 의한 프로토타입의 교체"></a>생성자 함수에 의한 프로토타입의 교체</h3><ul>
<li>프로토타입을 교체하면 <code>constructor</code> 프로퍼티와 생성자 함수 간의 링크가 파괴된다.</li>
<li>프로토타입으로 교체한 객체 리터럴에는 <code>constructor</code> 프로퍼티가 없다. 따라서 me 객체의 생성자 함수를 검색하면 <code>Person</code>이 아닌 <code>Object</code>가 나온다.</li>
<li>프로토타입으로 교체한 객체 리터럴에 <code>constructor</code> 프로퍼티를 추가하여 프로토타입의 <code>constructor</code> 프로퍼티를 되살린다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Person = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 생성자 함수의 prototype 프로퍼티를 통해 프로토타입을 교체</span></span><br><span class="line">  Person.prototype = &#123;</span><br><span class="line">    <span class="comment">// constructor 프로퍼티와 생성자 함수 간의 링크 설정</span></span><br><span class="line">    <span class="title">constructor</span>: <span class="title">Person</span>,</span><br><span class="line">    <span class="title">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`Hi! My name is <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> Person;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> me = <span class="keyword">new</span> Person(<span class="string">&#x27;Kim&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// constructor 프로퍼티가 생성자 함수를 가리킨다.</span></span><br><span class="line"><span class="built_in">console</span>.log(me.constructor === Person); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(me.constructor === <span class="built_in">Object</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>


<h3 id="인스턴스에-의한-프로토타입의-교체"><a href="#인스턴스에-의한-프로토타입의-교체" class="headerlink" title="인스턴스에 의한 프로토타입의 교체"></a>인스턴스에 의한 프로토타입의 교체</h3><ul>
<li>인스턴스의 <code>__proto__</code> 접근자 프로퍼티(또는 <code>Object.setPrototypeOf</code> 메소드)를 통해 프로토타입을 교체할 수 있다.</li>
<li>생성자 함수의 <code>prototype</code> 프로퍼티에 다른 임의의 객체를 바인딩하는 것은 미래에 생성할 인스턴스의 프로토타입을 교체하는 것을 의미한다. <code>__proto__</code> 접근자 프로퍼티를 통해 프로토타입을 교체하는 것은 이미 생성된 객체의 프로토타입을 교체하는 것.</li>
<li>인스턴스에 의한 프로토타입 교체도 <code>constructor</code> 프로퍼티와 생성자 함수 간의 연결을 파괴한다.</li>
<li>프로토타입으로 교체한 객체 리터럴에 <code>constructor</code> 프로퍼티를 추가하고 생성자 함수의 <code>prototype</code> 프로퍼티를 재설정한다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> me = <span class="keyword">new</span> Person(<span class="string">&#x27;Kim&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 프로토타입으로 교체할 객체</span></span><br><span class="line"><span class="keyword">const</span> parent = &#123;</span><br><span class="line">  <span class="comment">// constructor 프로퍼티와 생성자 함수 간의 링크 설정</span></span><br><span class="line">  <span class="title">constructor</span>: <span class="title">Person</span>,</span><br><span class="line">  <span class="title">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Hi! My name is <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 생성자 함수의 prototype 프로퍼티와 프로토타입 간의 링크 설정</span></span><br><span class="line">Person.prototype = parent;</span><br><span class="line"></span><br><span class="line"><span class="comment">// me 객체의 프로토타입을 parent 객체로 교체한다.</span></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(me, parent);</span><br><span class="line"><span class="comment">// 위 코드는 아래의 코드와 동일하게 동작한다.</span></span><br><span class="line"><span class="comment">// me.__proto__ = parent;</span></span><br><span class="line"></span><br><span class="line">me.sayHello(); <span class="comment">// Hi! My name is Kim</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// constructor 프로퍼티가 생성자 함수를 가리킨다.</span></span><br><span class="line"><span class="built_in">console</span>.log(me.constructor === Person); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(me.constructor === <span class="built_in">Object</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 생성자 함수의 prototype 프로퍼티가 교체된 프로토타입을 가리킨다.</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype === <span class="built_in">Object</span>.getPrototypeOf(me)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>


<h3 id="생성자-함수에-의한-프로토타입-교체와-인스턴스에-의한-프로토타입-교체의-차이"><a href="#생성자-함수에-의한-프로토타입-교체와-인스턴스에-의한-프로토타입-교체의-차이" class="headerlink" title="생성자 함수에 의한 프로토타입 교체와 인스턴스에 의한 프로토타입 교체의 차이"></a>생성자 함수에 의한 프로토타입 교체와 인스턴스에 의한 프로토타입 교체의 차이</h3><img src="http://mjae404.github.io/images/prototype.jpg" alt="프로토타입 교체 방식에 의해 발생하는 차이">


<h2 id="instanceof-연산자"><a href="#instanceof-연산자" class="headerlink" title="instanceof 연산자"></a>instanceof 연산자</h2><ul>
<li><code>instanceof</code> 연산자는 이항 연산자로서 좌변에 객체를 가리키는 식별자, 우변에 생성자 함수를 가리키는 식별자를 피연산자로 받는다.</li>
<li>우변의 피연산자가 함수가 아닌 경우, <code>TypeError</code>가 발생한다.</li>
<li><code>instanceof</code> 연산자는 프로토타입의 <code>constructor</code> 프로퍼티가 가리키는 생성자 함수를 찾는 것이 아니라 프로토타입 체인 상에 존재하는 프로토타입에 영향을 받는다.</li>
<li><code>instanceof</code> 연산자는 좌변 피연산자의 프로토타입 체인 상에 우변의 피연산자, 즉 생성자 함수의 <code>prototype</code> 프로퍼티에 바인딩된 객체가 존재하는지 검색한다.</li>
<li>생성자 함수에 의해 프로토타입이 교체되어 <code>constructor</code> 프로퍼티와 생성자 함수 간의 링크가 파괴된 경우, 생성자 함수의 <code>prototype</code> 프로퍼티와 프로토타입 간의 링크는 파괴되지 않으므로 <code>instanceof</code>는 아무런 영향을 받지 않는다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">객체 <span class="keyword">instanceof</span> 생성자 함수</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Person = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 생성자 함수의 prototype 프로퍼티를 통해 프로토타입을 교체</span></span><br><span class="line">  Person.prototype = &#123;</span><br><span class="line">    <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`Hi! My name is <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> Person;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> me = <span class="keyword">new</span> Person(<span class="string">&#x27;Lee&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// constructor 프로퍼티와 생성자 함수 간의 링크가 파괴되어도</span></span><br><span class="line"><span class="comment">// instanceof는 아무런 영향을 받지 않는다.</span></span><br><span class="line"><span class="built_in">console</span>.log(me <span class="keyword">instanceof</span> Person); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(me <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="직접-상속"><a href="#직접-상속" class="headerlink" title="직접 상속"></a>직접 상속</h2><h3 id="Object-create에-의한-직접-상속"><a href="#Object-create에-의한-직접-상속" class="headerlink" title="Object.create에 의한 직접 상속"></a>Object.create에 의한 직접 상속</h3><p><code>Object.create</code> 메소드는 명시적으로 프로토타입을 지정하여 새로운 객체를 생성한다. <code>Object.create</code> 메소드도 다른 객체 생성 방식과 마찬가지로 추상 연산 <code>ObjectCreate</code>를 호출한다.</p>
<blockquote>
<p> 직접 상속은 위와 같이 여러 장점이 있다. 하지만 두번째 인자로 프로퍼티를 정의하는 것은 번거롭다.</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 지정된 프로토타입 및 프로퍼티를 갖는 새로운 객체를 생성하여 반환한다.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> <span class="variable">prototype</span></span> - 생성할 객체의 프로토타입으로 지정할 객체</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>[propertiesObject] - 생성할 객체의 프로퍼티를 갖는 객체</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;Object&#125;</span> </span>지정된 프로토타입 및 프로퍼티를 갖는 새로운 객체</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">Object</span>.create(prototype[, propertiesObject])</span><br></pre></td></tr></table></figure>


<h3 id="객체-리터럴-내부에서-proto-에-의한-직접-상속"><a href="#객체-리터럴-내부에서-proto-에-의한-직접-상속" class="headerlink" title="객체 리터럴 내부에서 __proto__에 의한 직접 상속"></a>객체 리터럴 내부에서 __proto__에 의한 직접 상속</h3><p>ES6에서는 객체 리터럴 내부에서 <strong><code>proto</code></strong> 접근자 프로퍼티를 사용하여 직접 상속을 구현할 수 있다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myProto = &#123; <span class="attr">x</span>: <span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 객체 리터럴에 의해 객체를 생성하면서 프로토타입을 지정하여 직접 상속받을 수 있다.</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  y: <span class="number">20</span>,</span><br><span class="line">  <span class="comment">// 객체를 직접 상속받는다.</span></span><br><span class="line">  <span class="comment">// obj → myProto → Object.prototype → null</span></span><br><span class="line">  __proto__: myProto</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 위 코드는 아래와 동일하다.</span></span><br><span class="line"><span class="comment">// const obj = Object.create(myProto, &#123; y: &#123; value: 20 &#125; &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.x, obj.y); <span class="comment">// 10 20</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(obj) === myProto); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="정적-프로퍼티-메소드"><a href="#정적-프로퍼티-메소드" class="headerlink" title="정적 프로퍼티/메소드"></a>정적 프로퍼티/메소드</h2><blockquote>
<p><strong>정적(static) 프로퍼티/메소드</strong>: 생성자 함수로 인스턴스를 생성하지 않아도 참조/호출할 수 있는 프로퍼티/메소드</p>
</blockquote>
<ul>
<li>생성자 함수는 객체이므로 자신의 프로퍼티/메소드를 소유할 수 있다. <strong>생성자 함수 객체가 소유한 프로퍼티/메소드</strong> 를 정적 프로퍼티/메소드라고 부른다.</li>
<li>생성자 함수가 생성한 인스턴스로 참조/호출할 수 없다.</li>
<li>모든 객체는 생성자 함수에 의해 생성된다.</li>
<li>생성자 함수가 생성한 인스턴스는 자신의 프로토타입 체인에 속한 객체의 프로퍼티/메소드에 접근할 수 있다.</li>
<li>정적 프로퍼티/메소드는 인스턴스의 프로토타입 체인에 속한 객체의 프로퍼티/메소드가 아니므로 인스턴스로 접근할 수 없다.</li>
<li>프로토타입 메소드를 호출하려면 인스턴스를 생성해야 하지만 정적 메소드는 인스턴스를 생성하지 않아도 호출할 수 있다.</li>
</ul>
<h2 id="프로퍼티-존재-확인"><a href="#프로퍼티-존재-확인" class="headerlink" title="프로퍼티 존재 확인"></a>프로퍼티 존재 확인</h2><ul>
<li><code>in</code> 연산자는 객체 내에 프로퍼티가 존재하는지 여부를 확인한다.</li>
<li><code>in</code> 연산자는 확인 대상 객체의 프로퍼티 뿐만 아니라 확인 대상 객체가 상속받은 모든 프로토타입의 프로퍼티를 확인한다.<ul>
<li>in 연산자가 <code>person</code> 객체가 속한 프로토타입 체인 상에 존재하는 모든 프로토타입에서 <code>toString</code> 프로퍼티를 검색했기 때문</li>
<li><code>toString</code>은 <code>Object.prototype</code>의 메소드이다.</li>
<li><code>Object.prototype.hasOwnProperty</code> 메소드를 사용해도 객체의 프로퍼티의 존재 여부를 확인 가능. 객체 고유의 프로퍼티인 경우에만 <code>true</code>를 반환하고 상속받은 프로토타입의 프로퍼티인 경우 <code>false</code>를 반환한다.</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * prop: 프로퍼티 키를 나타내는 문자열</span></span><br><span class="line"><span class="comment"> * object: 객체로 평가되는 표현식</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">prop <span class="keyword">in</span> object</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name: <span class="string">&#x27;Lee&#x27;</span>,</span><br><span class="line">  address: <span class="string">&#x27;Seoul&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// person 객체에 name 프로퍼티가 존재한다.</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> person);    <span class="comment">// true</span></span><br><span class="line"><span class="comment">// person 객체에 age 프로퍼티가 존재하지 않는다.</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;age&#x27;</span> <span class="keyword">in</span> person);     <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h2 id="프로퍼티-열거"><a href="#프로퍼티-열거" class="headerlink" title="프로퍼티 열거"></a>프로퍼티 열거</h2><h3 id="for…in-문"><a href="#for…in-문" class="headerlink" title="for…in 문"></a>for…in 문</h3><p>객체의 프로토타입 체인 상에 존재하는 모든 프로토타입의 프로퍼티 중에서 프로퍼티 어트리뷰트 <code>[[Enumerable]]</code>의 값이 <code>ture</code>인 프로퍼티를 순회하며 열거(enumeration)한다.</p>
<ul>
<li>프로퍼티를 열거할 때 순서를 보장하지 않는다.</li>
<li>객체의 프로퍼티 개수만큼 반복하며 <code>for…in</code> 문의 변수 선언문에서 선언한 변수에 프로퍼티 키를 할당한다.</li>
<li><strong>상속받은 프로토타입의 프로퍼티까지 열거</strong> 한다.</li>
<li><code>Object.prototype.string</code> 프로퍼티의 프로퍼티 어트리뷰트 <code>[[Enumerable]]</code>의 값이 <code>false</code>인 경우 <code>Object.prototype</code>의 프로퍼티가 열거되지 않는다.</li>
<li>프로퍼티 키가 심볼인 프로퍼티는 열거하지 않는다.</li>
<li>상속받은 프로퍼티는 제외하고 객체 자신의 프로퍼티 만을 열거하려면 <strong><code>Object.prototype.hasOwnProperty</code> 메소드를 사용하여 객체 자신의 프로퍼티인지 확인</strong> 해야 한다.</li>
<li>배열에는 <code>for…in</code> 문보다 일반적인 <code>for</code> 문이나 <code>for…of</code> 문 또는 <code>Array.prototype.forEach</code> 메소드를 사용하기를 권장한다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (변수선언문 <span class="keyword">in</span> 객체) &#123; … &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name: <span class="string">&#x27;Kim&#x27;</span>,</span><br><span class="line">  address: <span class="string">&#x27;Seoul&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> prop <span class="keyword">in</span> person) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(prop + <span class="string">&#x27;: &#x27;</span> + person[prop]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// name: Kim</span></span><br><span class="line"><span class="comment">// address: Seoul</span></span><br></pre></td></tr></table></figure>

<h3 id="Object-keys-values-entries-메소드"><a href="#Object-keys-values-entries-메소드" class="headerlink" title="Object.keys/values/entries 메소드"></a>Object.keys/values/entries 메소드</h3><ul>
<li><strong>Object.keys</strong>: 객체 자신의 열거 가능한 프로퍼티 키를 배열로 반환한다.</li>
<li>ES8에서 도입된 <strong>Object.values</strong>: 객체 자신의 열거 가능한 프로퍼티 값을 배열로 반환</li>
<li>ES8에서 도입된 <strong>Object.entries</strong>: 객체 자신의 열거 가능한 프로퍼티 키와 값의 쌍의 배열을 배열에 담아 반환</li>
</ul>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://poiemaweb.com/">https://poiemaweb.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>prototype</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 표준 빌트인 객체와 래퍼 객체</title>
    <url>/2020/10/03/js-standard-built-in-object/</url>
    <content><![CDATA[<p>자바스크립트는 크게 3가지 객체로 분류할 수 있다.</p>
<ul>
<li>표준 빌트인 객체</li>
<li>호스트 객체</li>
<li>사용자 정의 객체</li>
</ul>
<a id="more"></a>


<h2 id="자바스크립트-객체의-분류"><a href="#자바스크립트-객체의-분류" class="headerlink" title="자바스크립트 객체의 분류"></a>자바스크립트 객체의 분류</h2><ul>
<li><strong>표준 빌트인 객체(standard built-in objects / native objects / global objects)</strong><ul>
<li>ECMAScript 사양에 정의된 객체를 말한다.</li>
<li>애플리케이션 전역의 공통 기능을 제공한다.</li>
<li>자바스크립트 실행 환경(브라우저 또는 Node.js 환경)과 관계없이 언제나 사용할 수 있다.</li>
<li>표준 빌트인 객체는 전역 객체의 프로퍼티로서 제공된다.</li>
<li>별도의 선언없이 전역 변수처럼 언제나 참조할 수 있다.</li>
</ul>
</li>
<li><strong>호스트 객체(host objects)</strong><ul>
<li>ECMAScript 사양에 정의되어 있지 않지만 자바스크립트 실행 환경에서 추가적으로 제공하는 객체를 말한다.</li>
<li>브라우저 환경: DOM, BOM, Canvas, XMLHttpRequest, fetch, requestAnimationFrame, SVG, Web Storage, Web Component, Web worker와 같은 클라이언트 사이드 Web API를 호스트 객체로 제공</li>
<li>Node.js 환경: Node.js 고유의 API를 호스트 객체로 제공</li>
</ul>
</li>
<li><strong>사용자 정의 객체(user-defined objects)</strong><ul>
<li>표준 빌트인 객체와 호스트 객체처럼 기본 제공되는 객체가 아닌 사용자가 직접 정의한 객체를 말한다.</li>
</ul>
</li>
</ul>
<h2 id="표준-빌트인-객체"><a href="#표준-빌트인-객체" class="headerlink" title="표준 빌트인 객체"></a>표준 빌트인 객체</h2><p>자바스크립트는 Object, String, Number, Boolean, Symbol, Date, Math, RegExp, Array, Map/Set, WeakMap/WeakSet, Function, Promise, Reflect, Proxy, JSON, Error 등 40여개의 <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects">표준 빌트인 객체</a>를 제공한다.</p>
<ul>
<li>Math, Reflect, JSON을 제외한 표준 빌트인 객체는 모두 인스턴스를 생성할 수 있는 생성자 함수 객체.</li>
<li><strong>생성자 함수 객체인 표준 빌트인 객체</strong> 는 프로토타입 메소드와 정적 메소드를 제공<ul>
<li>생성자 함수로 호출하여 인스턴스를 생성할 수 있다.</li>
<li>표준 빌트인 객체의 prototype 프로퍼티에 바인딩된 객체는 다양한 기능의 메소드를 제공한다.</li>
<li>인스턴스 없이도 호출 가능한 정적 메소드도 제공한다.</li>
<li>표준 빌트인 객체인 Number는 인스턴스 없이 정적으로 호출할 수 있는 정적 메소드도 제공한다.</li>
</ul>
</li>
<li><strong>생성자 함수 객체가 아닌 표준 빌트인 객체</strong> 는 정적 메소드만을 제공</li>
</ul>
<h2 id="원시값과-래퍼-객체"><a href="#원시값과-래퍼-객체" class="headerlink" title="원시값과 래퍼 객체"></a>원시값과 래퍼 객체</h2><p>원시값을 객체처럼 사용하면 자바스크립트 엔진은 암묵적으로 연관된 객체를 생성하고 생성된 객체로 프로퍼티에 접근하거나 메소드를 호출하고 다시 원시값으로 되돌린다.</p>
<ul>
<li>문자열, 숫자, 불리언 값 이외의 원시값은 레퍼 객체를 생성하지 않는다.</li>
<li>일반적으로 표준 빌트인 객체가 제공하는 프로토타입 메소드를 사용하려면 반드시 인스턴스를 생성하고 인스턴스로 프로토타입 메소드를 호출해야 한다.</li>
</ul>
<blockquote>
<p><strong>래퍼 객체</strong><br>문자열, 숫자, 불리언 값에 대해 객체처럼 접근하면 생성되는 임시 객체</p>
</blockquote>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://poiemaweb.com/">https://poiemaweb.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>built-in object</tag>
        <tag>standard built-in object</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 엄격모드</title>
    <url>/2020/09/18/js-strict-mode/</url>
    <content><![CDATA[<p><strong><code>strict mode</code></strong> 는 자바스크립트 언어의 문법을 보다 엄격히 적용하여 기존에는 무시되던 오류를 발생시킬 가능성이 높거나 자바스크립트 엔진의 최적화 작업에 문제를 일으킬 수 있는 코드에 대해 명시적인 에러를 발생시킨다. <a href="https://eslint.org/">ESLint</a>와 같은 린트 도구를 사용하여도 <code>strict mode</code>와 유사한 효과를 얻을 수 있다.</p>
<a id="more"></a>

<h2 id="strict-mode의-적용"><a href="#strict-mode의-적용" class="headerlink" title="strict mode의 적용"></a><code>strict mode</code>의 적용</h2><p><code>strict mode</code>를 적용하려면 전역의 선두 또는 함수 몸체의 선두에 <code>&#39;use strict&#39;;</code>를 추가한다. 전역의 선두에 추가하면 스크립트 전체에 <code>strict mode</code>가 적용된다. 코드의 선두에 <code>strict mode</code>를 위치시키지 않으면 제대로 동작하지 않는다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  x = <span class="number">10</span>; <span class="comment">// ReferenceError: x is not defined</span></span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br></pre></td></tr></table></figure>

<h2 id="적용을-피해야-하는-경우"><a href="#적용을-피해야-하는-경우" class="headerlink" title="적용을 피해야 하는 경우"></a>적용을 피해야 하는 경우</h2><h3 id="1-전역에-strict-mode를-적용"><a href="#1-전역에-strict-mode를-적용" class="headerlink" title="1. 전역에 strict mode를 적용"></a><em>1. 전역에 <code>strict mode</code>를 적용</em></h3><p>전역에 적용한 <code>strict mode</code>는 스크립트 단위로 적용된다. 하지만 strict mode 스크립트와 <code>non-strict mode</code> 스크립트를 혼용하는 것은 오류를 발생시킬 수 있다. 특히 외부 서드 파티 라이브러리를 사용하는 경우, <strong>라이브러리가 non-strict mode일 경우도 있기 때문에 즉시 실행 함수로 스크립트 전체를 감싸서 스코프를 구분하고 즉시 실행 함수의 선두에 <code>strict mode</code>를 적용</strong> 한다.</p>
<h3 id="2-함수-단위로-strict-mode를-적용"><a href="#2-함수-단위로-strict-mode를-적용" class="headerlink" title="2. 함수 단위로 strict mode를 적용"></a><em>2. 함수 단위로 <code>strict mode</code>를 적용</em></h3><p><code>strict mode</code>가 적용된 함수가 참조할 함수 외부의 컨텍스트에 <code>strict mode</code>를 적용하지 않는다면 문제가 발생할 수 있다. 따라서 <strong><code>strict mode</code>는 즉시 실행 함수로 감싼 스크립트 단위로 적용하는 것이 바람직</strong> 하다.</p>
<h2 id="strict-mode가-발생시키는-대표적인-에러-사례"><a href="#strict-mode가-발생시키는-대표적인-에러-사례" class="headerlink" title="strict mode가 발생시키는 대표적인 에러 사례"></a><code>strict mode</code>가 발생시키는 대표적인 에러 사례</h2><ol>
<li><p><strong>암묵적 전역</strong><br>선언하지 않은 변수를 참조하면 <code>ReferenceError</code>가 발생한다.</p>
</li>
<li><p><strong>변수, 함수, 매개변수의 삭제</strong><br>delete 연산자로 변수, 함수, 매개변수를 삭제하면 <code>SyntaxError</code>가 발생한다.</p>
</li>
<li><p><strong>매개변수 이름의 중복</strong><br>중복된 함수 매개변수 이름을 사용하면 <code>SyntaxError</code>가 발생한다.</p>
</li>
<li><p><strong>with 문 사용</strong><br><code>with</code> 문을 사용하면<code> SyntaxError</code>가 발생한다.</p>
</li>
</ol>
<h2 id="strict-mode-적용에-의한-변화"><a href="#strict-mode-적용에-의한-변화" class="headerlink" title="strict mode 적용에 의한 변화"></a><code>strict mode</code> 적용에 의한 변화</h2><ol>
<li><p><strong>일반 함수의 <code>this</code></strong><br><code>strict mode</code>에서 함수를 일반 함수로서 호출하면 <code>this</code>에 <code>undefined</code>가 바인딩된다. 생성자 함수가 아닌 일반 함수 내부에서는 <code>this</code>를 사용할 필요가 없기 때문이다. 이때 에러는 발생하지 않는다.</p>
</li>
<li><p><strong><code>arguments</code> 객체</strong><br>strict mode에서는 매개변수에 전달된 인수를 재할당하여 변경하여도 <code>arguments</code> 객체에 반영되지 않는다.</p>
</li>
</ol>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://poiemaweb.com/">https://poiemaweb.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>strict mode</tag>
      </tags>
  </entry>
  <entry>
    <title>JS String 래퍼 객체</title>
    <url>/2020/10/07/js-string-wrapper-object/</url>
    <content><![CDATA[<p>String 객체는 원시 타입인 문자열을 다룰 때 유용한 프로퍼티와 메소드를 제공하는 래퍼(wrapper) 객체이다. 변수 또는 객체 프로퍼티가 문자열을 값으로 가지고 있다면 String 객체의 별도 생성없이 String 객체의 프로퍼티와 메소드를 사용할 수 있다.</p>
<a id="more"></a>

<blockquote>
<p><strong>원시 타입이 wrapper 객체의 메소드를 사용할 수 있는 이유</strong><br>원시 타입으로 프로퍼티나 메소드를 호출할 때 원시 타입과 연관된 wrapper 객체로 일시적으로 변환되어 프로토타입 객체를 공유하게 되기 때문이다.</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;Hello world!&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.toUpperCase()); <span class="comment">// &#x27;HELLO WORLD!&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="String-Constructor"><a href="#String-Constructor" class="headerlink" title="String Constructor"></a>String Constructor</h2><ul>
<li>String 객체는 String 생성자 함수를 통해 생성할 수 있다. 전달된 인자는 모두 문자열로 변환된다.</li>
<li>new 연산자를 사용하지 않고 String 생성자 함수를 호출하면 String 객체가 아닌 문자열 리터럴을 반환한다. 이때 형 변환이 발생할 수 있다.</li>
<li>일반적으로 문자열을 사용할 때는 원시 타입 문자열을 사용한다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">String</span>(value);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> strObj = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&#x27;Lee&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(strObj);</span><br><span class="line"><span class="comment">// String &#123;0: &#x27;L&#x27;, 1: &#x27;e&#x27;, 2: &#x27;e&#x27;, length: 3,</span></span><br><span class="line"><span class="comment">// [[PrimitiveValue]]: &#x27;Lee&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">strObj = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(strObj);</span><br><span class="line"><span class="comment">// String &#123;0: &#x27;1&#x27;, length: 1, [[PrimitiveValue]]: &#x27;1&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">strObj = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="literal">undefined</span>);</span><br><span class="line"><span class="built_in">console</span>.log(strObj);</span><br><span class="line"><span class="comment">// String &#123;0: &#x27;u&#x27;, 1: &#x27;n&#x27;, 2: &#x27;d&#x27;, 3: &#x27;e&#x27;,</span></span><br><span class="line"><span class="comment">// 4: &#x27;f&#x27;, 5: &#x27;i&#x27;, 6: &#x27;n&#x27;, 7: &#x27;e&#x27;, 8: &#x27;d&#x27;,</span></span><br><span class="line"><span class="comment">// length: 9, [[PrimitiveValue]]: &#x27;undefined&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="String-Property"><a href="#String-Property" class="headerlink" title="String Property"></a>String Property</h2><h3 id="String-length"><a href="#String-length" class="headerlink" title="String.length"></a>String.length</h3><p>문자열 내의 문자 갯수를 반환한다. String 객체는 <code>length</code> 프로퍼티를 소유하고 있으므로 유사 배열 객체이다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str1 = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str1.length); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> str2 = <span class="string">&#x27;안녕하세요!&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str2.length); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure>

<h2 id="String-Method"><a href="#String-Method" class="headerlink" title="String Method"></a>String Method</h2><p>문자열은 변경 불가능(immutable)한 원시 값이기 때문에 String 객체의 모든 메소드는 언제나 새로운 문자열을 반환한다.</p>
<h3 id="String-prototype-charAt-pos-number-string-ES1"><a href="#String-prototype-charAt-pos-number-string-ES1" class="headerlink" title="String.prototype.charAt(pos: number): string ES1"></a>String.prototype.charAt(pos: number): string <sup>ES1</sup></h3><ul>
<li>인수로 전달한 index를 사용하여 index에 해당하는 위치의 문자를 반환한다. index는 0 ~ (문자열 길이 - 1) 사이의 정수이다.</li>
<li>지정한 index가 문자열의 범위(0 ~ (문자열 길이 - 1))를 벗어난 경우 빈문자열을 반환한다.</li>
</ul>
<p><img src="/images/string_object_charAt.jpg" alt="문자열의 범위"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">0</span>)); <span class="comment">// H</span></span><br><span class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">1</span>)); <span class="comment">// e</span></span><br><span class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">2</span>)); <span class="comment">// l</span></span><br><span class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">3</span>)); <span class="comment">// l</span></span><br><span class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">4</span>)); <span class="comment">// o</span></span><br><span class="line"><span class="comment">// 지정한 index가 범위(0 ~ str.length-1)를 벗어난 경우 빈문자열을 반환한다.</span></span><br><span class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">5</span>)); <span class="comment">// &#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 문자열 순회. 문자열은 length 프로퍼티를 갖는다.</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(str.charAt(i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// String 객체는 유사 배열 객체이므로 배열과 유사하게 접근할 수 있다.</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(str[i]); <span class="comment">// str[&#x27;0&#x27;]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="String-prototype-concat-…strings-string-string-ES3"><a href="#String-prototype-concat-…strings-string-string-ES3" class="headerlink" title="String.prototype.concat(…strings: string[]): string ES3"></a>String.prototype.concat(…strings: string[]): string <sup>ES3</sup></h3><p>인수로 전달한 1개 이상의 문자열과 연결하여 새로운 문자열을 반환한다. <code>concat</code> 메소드를 사용하는 것보다는 <code>+</code>, <code>+=</code> 할당 연산자를 사용하는 것이 성능상 유리하다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;...string&#125;</span> <span class="variable">str</span></span> - 연결할 문자열</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">str.concat(str1[,str2,...,strN])</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Hello &#x27;</span>.concat(<span class="string">&#x27;Lee&#x27;</span>)); <span class="comment">// Hello Lee</span></span><br></pre></td></tr></table></figure>

<h3 id="String-prototype-indexOf-searchString-string-fromIndex-0-number-ES1"><a href="#String-prototype-indexOf-searchString-string-fromIndex-0-number-ES1" class="headerlink" title="String.prototype.indexOf(searchString: string, fromIndex=0): number ES1"></a>String.prototype.indexOf(searchString: string, fromIndex=0): number <sup>ES1</sup></h3><ul>
<li>인수로 전달한 문자 또는 문자열을 대상 문자열에서 검색하여 처음 발견된 곳의 <code>index</code>를 반환한다.</li>
<li>발견하지 못한 경우 <code>-1</code>을 반환한다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">searchString</span></span> - 검색할 문자 또는 문자열</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>[fromIndex=0] - 검색 시작 index (생략할 경우, 0)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">str.indexOf(searchString[, fromIndex])</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;Hello World&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">&#x27;l&#x27;</span>));  <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">&#x27;or&#x27;</span>)); <span class="comment">// 7</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">&#x27;or&#x27;</span> , <span class="number">8</span>)); <span class="comment">// -1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (str.indexOf(<span class="string">&#x27;Hello&#x27;</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="comment">// 문자열 str에 &#x27;hello&#x27;가 포함되어 있는 경우에 처리할 내용</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6: String.prototype.includes</span></span><br><span class="line"><span class="keyword">if</span> (str.includes(<span class="string">&#x27;Hello&#x27;</span>)) &#123;</span><br><span class="line">  <span class="comment">// 문자열 str에 &#x27;hello&#x27;가 포함되어 있는 경우에 처리할 내용</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="String-prototype-lastIndexOf-searchString-string-fromIndex-this-length-1-number-ES1"><a href="#String-prototype-lastIndexOf-searchString-string-fromIndex-this-length-1-number-ES1" class="headerlink" title="String.prototype.lastIndexOf(searchString: string, fromIndex=this.length-1): number ES1"></a>String.prototype.lastIndexOf(searchString: string, fromIndex=this.length-1): number <sup>ES1</sup></h3><ul>
<li>인수로 전달한 문자 또는 문자열을 대상 문자열에서 검색하여 마지막으로 발견된 곳의 index를 반환한다.</li>
<li>인수로 전달한 문자 또는 문자열을 발견하지 못한 경우 <code>-1</code>을 반환한다.</li>
<li>2번째 인수(fromIndex)가 전달되면 검색 시작 위치를 fromIndex으로 이동하여 역방향으로 검색을 시작한다.<ul>
<li>검색 범위는 0 ~ fromIndex</li>
<li>반환값은 indexOf 메소드와 동일하게 발견된 곳의 index</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">searchString</span></span> - 검색할 문자 또는 문자열</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>[fromIndex=this.length-1]</span></span><br><span class="line"><span class="comment"> * - 검색 시작 index (생략할 경우, 문자열 길이 - 1)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">str.lastIndexOf(searchString[, fromIndex])</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;Hello World&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.lastIndexOf(<span class="string">&#x27;World&#x27;</span>)); <span class="comment">// 6</span></span><br><span class="line"><span class="built_in">console</span>.log(str.lastIndexOf(<span class="string">&#x27;l&#x27;</span>));     <span class="comment">// 9</span></span><br><span class="line"><span class="built_in">console</span>.log(str.lastIndexOf(<span class="string">&#x27;o&#x27;</span>, <span class="number">5</span>));  <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(str.lastIndexOf(<span class="string">&#x27;o&#x27;</span>, <span class="number">8</span>));  <span class="comment">// 7</span></span><br><span class="line"><span class="built_in">console</span>.log(str.lastIndexOf(<span class="string">&#x27;l&#x27;</span>, <span class="number">10</span>)); <span class="comment">// 9</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.lastIndexOf(<span class="string">&#x27;H&#x27;</span>, <span class="number">0</span>));  <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(str.lastIndexOf(<span class="string">&#x27;W&#x27;</span>, <span class="number">5</span>));  <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">console</span>.log(str.lastIndexOf(<span class="string">&#x27;x&#x27;</span>, <span class="number">8</span>));  <span class="comment">// -1</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/string_object_lastIndexOf.jpg" alt="lastIndexOf"></p>
<h3 id="String-prototype-replace-searchValue-string-RegExp-replaceValue-string-replacer-substring-string-…args-any-gt-string-string-string-ES3"><a href="#String-prototype-replace-searchValue-string-RegExp-replaceValue-string-replacer-substring-string-…args-any-gt-string-string-string-ES3" class="headerlink" title="String.prototype.replace(searchValue: string | RegExp, replaceValue: string | replacer: (substring: string, …args: any[]) =&gt; string): string): string ES3"></a>String.prototype.replace(searchValue: string | RegExp, replaceValue: string | replacer: (substring: string, …args: any[]) =&gt; string): string): string <sup>ES3</sup></h3><ul>
<li>첫번째 인수로 전달한 문자열 또는 정규표현식을 대상 문자열에서 검색하여 <strong>두번째 인수로 전달한 문자열로 대체</strong> 한다.</li>
<li>원본 문자열은 변경되지 않고 결과가 반영된 <strong>새로운 문자열을 반환</strong> 한다.</li>
<li>검색된 문자열이 여럿 존재할 경우 <strong>첫번째로 검색된 문자열만 대체</strong> 된다.</li>
<li>문자열의 경우 첫번째 검색 결과만이 대체되지만 <strong>정규표현식을 사용하면 다양한 방식으로 검색</strong> 할 수 있다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string | RegExp&#125;</span> <span class="variable">searchValue</span></span> - 검색 대상 문자열 또는 정규표현식</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string | Function&#125;</span> <span class="variable">replacer</span></span> - 치환 문자열 또는 치환 함수</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">str.replace(searchValue, replacer)</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;Hello world&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 첫번째로 검색된 문자열만 대체하여 새로운 문자열을 반환한다.</span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="string">&#x27;world&#x27;</span>, <span class="string">&#x27;Lee&#x27;</span>)); <span class="comment">// Hello Lee</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 특수한 교체 패턴을 사용할 수 있다. ($&amp; =&gt; 검색된 문자열)</span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="string">&#x27;world&#x27;</span>, <span class="string">&#x27;&lt;strong&gt;$&amp;&lt;/strong&gt;&#x27;</span>));</span><br><span class="line"><span class="comment">// Hello &lt;strong&gt;world&lt;/strong&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 정규표현식</span></span><br><span class="line"><span class="comment">g(Global): 문자열 내의 모든 패턴을 검색한다.</span></span><br><span class="line"><span class="comment">i(Ignore case): 대소문자를 구별하지 않고 검색한다.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="regexp">/hello/gi</span>, <span class="string">&#x27;Lee&#x27;</span>)); <span class="comment">// Lee Lee</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 두번째 인수로 치환 함수를 전달할 수 있다.</span></span><br><span class="line"><span class="comment">// camelCase =&gt; snake_case</span></span><br><span class="line"><span class="keyword">const</span> camelCase = <span class="string">&#x27;helloWorld&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// /.[A-Z]/g =&gt; 1문자와 대문자의 조합을 문자열 전체에서 검색한다.</span></span><br><span class="line"><span class="built_in">console</span>.log(camelCase.replace(<span class="regexp">/.[A-Z]/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">match</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// match : oW =&gt; match[0] : o, match[1] : W</span></span><br><span class="line">  <span class="keyword">return</span> match[<span class="number">0</span>] + <span class="string">&#x27;_&#x27;</span> + match[<span class="number">1</span>].toLowerCase();</span><br><span class="line">&#125;)); <span class="comment">// hello_world</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// /(.)([A-Z])/g =&gt; 1문자와 대문자의 조합</span></span><br><span class="line"><span class="comment">// $1 =&gt; (.)</span></span><br><span class="line"><span class="comment">// $2 =&gt; ([A-Z])</span></span><br><span class="line"><span class="built_in">console</span>.log(camelCase.replace(<span class="regexp">/(.)([A-Z])/g</span>, <span class="string">&#x27;$1_$2&#x27;</span>).toLowerCase());</span><br><span class="line"><span class="comment">// hello_world</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// snake_case =&gt; camelCase</span></span><br><span class="line"><span class="keyword">const</span> snakeCase = <span class="string">&#x27;hello_world&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// /_./g =&gt; _와 1문자의 조합을 문자열 전체에서 검색한다.</span></span><br><span class="line"><span class="built_in">console</span>.log(snakeCase.replace(<span class="regexp">/_./g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">match</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// match : _w =&gt; match[1] : w</span></span><br><span class="line">  <span class="keyword">return</span> match[<span class="number">1</span>].toUpperCase();</span><br><span class="line">&#125;)); <span class="comment">// helloWorld</span></span><br></pre></td></tr></table></figure>

<h3 id="String-prototype-split-separator-string-RegExp-limit-number-string-ES3"><a href="#String-prototype-split-separator-string-RegExp-limit-number-string-ES3" class="headerlink" title="String.prototype.split(separator: string | RegExp, limit?: number): string[] ES3"></a>String.prototype.split(separator: string | RegExp, limit?: number): string[] <sup>ES3</sup></h3><ul>
<li>첫번째 인수로 전달한 문자열 또는 정규표현식을 대상 문자열에서 검색하여 문자열을 구분한 후 <strong>분리된 각 문자열로 이루어진 배열을 반환</strong> 한다.</li>
<li>원본 문자열은 변경되지 않는다.</li>
<li>인수가 없는 경우, 대상 문자열 전체를 단일 요소로 하는 배열을 반환한다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string | RegExp&#125;</span> </span>[separator] - 구분 대상 문자열 또는 정규표현식</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>[limit] - 구분 대상수의 한계를 나타내는 정수</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">str.split([separator[, limit]])</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;How are you doing?&#x27;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 공백으로 구분(단어로 구분)하여 배열로 반환한다</span></span><br><span class="line"><span class="built_in">console</span>.log(str.split(<span class="string">&#x27; &#x27;</span>));</span><br><span class="line"><span class="comment">// [ &#x27;How&#x27;, &#x27;are&#x27;, &#x27;you&#x27;, &#x27;doing?&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 정규 표현식</span></span><br><span class="line"><span class="built_in">console</span>.log(str.split(<span class="regexp">/\s/</span>));</span><br><span class="line"><span class="comment">// [ &#x27;How&#x27;, &#x27;are&#x27;, &#x27;you&#x27;, &#x27;doing?&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 인수가 없는 경우, 대상 문자열 전체를 단일 요소로 하는 배열을 반환한다.</span></span><br><span class="line"><span class="built_in">console</span>.log(str.split());</span><br><span class="line"><span class="comment">// [ &#x27;How are you doing?&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 각 문자를 모두 분리한다</span></span><br><span class="line"><span class="built_in">console</span>.log(str.split(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line"><span class="comment">// [ &#x27;H&#x27;,&#x27;o&#x27;,&#x27;w&#x27;,&#x27; &#x27;,&#x27;a&#x27;,&#x27;r&#x27;,&#x27;e&#x27;,&#x27; &#x27;,</span></span><br><span class="line"><span class="comment">// &#x27;y&#x27;,&#x27;o&#x27;,&#x27;u&#x27;,&#x27; &#x27;,&#x27;d&#x27;,&#x27;o&#x27;,&#x27;i&#x27;,&#x27;n&#x27;,&#x27;g&#x27;,&#x27;?&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 공백으로 구분하여 배열로 반환한다. 단 요소수는 3개까지만 허용한다.</span></span><br><span class="line"><span class="built_in">console</span>.log(str.split(<span class="string">&#x27; &#x27;</span>, <span class="number">3</span>));</span><br><span class="line"><span class="comment">// [ &#x27;How&#x27;, &#x27;are&#x27;, &#x27;you&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#x27;o&#x27;으로 구분하여 배열로 반환한다.</span></span><br><span class="line"><span class="built_in">console</span>.log(str.split(<span class="string">&#x27;o&#x27;</span>));</span><br><span class="line"><span class="comment">// [ &#x27;H&#x27;, &#x27;w are y&#x27;, &#x27;u d&#x27;, &#x27;ing?&#x27; ]</span></span><br></pre></td></tr></table></figure>

<h3 id="String-prototype-substring-start-number-end-this-length-string-ES3"><a href="#String-prototype-substring-start-number-end-this-length-string-ES3" class="headerlink" title="String.prototype.substring(start: number, end=this.length): string ES3"></a>String.prototype.substring(start: number, end=this.length): string <sup>ES3</sup></h3><ul>
<li>첫번째 인수로 전달한 start 인덱스에 해당하는 문자부터 두번째 인자에 전달된 end 인덱스에 해당하는 문자의 <strong>바로 이전 문자까지</strong> 를 모두 반환한다. 이때 첫번째 인수 &lt; 두번째 인수의 관계가 성립된다.</li>
<li>첫번째 인수 &gt; 두번째 인수 : 두 인수는 교환된다.</li>
<li>두번째 인수가 생략된 경우 : 해당 문자열의 끝까지 반환한다.</li>
<li>인수 &lt; 0 또는 NaN인 경우 : 0으로 취급된다.</li>
<li>인수 &gt; 문자열의 길이(str.length) : 인수는 문자열의 길이(str.length)으로 취급된다.</li>
</ul>
<p><img src="/images/string_object_substring.jpg" alt="lastIndexOf"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">start</span></span> - 0 ~ 해당문자열 길이 -1 까지의 정수</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>[end=this.length] - 0 ~ 해당문자열 길이까지의 정수</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">str.substring(start[, end])</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;Hello World&#x27;</span>; <span class="comment">// str.length == 11</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">1</span>, <span class="number">4</span>)); <span class="comment">// ell</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 첫번째 인수 &gt; 두번째 인수 : 두 인수는 교환된다.</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">4</span>, <span class="number">1</span>)); <span class="comment">// ell</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 두번째 인수가 생략된 경우 : 해당 문자열의 끝까지 반환한다.</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">4</span>)); <span class="comment">// o World</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 인수 &lt; 0 또는 NaN인 경우 : 0으로 취급된다.</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(-<span class="number">2</span>)); <span class="comment">// Hello World</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 인수 &gt; 문자열의 길이(str.length) :</span></span><br><span class="line"><span class="comment">// 인수는 문자열의 길이(str.length)으로 취급된다.</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">1</span>, <span class="number">12</span>)); <span class="comment">// ello World</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">11</span>)); <span class="comment">// &#x27;&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">20</span>)); <span class="comment">// &#x27;&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">0</span>, str.indexOf(<span class="string">&#x27; &#x27;</span>))); <span class="comment">// &#x27;Hello&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(str.indexOf(<span class="string">&#x27; &#x27;</span>) + <span class="number">1</span>, str.length)); <span class="comment">// &#x27;World&#x27;</span></span><br></pre></td></tr></table></figure>


<h3 id="String-prototype-slice-start-number-end-number-string-ES3"><a href="#String-prototype-slice-start-number-end-number-string-ES3" class="headerlink" title="String.prototype.slice(start?: number, end?: number): string ES3"></a>String.prototype.slice(start?: number, end?: number): string <sup>ES3</sup></h3><p><code>String.prototype.substring</code>과 동일하다. 단, <code>String.prototype.slice</code>는 <strong>음수의 인수를 전달할 수 있다.</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 인수 &lt; 0 또는 NaN인 경우 : 0으로 취급된다.</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(-<span class="number">5</span>));</span><br><span class="line"><span class="comment">// &#x27;hello world&#x27;</span></span><br><span class="line"><span class="comment">// 뒤에서 5자리를 잘라내어 반환한다.</span></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(-<span class="number">5</span>)); <span class="comment">// &#x27;world&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2번째부터 마지막 문자까지 잘라내어 반환</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">2</span>)); <span class="comment">// llo world</span></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">2</span>)); <span class="comment">// llo world</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 0번째부터 5번째 이전 문자까지 잘라내어 반환</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">0</span>, <span class="number">5</span>)); <span class="comment">// hello</span></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">0</span>, <span class="number">5</span>)); <span class="comment">// hello</span></span><br></pre></td></tr></table></figure>

<h3 id="String-prototype-toLowerCase-string-ES1"><a href="#String-prototype-toLowerCase-string-ES1" class="headerlink" title="String.prototype.toLowerCase(): string ES1"></a>String.prototype.toLowerCase(): string <sup>ES1</sup></h3><p>대상 문자열의 모든 문자를 소문자로 변경한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Hello World!&#x27;</span>.toLowerCase()); <span class="comment">// hello world!</span></span><br></pre></td></tr></table></figure>

<h3 id="String-prototype-toUpperCase-string-ES1"><a href="#String-prototype-toUpperCase-string-ES1" class="headerlink" title="String.prototype.toUpperCase(): string ES1"></a>String.prototype.toUpperCase(): string <sup>ES1</sup></h3><p>대상 문자열의 모든 문자를 대문자로 변경한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Hello World!&#x27;</span>.toUpperCase()); <span class="comment">// HELLO WORLD!</span></span><br></pre></td></tr></table></figure>

<h3 id="String-prototype-trim-string-ES5"><a href="#String-prototype-trim-string-ES5" class="headerlink" title="String.prototype.trim(): string ES5"></a>String.prototype.trim(): string <sup>ES5</sup></h3><p>대상 문자열 양쪽 끝에 있는 공백 문자를 제거한 문자열을 반환한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;   foo  &#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.trim()); <span class="comment">// &#x27;foo&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// String.prototype.replace</span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="regexp">/\s/g</span>, <span class="string">&#x27;&#x27;</span>));   <span class="comment">// &#x27;foo&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="regexp">/^\s+/g</span>, <span class="string">&#x27;&#x27;</span>)); <span class="comment">// &#x27;foo  &#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="regexp">/\s+$/g</span>, <span class="string">&#x27;&#x27;</span>)); <span class="comment">// &#x27;   foo&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// String.prototype.&#123;trimStart,trimEnd&#125; : Proposal stage 3</span></span><br><span class="line"><span class="built_in">console</span>.log(str.trimStart()); <span class="comment">// &#x27;foo  &#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.trimEnd());   <span class="comment">// &#x27;   foo&#x27;</span></span><br></pre></td></tr></table></figure>


<h3 id="String-prototype-repeat-count-number-string-ES6"><a href="#String-prototype-repeat-count-number-string-ES6" class="headerlink" title="String.prototype.repeat(count: number): string ES6"></a>String.prototype.repeat(count: number): string <sup>ES6</sup></h3><ul>
<li>인수로 전달한 숫자만큼 반복해 연결한 새로운 문자열을 반환한다.</li>
<li><code>count</code>가 0이면 빈 문자열을 반환하고 음수이면 <code>RangeError</code>를 발생시킨다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;abc&#x27;</span>.repeat(<span class="number">0</span>));   <span class="comment">// &#x27;&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;abc&#x27;</span>.repeat(<span class="number">1</span>));   <span class="comment">// &#x27;abc&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;abc&#x27;</span>.repeat(<span class="number">2</span>));   <span class="comment">// &#x27;abcabc&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;abc&#x27;</span>.repeat(<span class="number">2.5</span>)); <span class="comment">// &#x27;abcabc&#x27; (2.5 → 2)</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;abc&#x27;</span>.repeat(-<span class="number">1</span>));  <span class="comment">// RangeError: Invalid count value</span></span><br></pre></td></tr></table></figure>

<h3 id="String​-prototype​-includes-searchString-string-position-number-boolean-ES6"><a href="#String​-prototype​-includes-searchString-string-position-number-boolean-ES6" class="headerlink" title="String​.prototype​.includes(searchString: string, position?: number): boolean ES6"></a>String​.prototype​.includes(searchString: string, position?: number): boolean <sup>ES6</sup></h3><ul>
<li>인수로 전달한 문자열이 포함되어 있는지를 검사하고 결과를 불리언 값으로 반환한다.</li>
<li>두번째 인수는 옵션으로 검색할 위치를 나타내는 정수이다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">&#x27;hello&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">&#x27; &#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">&#x27;wo&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">&#x27;wow&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">&#x27;&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.includes()); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// String​.prototype​.indexOf 메소드로 대체할 수 있다.</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">&#x27;hello&#x27;</span>)); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://poiemaweb.com/">https://poiemaweb.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>object</tag>
        <tag>wrapper object</tag>
        <tag>string wrapper object</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 7번째 데이터 타입 symbol</title>
    <url>/2020/10/14/js-symbol/</url>
    <content><![CDATA[<p>심볼(symbol)은 ES6에서 새롭게 추가된 7번째 타입으로 변경 불가능한 원시 타입의 값이다. 심볼 값은 다른 값과 중복되지 않는 유일무이한 값이다. 따라서 주로 이름의 충돌 위험이 없는 유일한 프로퍼티 키를 만들기 위해 사용한다. 심볼은 중복되지 않는 상수 값을 생성하는 것은 물론 기존에 작성된 코드에 영향을 주지 않고 새로운 프로퍼티를 추가하기 위해, 즉 하위 호환성을 보장하기 위해 도입되었다.</p>
<a id="more"></a>

<h2 id="Symbol의-생성"><a href="#Symbol의-생성" class="headerlink" title="Symbol의 생성"></a>Symbol의 생성</h2><p>심볼 값은 Symbol 함수를 호출하여 생성해야 한다. 이때 생성된 심볼 값은 노출되지 않으며 다른 값과 절대 중복되지 않는다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mySymbol = <span class="built_in">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 심볼 값은 노출되지 않는다.</span></span><br><span class="line"><span class="built_in">console</span>.log(mySymbol);        <span class="comment">// Symbol()</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> mySymbol); <span class="comment">// symbol</span></span><br></pre></td></tr></table></figure>

<ul>
<li>new 연산자를 사용하지 않는다.</li>
<li>변경 불가능한 원시 값이다.</li>
<li>선택적으로 문자열을 인수로 전달할 수 있다.</li>
<li>심볼 값에 대한 설명이 같더라도 생성된 심볼 값은 유일무이한 값이다.</li>
<li>심볼 값은 암묵적으로 문자열이나 숫자 타입으로 변환되지 않는다.</li>
<li>불리언 타입으로는 암묵적으로 타입 변환된다.</li>
</ul>
<h2 id="Symbol-for-메소드"><a href="#Symbol-for-메소드" class="headerlink" title="Symbol.for 메소드"></a>Symbol.for 메소드</h2><p>인수로 전달받은 문자열을 키로 사용하여 키와 심볼 값의 쌍들이 저장되어 있는 전역 심볼 레지스트리(global symbol registry)에서 해당 키와 일치하는 심볼 값을 검색한다.</p>
<ul>
<li>검색에 성공하면 새로운 심볼 값을 생성하지 않고 검색된 심볼 값을 반환한다.</li>
<li>검색에 실패하면 새로운 심볼 값을 생성하여 Symbol.for 메소드의 인수로 전달된 키로 전역 Symbol 레지스트리에 저장한 후, 생성된 심볼 값을 반환한다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s1 = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;mySymbol&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> s2 = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;mySymbol&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(s1 === s2); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="Symbol과-상수"><a href="#Symbol과-상수" class="headerlink" title="Symbol과 상수"></a>Symbol과 상수</h2><p>값에는 특별한 의미가 없고 상수 이름 자체에 의미가 있는 경우가 있다. 상수값이 다른 변수 값과 중복될 수 있기 때문에, 중복될 가능성이 있는 무의미한 상수 대신 중복될 가능성이 없는 유일무이한 심볼 값을 사용할 수 있다.</p>
<h2 id="Symbol과-프로퍼티-키"><a href="#Symbol과-프로퍼티-키" class="headerlink" title="Symbol과 프로퍼티 키"></a>Symbol과 프로퍼티 키</h2><ul>
<li>객체의 프로퍼티 키는 빈 문자열을 포함하는 모든 문자열 또는 심볼 값으로 만들 수 있다.</li>
<li>동적으로 생성(Computed property name)할 수 있다.</li>
<li>심볼 값으로 프로퍼티 키를 만들면 다른 프로퍼티 키와 절대 충돌하지 않는다.</li>
</ul>
<h2 id="Symbol과-프로퍼티-은닉"><a href="#Symbol과-프로퍼티-은닉" class="headerlink" title="Symbol과 프로퍼티 은닉"></a>Symbol과 프로퍼티 은닉</h2><ul>
<li>심볼 값으로 동적 생성한 프로퍼티 키로 만든 프로퍼티는 for…in 문이나 Object.keys, Object.getOwnPropertyNames 메소드로 찾을 수 없다.</li>
<li>심볼 값으로 동적 생성한 프로퍼티 키로 프로퍼티를 만들면 프로퍼티를 숨길 수 있다.</li>
<li>단, Object.getOwnPropertySymbols 메소드를 사용하면 심볼 값으로 동적 생성한 프로퍼티 키로 만든 프로퍼티를 찾을 수 있다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>(<span class="string">&#x27;mySymbol&#x27;</span>)]: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key); <span class="comment">// 아무것도 출력되지 않는다.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(obj)); <span class="comment">// []</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyNames(obj)); <span class="comment">// []</span></span><br></pre></td></tr></table></figure>


<h2 id="Symbol과-표준-빌트인-객체-확장"><a href="#Symbol과-표준-빌트인-객체-확장" class="headerlink" title="Symbol과 표준 빌트인 객체 확장"></a>Symbol과 표준 빌트인 객체 확장</h2><p>표준 빌트인 객체에 사용자 정의 메소드를 직접 추가하여 확장하는 것은 권장하지 않는다. <strong>개발자가 직접 추가한 메소드와 미래에 표준 사양으로 추가될 메소드가 이름이 중복</strong> 될 수 있기 때문이다. 중복될 가능성이 없는 심볼 값으로 프로퍼티 키를 생성하여 표준 빌트인 객체를 확장하면 표준 빌트인 객체의 기존 프로퍼티 키와 충돌하지 않는 것은 물론, 버전이 올라감에 따라 추가될지 모르는 어떤 프로퍼티 키와도 충돌할 위험이 없어 안전하게 표준 빌트인 객체를 확장할 수 있다.</p>
<h2 id="Well-known-Symbol"><a href="#Well-known-Symbol" class="headerlink" title="Well known Symbol"></a>Well known Symbol</h2><p><code>Well known Symbol</code>은 자바스크립트가 기본으로 제공하는 빌트인 심볼 값이다. 자바스크립트 엔진의 내부 알고리즘에 사용된다.</p>
<blockquote>
<p><strong>빌트인 이터러블</strong><br>이터러블은 for…of 문으로 순회할 수 있고 스프레드 문법의 피연산자가 될 수 있는 객체를 말한다.</p>
</blockquote>
<table>
<thead>
<tr>
<th>빌트인 이터러블</th>
<th>프로퍼티 키가 Symbol.iterator인 메소드</th>
</tr>
</thead>
<tbody><tr>
<td>Array</td>
<td>Array.prototype[Symbol.iterator]</td>
</tr>
<tr>
<td>String</td>
<td>String.prototype[Symbol.iterator]</td>
</tr>
<tr>
<td>Map</td>
<td>Map.prototype[Symbol.iterator]</td>
</tr>
<tr>
<td>Set</td>
<td>Set.prototype[Symbol.iterator]</td>
</tr>
<tr>
<td>TypedArray</td>
<td>TypedArray.prototype[Symbol.iterator]</td>
</tr>
<tr>
<td>arguments</td>
<td>arguments[Symbol.iterator]</td>
</tr>
<tr>
<td>DOM 컬렉션</td>
<td>NodeList.prototype[Symbol.iterator], HTMLCollection.prototype[Symbol.iterator]</td>
</tr>
</tbody></table>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://poiemaweb.com/">https://poiemaweb.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>es6</tag>
        <tag>symbol</tag>
      </tags>
  </entry>
  <entry>
    <title>JS this</title>
    <url>/2020/09/21/js-this/</url>
    <content><![CDATA[<p><code>this</code>는 객체 자신의 프로퍼티나 메소드를 참조하기 위한 자기 참조 변수(Self-referencing variable)이다. this 바인딩은 함수 호출 방식에 의해 동적으로 결정된다.</p>
<blockquote>
<p><strong>바인딩(Binding)</strong><br>식별자와 값을 연결하는 과정. (ex. 변수는 할당에 의해 값에 바인딩)</p>
</blockquote>
<a id="more"></a>

<ul>
<li>this는 코드 어디든지 참조가 가능하다.</li>
<li>객체의 프로퍼티나 메소드를 참조하기 위한 자기 참조 변수이므로 일반적으로 객체의 메소드 또는 생성자 함수에서 의미가 있다.</li>
<li> <code>strict mode</code>가 적용된 일반 함수 내부의 <code>this</code>에는 <code>undefined</code>가 바인딩된다.</li>
</ul>
<h2 id="함수-호출-방식과-this-바인딩"><a href="#함수-호출-방식과-this-바인딩" class="headerlink" title="함수 호출 방식과 this 바인딩"></a>함수 호출 방식과 this 바인딩</h2><p>this 바인딩(가리키는 값)은 함수가 어떻게 호출되었는지에 따라 동적으로 결정됨.</p>
<table>
<thead>
<tr>
<th>함수 호출 방식</th>
<th>this 바인딩</th>
</tr>
</thead>
<tbody><tr>
<td>일반 함수호출</td>
<td>전역객체</td>
</tr>
<tr>
<td>메소드 호출</td>
<td>메소드를 호출한 객체</td>
</tr>
<tr>
<td>생성자 함수 호출</td>
<td>생성자 함수가 (미래에) 생성할 인스턴스</td>
</tr>
<tr>
<td><code>Function.prototype.apply/call/bind</code> 메소드에 의한 간접 호출</td>
<td><code>Function.prototype.apply/call/bind</code> 메소드에 인자로 전달한 객체</td>
</tr>
</tbody></table>
<h2 id="일반-함수-호출"><a href="#일반-함수-호출" class="headerlink" title="일반 함수 호출"></a>일반 함수 호출</h2><ul>
<li>기본적으로 <code>this</code>에는 전역 객체(Global object)가 바인딩된다.</li>
<li>전역 함수 / 중첩 함수(메소드 내 정의한 중첩 함수 포함) / 콜백 함수를 일반 함수로 호출하면 함수 내부의 <code>this</code>에는 전역 객체가 바인딩된다.</li>
<li>중첩 함수 또는 콜백 함수(보조 함수)는 외부 함수를 돕는 헬퍼 함수로서 역할하므로 외부 함수의 일부 로직을 대신하는 경우가 대부분이기 때문에 전역객체를 바인딩하게 되면 문제가 생긴다. 그러므로 메소드 내부의 중첩함수와 콜백 함수의 <code>this</code> 바인딩을 메소드의 <code>this</code> 바인딩과 일치시켜 주어야 한다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;foo&#x27;s this: &quot;</span>, <span class="built_in">this</span>);  <span class="comment">// window</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;bar&#x27;s this: &quot;</span>, <span class="built_in">this</span>); <span class="comment">// window</span></span><br><span class="line">  &#125;</span><br><span class="line">  bar();</span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>setTimeout 함수</strong><br>두번째 매개변수에 전달한 시간(ms)만큼 대기한 다음, 첫번째 매개변수에 전달한 콜백 함수를 호출하는 타이머 함수</p>
</blockquote>
<p>메소드 내부의 중첩 함수나 콜백 함수의 <code>this</code> 바인딩을 메소드의 <code>this</code> 바인딩과 일치시키기 위한 방법</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  value: <span class="number">50</span>,</span><br><span class="line">  <span class="function"><span class="title">foo</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> that = <span class="built_in">this</span>;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(that.value); <span class="comment">// 50</span></span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.foo();</span><br></pre></td></tr></table></figure>

<h2 id="메소드-호출"><a href="#메소드-호출" class="headerlink" title="메소드 호출"></a>메소드 호출</h2><ul>
<li>메소드 내부의 <code>this</code>는 메소드를 호출한 객체, 즉 메소드 이름 앞의 마침표(<code>.</code>) 연산자 앞에 기술한 객체에 바인딩된다.</li>
<li>주의할 점: 메소드 내부의 <code>this</code>는 메소드를 소유한 객체가 아닌 메소드를 호출한 객체에 바인딩된다.</li>
<li>프로토타입 메소드 내부에서 사용된 <code>this</code>도 일반 메소드와 마찬가지로 해당 메소드를 호출한 객체에 바인딩된다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name: <span class="string">&#x27;Lee&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    name: <span class="string">&#x27;Kim&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.getName()); <span class="comment">// 호출한 객체는 person</span></span><br></pre></td></tr></table></figure>

<h2 id="생성자-함수-호출"><a href="#생성자-함수-호출" class="headerlink" title="생성자 함수 호출"></a>생성자 함수 호출</h2><ul>
<li>생성자 함수 내부의 <code>this</code>에는 생성자 함수가 (미래에) 생성할 인스턴스가 바인딩된다.</li>
<li>일반 함수와 동일한 방법으로 생성자 함수를 정의하고 <code>new</code> 연산자와 함께 호출하면 해당 함수는 생성자 함수로 동작한다.</li>
<li><code>new</code> 연산자와 함께 생성자 함수를 호출하지 않으면 생성자 함수가 아니라 일반 함수로 동작한다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Circle</span>(<span class="params">radius</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.radius = radius;</span><br><span class="line">  <span class="built_in">this</span>.getDiameter = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * <span class="built_in">this</span>.radius;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> circle1 = <span class="keyword">new</span> Circle(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">const</span> circle2 = <span class="keyword">new</span> Circle(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(circle1.getDiameter()); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(circle2.getDiameter()); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure>


<h2 id="Function-prototype-apply-call-bind-메소드에-의한-간접-호출"><a href="#Function-prototype-apply-call-bind-메소드에-의한-간접-호출" class="headerlink" title="Function.prototype.apply/call/bind 메소드에 의한 간접 호출"></a>Function.prototype.apply/call/bind 메소드에 의한 간접 호출</h2><ul>
<li>this를 명시적으로 바인딩한다.</li>
<li><code>Function.prototype.apply</code>, <code>Function.prototype.call</code> 메소드는 인수로 <code>this</code>와 인수 리스트를 전달받아 함수를 호출한다.</li>
<li><code>apply</code>와 <code>call</code> 메소드의 본질적인 기능은 함수를 호출하는 것이다. 호출할 함수에 인수를 전달하는 방식만 다를 뿐 동일하게 동작한다.<ul>
<li><code>apply</code> 메소드: 호출할 함수의 인수를 배열로 묶어 전달.</li>
<li><code>call</code> 메소드: 호출할 함수의 인수를 쉼표로 구분한 리스트 형식으로 전달.</li>
<li>대표적인 용도: arguments 객체와 같은 유사 배열 객체에 배열 메소드를 사용하는 경우.(arguements 객체는 배열이 아니기 때문에 <code>Arry.prototype.slice</code>와 같은 배열 메소드를 사용할 수 없다.)</li>
<li><code>Function</code> 생성자 함수를 <code>constructor</code> 프로퍼티로 가리키는 모든 함수가 상속받아 사용할 수 있다.</li>
</ul>
</li>
<li><code>bind</code> 메소드는 <code>this</code>로 사용할 객체만을 전달한다.</li>
</ul>
<p><em>apply, call 메소드</em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getThisBinding</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> thisArg = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;; <span class="comment">// this로 사용할 객체</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getThisBinding.apply(thisArg, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]));</span><br><span class="line"><span class="comment">// Arguments(3) [1, 2, 3, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span></span><br><span class="line"><span class="comment">// &#123; a: 1 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getThisBinding.call(thisArg, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line"><span class="comment">// Arguments(3) [1, 2, 3, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span></span><br><span class="line"><span class="comment">// &#123; a: 1 &#125;</span></span><br></pre></td></tr></table></figure>


<p><em>bind 메소드</em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.doSomething = <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  callback.bind(<span class="built_in">this</span>)();</span><br><span class="line">  <span class="comment">// callback.apply(this);</span></span><br><span class="line">  <span class="comment">// callback.call(this);</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person(<span class="string">&#x27;Lee&#x27;</span>);</span><br><span class="line">person.doSomething(foo); <span class="comment">// Lee</span></span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://poiemaweb.com/">https://poiemaweb.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>this</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 타입변환과 단축평가</title>
    <url>/2020/09/16/js-type-casting/</url>
    <content><![CDATA[<blockquote>
<p><strong>명시적 타입 변환 / 타입 캐스팅</strong>: 개발자가 의도적으로 값의 타입을 변환하는 것</p>
</blockquote>
<blockquote>
<p><strong>암묵적 타입 변환 / 타입 강제 변환</strong>: 개발자의 의도와는 관계 없이 자바스크립트에 의해 암묵적으로 타입이 자동 변환되는 것</p>
</blockquote>
<a id="more"></a>

<h2 id="암묵적-타입-변환"><a href="#암묵적-타입-변환" class="headerlink" title="암묵적 타입 변환"></a>암묵적 타입 변환</h2><p>자바스크립트 엔진은 코드의 문맥을 고려하여 암묵적으로 타입변환을 실행한다.</p>
<h3 id="문자열-타입"><a href="#문자열-타입" class="headerlink" title="문자열 타입"></a>문자열 타입</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> + <span class="string">&#x27;&#x27;</span>              <span class="comment">// &quot;0&quot;</span></span><br><span class="line">-<span class="number">0</span> + <span class="string">&#x27;&#x27;</span>             <span class="comment">// &quot;0&quot;</span></span><br><span class="line"><span class="number">1</span> + <span class="string">&#x27;&#x27;</span>              <span class="comment">// &quot;1&quot;</span></span><br><span class="line">-<span class="number">1</span> + <span class="string">&#x27;&#x27;</span>             <span class="comment">// &quot;-1&quot;</span></span><br><span class="line"><span class="literal">NaN</span> + <span class="string">&#x27;&#x27;</span>            <span class="comment">// &quot;NaN&quot;</span></span><br><span class="line">(<span class="built_in">Symbol</span>()) + <span class="string">&#x27;&#x27;</span>     <span class="comment">// TypeError: Cannot convert a Symbol value to a string</span></span><br><span class="line">(&#123;&#125;) + <span class="string">&#x27;&#x27;</span>           <span class="comment">// &quot;[object Object]&quot;</span></span><br><span class="line"><span class="built_in">Math</span> + <span class="string">&#x27;&#x27;</span>           <span class="comment">// &quot;[object Math]&quot;</span></span><br><span class="line">[] + <span class="string">&#x27;&#x27;</span>             <span class="comment">// &quot;&quot;</span></span><br><span class="line">[<span class="number">10</span>, <span class="number">20</span>] + <span class="string">&#x27;&#x27;</span>       <span class="comment">// &quot;10,20&quot;</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;) + <span class="string">&#x27;&#x27;</span> <span class="comment">// &quot;function()&#123;&#125;&quot;</span></span><br><span class="line"><span class="built_in">Array</span> + <span class="string">&#x27;&#x27;</span>          <span class="comment">// &quot;function Array() &#123; [native code] &#125;&quot;</span></span><br></pre></td></tr></table></figure>


<h3 id="숫자-타입으로-변환"><a href="#숫자-타입으로-변환" class="headerlink" title="숫자 타입으로 변환"></a>숫자 타입으로 변환</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> - <span class="string">&#x27;1&#x27;</span>    <span class="comment">// 0</span></span><br><span class="line"><span class="number">1</span> * <span class="string">&#x27;10&#x27;</span>   <span class="comment">// 10</span></span><br><span class="line"><span class="number">1</span> / <span class="string">&#x27;one&#x27;</span>  <span class="comment">// NaN</span></span><br><span class="line">+<span class="literal">undefined</span>      <span class="comment">// NaN</span></span><br><span class="line">+<span class="built_in">Symbol</span>()       <span class="comment">// TypeError: Cannot convert a Symbol value to a number</span></span><br></pre></td></tr></table></figure>


<h3 id="불리언-타입으로-변환"><a href="#불리언-타입으로-변환" class="headerlink" title="불리언 타입으로 변환"></a>불리언 타입으로 변환</h3><p>자바스크립트 엔진은 불리언 타입이 아닌 값을 Truthy 값(참으로 인식할 값) 또는 Falsy 값(거짓으로 인식할 값)으로 구분한다. <strong>Falsy 값 이외의 값은 제어문의 조건식과 같이 불리언 값으로 평가되어야 할 문맥에서 모두 true로 평가되는 Truthy 값</strong> 이다.</p>
<p><em>false로 평가되는 Falsy값</em></p>
<ul>
<li>false</li>
<li>undefined</li>
<li>null</li>
<li>0, -0</li>
<li>NaN</li>
<li>‘ ‘ (빈문자열)</li>
</ul>
<h2 id="명시적-타입-변환"><a href="#명시적-타입-변환" class="headerlink" title="명시적 타입 변환"></a>명시적 타입 변환</h2><p>개발자의 의도에 의해 명시적으로 타입을 변경하는 방법은 다양하다.</p>
<ul>
<li>표준 빌트인 생성자 함수(String, Number, Boolean)를 new 연산자 없이 호출하는 방법</li>
<li>자바스크립트에서 제공하는 빌트인 메소드를 사용하는 방법</li>
<li>암묵적 타입 변환을 이용하는 방법</li>
</ul>
<h3 id="문자열-타입으로-변환"><a href="#문자열-타입으로-변환" class="headerlink" title="문자열 타입으로 변환"></a>문자열 타입으로 변환</h3><ol>
<li>String 생성자 함수를 new 연산자 없이 호출하는 방법</li>
<li>Object.prototype.toString 메소드를 사용하는 방법</li>
<li>문자열 연결 연산자를 이용하는 방법</li>
</ol>
<h3 id="숫자-타입으로-변환-1"><a href="#숫자-타입으로-변환-1" class="headerlink" title="숫자 타입으로 변환"></a>숫자 타입으로 변환</h3><ol>
<li>Number 생성자 함수를 new 연산자 없이 호출하는 방법</li>
<li>parseInt, parseFloat 함수를 사용하는 방법(문자열만 숫자 타입으로 변환 가능)</li>
<li><code>+</code> 단항 연결 연산자를 이용하는 방법</li>
<li><code>*</code> 산술 연산자를 이용하는 방법</li>
</ol>
<h3 id="불리언-타입으로-변환-1"><a href="#불리언-타입으로-변환-1" class="headerlink" title="불리언 타입으로 변환"></a>불리언 타입으로 변환</h3><ol>
<li>Boolean 생성자 함수를 new 연산자 없이 호출하는 방법</li>
<li>! 부정 논리 연산자를 두번 사용하는 방법</li>
</ol>
<h2 id="단축-평가"><a href="#단축-평가" class="headerlink" title="단축 평가"></a>단축 평가</h2><p>논리합(||) 연산자와 논리곱(&amp;&amp;) 연산자의 연산 결과는 불리언 값이 아닐 수도 있다. 이 두 연산자는 언제나 <strong>피연산자 중 어느 한쪽 값을 반환</strong> 한다.</p>
<blockquote>
<p><strong>단축평가(Short-Circuit evaluation)</strong>: 논리 평가를 결정한 피연산자를 그대로 반환한다.</p>
</blockquote>
<table>
<thead>
<tr>
<th>단축 평가 표현식</th>
<th>평가결과</th>
</tr>
</thead>
<tbody><tr>
<td>true ││ anything</td>
<td>true</td>
</tr>
<tr>
<td>false ││ anything</td>
<td>anything</td>
</tr>
<tr>
<td>true &amp;&amp; anything</td>
<td>anything</td>
</tr>
<tr>
<td>false &amp;&amp; anything</td>
<td>false</td>
</tr>
</tbody></table>
<p><em>유용하게 사용되는 부분</em></p>
<ul>
<li><strong>객체가 null인지 확인하고 프로퍼티를 참조할 때</strong><ul>
<li>객체가 null인 경우, 객체의 프로퍼티를 참조하면 타입 에러(TypeError)가 발생한다. 이때 단축 평가를 사용하면 에러를 발생시키지 않는다.</li>
</ul>
</li>
<li><strong>함수 매개변수에 기본값을 설정할 때</strong><ul>
<li>함수를 호출할 때 인수를 전달하지 않으면 매개변수는 undefined를 갖는다. 이때 단축 평가를 사용하여 매개변수의 기본값을 설정하면 undefined로 인해 발생할 수 있는 에러를 방지할 수 있다.</li>
</ul>
</li>
</ul>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://poiemaweb.com/">https://poiemaweb.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>type casting</tag>
        <tag>Short-Circuit evaluation</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 변수</title>
    <url>/2020/08/16/js-variable/</url>
    <content><![CDATA[<blockquote>
<p>하나의 값을 저장할 수 있는 메모리 공간 자체 또는 그 메모리 공간을 식별하기 위해 붙인 이름을 말한다.</p>
</blockquote>
<a id="more"></a>

<h2 id="식별자"><a href="#식별자" class="headerlink" title="식별자"></a>식별자</h2><p>변수 이름을 식별자라고도 부른다. 어떤 값이 저장되어 있는 메모리 주소를 기억해야 한다.</p>
<h2 id="변수선언"><a href="#변수선언" class="headerlink" title="변수선언"></a>변수선언</h2><p><strong>변수</strong>: 바뀔 수 있는 값. 값을 선언 후에 바꿀 수 있다. (var, let)<br><strong>상수</strong>: 한번 선언하고 값이 바뀌지 않는 고정적인 값. (const)<br><strong>let / const</strong>: 재선언 불가</p>
<h2 id="변수-호이스팅"><a href="#변수-호이스팅" class="headerlink" title="변수 호이스팅"></a>변수 호이스팅</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(score); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> score; <span class="comment">// 변수 선언(변수 선언문)</span></span><br></pre></td></tr></table></figure>
<p>변수 선언문이 코드의 선두로 끌어올려진 것처럼 동작한다.</p>
<h2 id="값의-할당"><a href="#값의-할당" class="headerlink" title="값의 할당"></a>값의 할당</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(score); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> score = <span class="number">80</span>;     <span class="comment">// 변수 선언과 값의 할당</span></span><br><span class="line"><span class="built_in">console</span>.log(score); <span class="comment">// 80</span></span><br></pre></td></tr></table></figure>
<p>변수에 값을 할당(assignment 대입, 저장)할 때는 할당 연산자(=)를 사용한다. 할당 연산자는 우변의 값을 좌변의 변수에 할당한다. 변수 선언과 값의 할당을 아래와 같이 하나의 문(Statement)으로 단축 표현할 수도 있다. 변수 선언은 소스 코드가 순차적으로 실행되기 이전, 즉 런타임 이전에 먼저 실행되지만 값의 할당은 소스 코드가 순차적으로 실행되는 시점인 런타임에 실행된다.</p>
<h2 id="값의-재할당"><a href="#값의-재할당" class="headerlink" title="값의 재할당"></a>값의 재할당</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> score = <span class="number">80</span>; <span class="comment">// 변수 선언과 값의 할당</span></span><br><span class="line">score = <span class="number">90</span>;     <span class="comment">// 값의 재할당</span></span><br></pre></td></tr></table></figure>
<p>var 키워드로 선언한 변수는 값을 재할당할 수 있다. 재할당은 현재 변수가 저장하고 있는 값을 버리고 새로운 값을 저장하는 것이다. 재할당을 할 수 없어서 변수에 저장된 값을 변경할 수 없다면 변수가 아니라 상수(Constant)라 부른다.</p>
<blockquote>
<p><strong>가비지 컬렉터(Garbage Collector)</strong><br>애플리케이션이 할당(allocate)한 메모리 공간을 주기적으로 검사하여 더 이상 사용되고 있지 않는 메모리를 해제(release)하는 기능</p>
</blockquote>
<blockquote>
<p><strong>언매니지드 언어</strong><br>개발자가 명시적으로 메모리를 할당하고 해제하기 위해 malloc()과 free()와 같은 저수준(low-level) 메모리 관리 기능을 제공한다.<br><strong>장점</strong>: 메모리 관리를 개발자가 주도하므로 개발자의 역량에 의해 최적의 퍼포먼스를 확보<br><strong>단점</strong>: 치명적 오류를 생산할 가능성도 동시에 존재</p>
</blockquote>
<blockquote>
<p><strong>매니지드 언어</strong><br>메모리의 할당 및 해제를 위한 메모리 관리 기능을 언어 차원에서 담당하고 개발자의 직접적인 메모리 제어를 허용하지 않는다.<br><strong>장점</strong>: 개발자의 역량에 의존하는 부분이 상대적으로 작아져 어느 정도 일정한 생산성을 확보<br><strong>단점</strong>: 퍼포먼스 면에서의 손실은 감수할 수 밖에 없음</p>
</blockquote>
<h2 id="값의-교환"><a href="#값의-교환" class="headerlink" title="값의 교환"></a>값의 교환</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> y = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> temp = x;</span><br><span class="line">x = y;</span><br><span class="line">y = temp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x, y); <span class="comment">// 2 1</span></span><br></pre></td></tr></table></figure>

<h2 id="식별자-네이밍-규칙"><a href="#식별자-네이밍-규칙" class="headerlink" title="식별자 네이밍 규칙"></a>식별자 네이밍 규칙</h2><ul>
<li>특수문자를 제외한 문자, 숫자, underscore(_), 달러기호($)를 포함할 수 있다.</li>
<li>식별자는 숫자로 시작할 수 없다.</li>
<li>예약어는 식별자로 사용할 수 없다.</li>
</ul>
<blockquote>
<p><strong>예약어</strong><br>await / break / case / catch / class / const / continue / debugger / default / delete / do / else / enum / export / extends / false / finally / for / function / if / implements ＊ / import / in / Instanceof / interface  / let ＊ / new / null / package ＊ / private ＊ / protected ＊ / public ＊ / return / super / static ＊ / Switch / this / throw / true / try / typeof / var / void / while / with / yield ＊</p>
<p><strong>＊</strong>: 식별자로 사용 가능하나 Strict Mode에서는 사용 불가</p>
</blockquote>
<h3 id="표기법"><a href="#표기법" class="headerlink" title="표기법"></a>표기법</h3><ol>
<li>캐멀 표기법 (ex. newName)</li>
<li>파스칼 표기법 (ex. NewName)</li>
<li>스네이크 표기법 (ex. new_name)</li>
<li>헝가리언 표기법 (ex. strNewName // type + identifier)</li>
</ol>
<ul>
<li>캐멀 표기법을 사용하여 변수의 의미를 파악할 수 있도록 한다.</li>
<li>영어 단어를 기본적으로 사용한다.</li>
<li>루프 카운터 변수로는 i, j, k 등을 사용한다.</li>
<li>상수는 대문자로 표현한다. (ex. MAX_SIZE)</li>
<li>논리값을 표현하는 변수에는 앞에 is을 붙인다. (ex. isMouseDown)</li>
<li>생성자 이름은 파스칼 표기법을 사용한다.</li>
</ul>
<h2 id="데이터-타입"><a href="#데이터-타입" class="headerlink" title="데이터 타입"></a>데이터 타입</h2><ol>
<li>원시 타입</li>
</ol>
<ul>
<li>숫자 (Number): 정수, 실수</li>
<li>문자열 (String): 문자열</li>
<li>불리언 (Boolean): 논치적 참, 거짓 (true, false)</li>
<li>null: 값이 없다는 것을 의도적으로 명시</li>
<li>undefined: 선언은 되었지만 값이 할당되지 않았을 때 암묵적으로 할당되는 값</li>
<li>Symbol: Es6에서 새롭게 추가된 7번째 타입</li>
</ul>
<ol start="2">
<li>객체 타입</li>
</ol>
<ul>
<li>객체</li>
<li>함수</li>
<li>배열</li>
</ul>
<h3 id="데이터-타입이-필요한-이유"><a href="#데이터-타입이-필요한-이유" class="headerlink" title="데이터 타입이 필요한 이유"></a>데이터 타입이 필요한 이유</h3><ol>
<li>값을 저장할 때 확보해야 하는 메모리 공간의 크기를 결정하기 위해</li>
<li>값을 참조할 때 한번에 읽어 들여야 할 메모리 공간의 크기를 결정하기 위해</li>
<li>메모리에서 읽어 들인 2진수를 어떻게 해석할지를 결정하기 위해</li>
</ol>
<h2 id="값"><a href="#값" class="headerlink" title="값"></a>값</h2><p>더 이상 평가할 수 없는 하나의 표현식이다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 변수에는 표현식 1 + 2의 평가되어 생성한 값 3이 할당된다.</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">1</span> + <span class="number">2</span>;</span><br></pre></td></tr></table></figure>


<h3 id="리터럴"><a href="#리터럴" class="headerlink" title="리터럴"></a>리터럴</h3><p>리터럴은 소스 코드 안에서 직접 만들어 낸 고정된 값 자체이다. 리터럴 표기법은 사람이 이해할 수 있는 표기법으로 값의 생성을 자바스크립트 엔진에게 명령하는 것이다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 표기법만 다를 뿐 같은 값이다.</span></span><br><span class="line"><span class="number">65</span> <span class="comment">// 정수 리터럴</span></span><br><span class="line"><span class="number">0b01000001</span> <span class="comment">// 2진수 리터럴</span></span><br><span class="line"><span class="number">0o101</span> <span class="comment">// 8진수 리터럴</span></span><br><span class="line"><span class="number">0x41</span> <span class="comment">// 16진수 리터럴</span></span><br></pre></td></tr></table></figure>


<h3 id="표현식"><a href="#표현식" class="headerlink" title="표현식"></a>표현식</h3><p>표현식은 하나의 값으로 평가될 수 있는 문(statement)이다.</p>
<h2 id="숫자-타입"><a href="#숫자-타입" class="headerlink" title="숫자 타입"></a>숫자 타입</h2><ul>
<li>배정밀도 64비트 부동소수점 형식(double-precision 64-bit floating-point format)을 따른다.</li>
<li>모든 수를 실수로 처리한다.</li>
<li>특별한 값 표현 가능하다.<ul>
<li>Infinity: 양의 무한대</li>
<li>Infinity: 음의 무한대</li>
<li>NaN: 산술 연산 불가(not-a-number)</li>
</ul>
</li>
</ul>
<h2 id="문자열-타입"><a href="#문자열-타입" class="headerlink" title="문자열 타입"></a>문자열 타입</h2><ul>
<li>0개 이상의 16bit 유니코드 문자(UTF-16) 들의 집합으로 전세계 대부분의 문자를 표현할 수 있다.</li>
<li>작은 따옴표(‘’), 큰 따옴표(“”) 또는 백틱(``) 안에 텍스트를 넣어 생성한다.</li>
<li> 따옴표로 문자열을 감싸지 않는다면 스페이스와 같은 공백 문자도 포함시킬 수 없다.</li>
<li>문자열은 원시 타입이며 변경 불가능한 값 (immutable value)</li>
</ul>
<h3 id="이스케이프-시퀀스-Escape-Sequence"><a href="#이스케이프-시퀀스-Escape-Sequence" class="headerlink" title="이스케이프 시퀀스(Escape Sequence)"></a>이스케이프 시퀀스(Escape Sequence)</h3><table>
<thead>
<tr>
<th>이스케이프 시퀀스</th>
<th>의미</th>
</tr>
</thead>
<tbody><tr>
<td>＼0</td>
<td>Null</td>
</tr>
<tr>
<td>＼b</td>
<td>백스페이스</td>
</tr>
<tr>
<td>＼f</td>
<td>새로운 페이지</td>
</tr>
<tr>
<td>＼n</td>
<td>개행(LF, Line Feed)</td>
</tr>
<tr>
<td>＼r</td>
<td>캐리지 리턴(CR, Carriage Return)</td>
</tr>
<tr>
<td>＼t</td>
<td>탭(수평)</td>
</tr>
<tr>
<td>＼v</td>
<td>탭(수직)</td>
</tr>
<tr>
<td>＼’</td>
<td>작은 따옴표</td>
</tr>
<tr>
<td>＼”</td>
<td>큰 따옴표</td>
</tr>
<tr>
<td>＼＼</td>
<td>백슬래시</td>
</tr>
</tbody></table>
<h3 id="템플릿-리터럴"><a href="#템플릿-리터럴" class="headerlink" title="템플릿 리터럴"></a>템플릿 리터럴</h3><ul>
<li>여러 줄에 걸쳐 문자열을 작성 가능하다.</li>
<li>모든 공백은 있는 그대로 적용된다.</li>
<li>백틱(``)을 사용한다.</li>
</ul>
<h3 id="문자열-인터폴레이션"><a href="#문자열-인터폴레이션" class="headerlink" title="문자열 인터폴레이션"></a>문자열 인터폴레이션</h3><p>${ }으로 표현식을 감싼다. 이때 표현식의 평가 결과는 문자열로 강제 타입 변환된다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> first = <span class="string">&#x27;Minjee&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> last = <span class="string">&#x27;Kim&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6: String Interpolation</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`My name is <span class="subst">$&#123;first&#125;</span> <span class="subst">$&#123;last&#125;</span>.`</span>);</span><br><span class="line"><span class="comment">// My name is Minjee Kim.</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">`1 + 1 = <span class="subst">$&#123;<span class="number">1</span> + <span class="number">1</span>&#125;</span>`</span>); <span class="comment">// 1 + 1 = 2</span></span><br></pre></td></tr></table></figure>


<h2 id="불리언-타입"><a href="#불리언-타입" class="headerlink" title="불리언 타입"></a>불리언 타입</h2><p>true, false 값만 가지고 있다. 참과 거짓으로 구분되는 조건에 의해 프로그램의 흐름을 제어하는 조건문에서 주로 사용한다.</p>
<h2 id="undefined-타입"><a href="#undefined-타입" class="headerlink" title="undefined 타입"></a>undefined 타입</h2><p>값은 undefined가 유일하다. 선언 이후 명시적으로 값을 할당하지 않은 변수는 자바스크립트 엔진의 암묵적 초기화에 의해 undefined 값을 가진다. 변수에 값이 없다는 것을 명시하고 싶은 경우 null을 할당한다.</p>
<h2 id="null-타입"><a href="#null-타입" class="headerlink" title="null 타입"></a>null 타입</h2><p> 값은 null이 유일하다. 변수에 값이 없다는 것을 의도적으로 명시(의도적 부재 Intentional absence)할 때 사용한다. 변수에 null을 할당하는 것은 변수가 이전에 참조하던 값을 더이상 참조하지 않겠다는 의미이다.</p>
<h2 id="symbol-타입"><a href="#symbol-타입" class="headerlink" title="symbol 타입"></a>symbol 타입</h2><p> ES6에서 새롭게 추가된 7번째 타입으로 변경 불가능한 원시 타입의 값이다. 심볼은 주로 이름의 충돌 위험이 없는 객체의 유일한 프로퍼티 키(property key)를 만들기 위해 사용한다. Symbol 함수를 호출해 생성한다. 다른 값과 절대 중복되지 않는 유일무이한 값이다.</p>
<h2 id="객체-타입"><a href="#객체-타입" class="headerlink" title="객체 타입"></a>객체 타입</h2><p>자바스크립트는 객체 기반의 언어이며 자바스크립트를 이루고 있는 거의 “모든 것”이 객체다.</p>
<h2 id="동적-타이핑"><a href="#동적-타이핑" class="headerlink" title="동적 타이핑"></a>동적 타이핑</h2><blockquote>
<p><strong>정적 타입(Static/Strong type) 언어</strong><br>변수의 타입을 변경할 수 없으며 변수에 선언한 타입에 맞는 값만을 할당할 수 있다.</p>
</blockquote>
<blockquote>
<p><strong>동적 타입(Dynamic/Weak type) 언어</strong><br>변수는 선언이 아닌 할당에 의해 타입이 결정된다. 그리고 재할당에 의해 변수의 타입은 언제든지 동적으로 변할 수 있다.</p>
</blockquote>
<h3 id="변수를-사용할-때-주의사항"><a href="#변수를-사용할-때-주의사항" class="headerlink" title="변수를 사용할 때 주의사항"></a>변수를 사용할 때 주의사항</h3><ul>
<li>변수의 사용을 적극적으로 줄인다.</li>
<li>전역 변수는 사용하지 않는다.</li>
<li>변수의 스코프를 최대한 짧게 만든다.</li>
<li>변수보다는 상수를 사용해 값의 변경을 최소한으로 한다.</li>
<li>변수 이름은 변수의 사용 이유를 파악할 수 있도록 짓는다.</li>
</ul>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://poiemaweb.com/">https://poiemaweb.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>variable</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>npm dart sass</title>
    <url>/2021/08/08/npm-dart-sass/</url>
    <content><![CDATA[<p>SASS 컴파일러 설치해본다.</p>
<a id="more"></a>

<h3 id="sass-설치-명령어"><a href="#sass-설치-명령어" class="headerlink" title="sass 설치 명령어"></a>sass 설치 명령어</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install sass -g</span><br></pre></td></tr></table></figure>

<h3 id="버전-확인"><a href="#버전-확인" class="headerlink" title="버전 확인"></a>버전 확인</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm show sass version</span><br><span class="line">sass --version</span><br></pre></td></tr></table></figure>

<h3 id="컴파일"><a href="#컴파일" class="headerlink" title="컴파일"></a>컴파일</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sass &lt;변환할 scss 파일명&gt; &lt;변환될 css 파일명&gt;</span><br></pre></td></tr></table></figure>

<h3 id="SASS-watch-옵션"><a href="#SASS-watch-옵션" class="headerlink" title="SASS watch 옵션"></a>SASS watch 옵션</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sass --watch style.scss style.css</span><br></pre></td></tr></table></figure>

<p><em><strong>폴더감시</strong></em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sass --watch scss:css</span><br></pre></td></tr></table></figure>

<h3 id="소스맵-생성되지-않는-명령어"><a href="#소스맵-생성되지-않는-명령어" class="headerlink" title="소스맵 생성되지 않는 명령어"></a>소스맵 생성되지 않는 명령어</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sass --no-source-map style.scss style.css</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://nykim.work/97">https://nykim.work/97</a></p>
</blockquote>
]]></content>
      <categories>
        <category>npm</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>dart sass</tag>
      </tags>
  </entry>
  <entry>
    <title>마크다운</title>
    <url>/2020/09/04/markdown/</url>
    <content><![CDATA[<p>마크다운(markdown)은 일반 텍스트 문서를 편집하는 문법이다. 사용법이 쉽고 빠르게 문서를 정리할 수 있다. 엔터키 한 번은 제대로 적용되지 않기 때문에 문장이 연달아서 적용된다. 줄바꿈은 엔터 두 번으로 구분한다.</p>
<a id="more"></a>

<h2 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h2><ol>
<li>문법이 쉽다.</li>
<li>관리하기가 쉽다.</li>
<li>지원 가능한 플랫폼과 프로그램이 다양하다.</li>
</ol>
<h2 id="단점"><a href="#단점" class="headerlink" title="단점"></a>단점</h2><ol>
<li>표준이 없어 사용자마다 문법이 상이하다.</li>
<li>모든 HTML 마크업을 대신할 수 없다.</li>
</ol>
<h2 id="제목-Heading"><a href="#제목-Heading" class="headerlink" title="제목 (Heading)"></a>제목 (Heading)</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 제목 1</span></span><br><span class="line"><span class="section">## 제목 2</span></span><br><span class="line"><span class="section">### 제목 3</span></span><br><span class="line"><span class="section">#### 제목 4</span></span><br><span class="line"><span class="section">##### 제목 5</span></span><br><span class="line"><span class="section">###### 제목 6</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>h1과 h2는 다음과 같이도 표현 가능하다.</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">제목 1</span><br><span class="line">======</span><br><span class="line"></span><br><span class="line">제목 2</span><br><span class="line">------</span><br></pre></td></tr></table></figure>


<h2 id="강조-Emphasis"><a href="#강조-Emphasis" class="headerlink" title="강조(Emphasis)"></a>강조(Emphasis)</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="emphasis">*이텔릭체*</span>, <span class="emphasis">_이텔릭체_</span></span><br><span class="line"><span class="strong">**볼드**</span>, <span class="strong">__볼드__</span></span><br><span class="line">~~취소선~~</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>밑줄<span class="xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="윗첨자-아랫첨자"><a href="#윗첨자-아랫첨자" class="headerlink" title="윗첨자, 아랫첨자"></a>윗첨자, 아랫첨자</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">^ 윗첨자 ^</span><br><span class="line">~ 아랫첨자 ~</span><br></pre></td></tr></table></figure>

<blockquote>
<p>호환이 되지 않는 경우에는 <code>&lt;sup&gt;</code>, <code>&lt;sub&gt;</code> 태그를 사용하면 적용할 수 있다.</p>
</blockquote>
<h2 id="리스트-List"><a href="#리스트-List" class="headerlink" title="리스트 (List)"></a>리스트 (List)</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 순서가 필요한 목록</span><br><span class="line"><span class="bullet">1.</span> 순서가 필요한 목록</span><br><span class="line"><span class="bullet">  -</span> 순서가 필요하지 않은 목록(서브)</span><br><span class="line"><span class="bullet">  -</span> 순서가 필요하지 않은 목록(서브)</span><br><span class="line"><span class="bullet">1.</span> 순서가 필요한 목록</span><br><span class="line"><span class="bullet">  1.</span> 순서가 필요한 목록(서브)</span><br><span class="line"><span class="bullet">  1.</span> 순서가 필요한 목록(서브)</span><br><span class="line"><span class="bullet">1.</span> 순서가 필요한 목록</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 순서가 필요하지 않은 목록에 사용 가능한 기호</span><br><span class="line"><span class="bullet">  -</span> 대쉬(hyphen)</span><br><span class="line"><span class="bullet">  *</span> 별표(asterisks)</span><br><span class="line"><span class="bullet">  +</span> 더하기(plus sign)</span><br></pre></td></tr></table></figure>


<h2 id="링크-Links"><a href="#링크-Links" class="headerlink" title="링크(Links)"></a>링크(Links)</h2>  <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">GOOGLE</span>](<span class="link">https://google.com</span>)</span><br><span class="line">[<span class="string">GOOGLE</span>](<span class="link">https://google.com &quot;링크 설명(title</span>)을 작성하세요.&quot;)</span><br><span class="line">[<span class="string">상대적 참조</span>](<span class="link">../users/login</span>)</span><br><span class="line"></span><br><span class="line">구글 홈페이지: https://google.com</span><br><span class="line">구글 홈페이지:  <span class="xml">&lt;https://google.com&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="이미지-링크-Images-Link"><a href="#이미지-링크-Images-Link" class="headerlink" title="이미지 링크 (Images Link)"></a>이미지 링크 (Images Link)</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">이미지 설명</span>](<span class="link">이미지 링크</span>)</span><br><span class="line">[<span class="string">![이미지 설명</span>](<span class="link">이미지 링크</span>)](<span class="link">연결하고자하는 url &quot;마우스 오버 시 나타낼 링크 title&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="체크박스-Checkbox"><a href="#체크박스-Checkbox" class="headerlink" title="체크박스(Checkbox)"></a>체크박스(Checkbox)</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> [ ] 체크박스</span><br><span class="line"><span class="bullet">-</span> [x] 체크박스</span><br><span class="line"><span class="bullet">*</span> [x] 체크박스</span><br><span class="line"><span class="bullet">+</span> [x] 체크박스</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="인용문-blockquote"><a href="#인용문-blockquote" class="headerlink" title="인용문 (blockquote)"></a>인용문 (blockquote)</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 작성할 내용</span></span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong></p>
</blockquote>
<ul>
<li><a href="https://heropy.blog/2017/09/30/markdown/">https://heropy.blog/2017/09/30/markdown/</a></li>
<li><a href="https://velog.io/@yuuuye/velog-%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4MarkDown-%EC%9E%91%EC%84%B1%EB%B2%95">https://velog.io/@yuuuye/velog-%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4MarkDown-%EC%9E%91%EC%84%B1%EB%B2%95</a></li>
</ul>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>npm gulp-file-include</title>
    <url>/2021/07/31/npm-gulp-file-include/</url>
    <content><![CDATA[<p>파일을 인클루드하기 위한 gulp 플러그인.</p>
<a id="more"></a>

<h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save-dev gulp-file-include</span><br></pre></td></tr></table></figure>

<h2 id="API-gulp-js-파일"><a href="#API-gulp-js-파일" class="headerlink" title="API (gulp.js 파일)"></a>API (gulp.js 파일)</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fileinclude = <span class="built_in">require</span>(<span class="string">&#x27;gulp-file-include&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">&quot;gulp&quot;</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">&#x27;fileinclude&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src([</span><br><span class="line">        <span class="string">&quot;./src/html/*/*/*&quot;</span>, <span class="comment">// 불러올 파일 위치</span></span><br><span class="line">        <span class="string">&quot;!&quot;</span> + <span class="string">&quot;./src/html/include/*&quot;</span> <span class="comment">// 읽지 않을 파일 위치</span></span><br><span class="line">    ])</span><br><span class="line">    .pipe(fileinclude(&#123;</span><br><span class="line">        prefix: <span class="string">&#x27;@@&#x27;</span>,</span><br><span class="line">        bashpath: <span class="string">&#x27;@file&#x27;</span></span><br><span class="line">    &#125;))</span><br><span class="line"></span><br><span class="line">    .pipe(gulp.dest(<span class="string">&#x27;./dist/&#x27;</span>)); <span class="comment">// 변환한 파일 저장 위치</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="prefix"><a href="#prefix" class="headerlink" title="prefix"></a>prefix</h3><p>Type: <code>string</code><br>Default: <code>@@</code></p>
<h3 id="fileinclude-options"><a href="#fileinclude-options" class="headerlink" title="fileinclude([options])"></a>fileinclude([options])</h3><p>Type: <code>object</code></p>
<p><strong>options.prefix</strong><br>Type: <code>string</code><br>Default: <code>@@</code></p>
<p><strong>options.suffix</strong><br>Type: <code>string</code><br>Default: ``</p>
<p><strong>options.basepath</strong><br>Type: <code>string</code><br>Default: <code>@file</code><br>possible values: <code>@file</code>, <code>@root</code>, <code>path/to/dir</code></p>
<p><strong>options.filters</strong><br>Type: <code>object</code><br>Default: <code>false</code></p>
<p><strong>options.context</strong><br>Type: <code>object</code><br>Default: <code>&#123;&#125;</code><br>Context of <code>if</code> statement.</p>
<p><strong>options.indent</strong><br>Type: <code>boolean</code><br>Default: <code>false</code></p>
<h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><h3 id="if문"><a href="#if문" class="headerlink" title="if문"></a>if문</h3><p><em><strong>index.html</strong></em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@@include(&#x27;./if-nav.html&#x27;, &#123;</span><br><span class="line">  context: &#123;</span><br><span class="line">      name: &#x27;test&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>if-nav.html</strong></em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@@if (name === &#x27;test&#x27; &amp;&amp; nav === true) &#123;</span><br><span class="line">  @@include(&#x27;test.html&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="for문"><a href="#for문" class="headerlink" title="for문"></a>for문</h3><p><em><strong>index.html</strong></em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@@include(&#x27;./for-list.html&#x27;, &#123;</span><br><span class="line">  context: &#123;</span><br><span class="line">      arr: [&#x27;test1&#x27;, &#x27;test2&#x27;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>for-list.html</strong></em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">@@for (var i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">  &lt;li&gt;&#96;+arr[i]+&#96;&lt;&#x2F;li&gt;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>

<h3 id="loop문"><a href="#loop문" class="headerlink" title="loop문"></a>loop문</h3><p><em><strong>index.html</strong></em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@@loop(&#x27;loop-article.html&#x27;, [</span><br><span class="line">  &#123; &quot;title&quot;: &quot;My post title&quot;, &quot;text&quot;: &quot;<span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem ipsum...<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&quot; &#125;,</span><br><span class="line">  &#123; &quot;title&quot;: &quot;Another post&quot;, &quot;text&quot;: &quot;<span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem ipsum...<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&quot; &#125;,</span><br><span class="line">  &#123; &quot;title&quot;: &quot;One more post&quot;, &quot;text&quot;: &quot;<span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem ipsum...<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&quot; &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<p><em><strong>loop-article.html</strong></em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>@@title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  @@text</span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong></p>
</blockquote>
<ul>
<li><a href="https://www.npmjs.com/package/gulp-file-include">https://www.npmjs.com/package/gulp-file-include</a></li>
<li><a href="https://fresh-mint.tistory.com/entry/%ED%85%9C%ED%94%8C%EB%A6%BF-gulp-file-include-%EC%84%A4%EC%B9%98%EB%B0%A9%EB%B2%95?category=867150">https://fresh-mint.tistory.com/entry/%ED%85%9C%ED%94%8C%EB%A6%BF-gulp-file-include-%EC%84%A4%EC%B9%98%EB%B0%A9%EB%B2%95?category=867150</a></li>
</ul>
]]></content>
      <categories>
        <category>npm</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>gulp file include</tag>
      </tags>
  </entry>
  <entry>
    <title>npm gulp</title>
    <url>/2021/08/12/npm-gulp/</url>
    <content><![CDATA[<p>gulp는 개발 워크플로우에서 번거롭거나 시간이 많이 걸리는 작업을 자동화하는 데 도움이 되는 툴킷이다. npm 모듈을 사용하여 원하는 작업을 수행할 수 있으며 배우기 쉽고 사용하기 쉽다.</p>
<a id="more"></a>

<h2 id="gulp-cli-글로벌-설치"><a href="#gulp-cli-글로벌-설치" class="headerlink" title="gulp-cli 글로벌 설치"></a>gulp-cli 글로벌 설치</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --global gulp-cli</span><br></pre></td></tr></table></figure>

<h2 id="gulp-설치"><a href="#gulp-설치" class="headerlink" title="gulp 설치"></a>gulp 설치</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save-dev gulp</span><br></pre></td></tr></table></figure>

<h2 id="gulpfile-js-생성"><a href="#gulpfile-js-생성" class="headerlink" title="gulpfile.js 생성"></a>gulpfile.js 생성</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">&quot;gulp&quot;</span>); <span class="comment">// gulp 플러그인 사용시 필수</span></span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">&#x27;function이름1&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> funtion기능<span class="number">1</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">&#x27;function이름2&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> funtion기능<span class="number">2</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">…</span><br></pre></td></tr></table></figure>

<h2 id="gulp-기본-코드"><a href="#gulp-기본-코드" class="headerlink" title="gulp 기본 코드"></a>gulp 기본 코드</h2><h3 id="gulp-src"><a href="#gulp-src" class="headerlink" title="gulp.src()"></a>gulp.src()</h3><p>task할 파일의 위치를 설정한다.</p>
<h3 id="gulp-pipe"><a href="#gulp-pipe" class="headerlink" title="gulp.pipe()"></a>gulp.pipe()</h3><p>해당 파일을 읽고 난 뒤, 연결되어야 할 플러그인으로 연결한다. 또 여러 플러그인을 실행할 때 파이프 역할을 하기도 한다.</p>
<h3 id="gulp-dest"><a href="#gulp-dest" class="headerlink" title="gulp.dest()"></a>gulp.dest()</h3><p>task 결과물이 저장될 위치를 지정해준다.</p>
<hr>
<blockquote>
<p><strong>REFERENCE</strong></p>
</blockquote>
<ul>
<li><a href="https://www.npmjs.com/package/gulp">https://www.npmjs.com/package/gulp</a></li>
<li><a href="https://fresh-mint.tistory.com/entry/gulp-%EC%84%A4%EC%B9%98-src-pipe-dest?category=867150">https://fresh-mint.tistory.com/entry/gulp-%EC%84%A4%EC%B9%98-src-pipe-dest?category=867150</a></li>
</ul>
]]></content>
      <categories>
        <category>npm</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>gulp</tag>
      </tags>
  </entry>
  <entry>
    <title>npm 개요</title>
    <url>/2021/01/03/npm-overview/</url>
    <content><![CDATA[<p><code>npm</code>은 세계에서 가장 큰 소프트웨어 레지스트리이다. <code>Node Package Manager</code>의 약자이며 <code>node.js</code>에서 사용하는 모듈들을 패키지로 만들어 <code>npm</code>을 통하여 관리하고 배포한다. 다른 사람들이 만들어둔 모듈들을 설치하여 사용할 수 있으며, 다른 모듈의 의존성도 자동으로 해결해주고 있다.</p>
<a id="more"></a>

<h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><p><code>node.js</code>만 설치하면 자동 설치가 가능하다.</p>
<blockquote>
<p>node.js 다운로드 페이지: <a href="http://www.nodejs.org/">http://www.nodejs.org</a></p>
</blockquote>
<ul>
<li><strong>LTS(Long Term Supported) 버전</strong> : 안정성과 보안성에 초점을 두어 개발 (짝수 버전)</li>
<li><strong>Stable 버전</strong> : 잦은 업데이트. 프론트엔드는 Stable 버전을 추천한다. (홀수 버전)</li>
</ul>
<h2 id="npm의-기본-명령어"><a href="#npm의-기본-명령어" class="headerlink" title="npm의 기본 명령어"></a>npm의 기본 명령어</h2><h3 id="npm-버전"><a href="#npm-버전" class="headerlink" title="npm 버전"></a>npm 버전</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<h3 id="npm-패키지-설치"><a href="#npm-패키지-설치" class="headerlink" title="npm 패키지 설치"></a>npm 패키지 설치</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install &lt;패키지명&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install &lt;패키지명&gt; -g</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>-g</code>은 global의 약자로 전역 설치를 하겠다는 의미이다.</p>
</blockquote>
<h3 id="package-json을-생성"><a href="#package-json을-생성" class="headerlink" title="package.json을 생성"></a>package.json을 생성</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure>

<h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><ul>
<li>모든 npm 패키지는 <code>package.json</code>이라는 파일로 정의된다.</li>
<li><code>json</code>은 <strong>JSON</strong> 으로 쓰여져야 한다.</li>
<li>정의 파일에는 최소 이름과 버전을 포함한 두 개 이상의 필드가 있어야 한다.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot; : &quot;foo&quot;,</span><br><span class="line">    &quot;version&quot; : &quot;1.2.3&quot;,</span><br><span class="line">    &quot;description&quot; : &quot;A package for fooing things&quot;,</span><br><span class="line">    &quot;main&quot; : &quot;foo.js&quot;,</span><br><span class="line">    &quot;keywords&quot; : [&quot;foo&quot;, &quot;fool&quot;, &quot;foolish&quot;],</span><br><span class="line">    &quot;author&quot; : &quot;John Doe&quot;,</span><br><span class="line">    &quot;licence&quot; : &quot;ISC&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong></p>
</blockquote>
<ul>
<li><a href="https://web-front-end.tistory.com/3">https://web-front-end.tistory.com/3</a></li>
<li><a href="https://www.w3schools.com/whatis/whatis_npm.asp">https://www.w3schools.com/whatis/whatis_npm.asp</a></li>
</ul>
]]></content>
      <categories>
        <category>npm</category>
      </categories>
      <tags>
        <tag>overview</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 조건문, 배열, 반복문</title>
    <url>/2021/07/29/php-conditions-array-loop/</url>
    <content><![CDATA[<p>PHP 기본 문법에서 조건문, 배열, 반복문을 확인해본다.</p>
<a id="more"></a>

<h2 id="조건문"><a href="#조건문" class="headerlink" title="조건문"></a>조건문</h2><ul>
<li>0이 기본이지만 PHP에서는 false일 경우 출력하지 않음</li>
<li>대소문자 구분함</li>
<li>&amp;&amp; / and : 둘다 참일 때 true</li>
<li>|| / or : 둘중 하나만 참이어도 true</li>
<li>xor : 두개의 조건이 서로 다르면 true</li>
<li>and, or, xor는 PHP에 존재 (자바스크립트에는 없음)</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$result</span> = <span class="number">1</span> &lt; <span class="number">3</span>; <span class="comment">// true</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$result</span>; <span class="comment">// 1이 출력됨</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$result</span> = <span class="number">1</span> &gt; <span class="number">3</span>; <span class="comment">// false</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$result</span>; <span class="comment">// 0이 기본이지만 PHP에서는 false일 경우 출력하지 않음</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$result</span> = <span class="number">1</span> &lt; <span class="number">3</span>; <span class="comment">// true</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$result</span> == <span class="literal">true</span>; <span class="comment">// 1이 출력됨</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$first_name</span> = <span class="string">&#x27;mjae&#x27;</span>;</span><br><span class="line">    <span class="variable">$last_name</span> = <span class="string">&#x27;kim&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$first_name</span> == <span class="string">&#x27;Mjae&#x27;</span>) &#123; <span class="comment">// 대소문자 구분함</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;조건은 참&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;조건은 거짓&#x27;</span>;</span><br><span class="line">    &#125; <span class="comment">// 조건은 거짓</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$first_name</span> = <span class="string">&#x27;mjae&#x27;</span>;</span><br><span class="line">    <span class="variable">$last_name</span> = <span class="string">&#x27;kim&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$first_name</span> == <span class="string">&#x27;Mjae&#x27;</span> <span class="keyword">and</span> <span class="variable">$last_name</span> == <span class="string">&#x27;kim&#x27;</span> ) &#123; <span class="comment">// &amp;&amp;와 같음</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;조건은 참&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;조건은 거짓&#x27;</span>;</span><br><span class="line">    &#125; <span class="comment">// 조건은 거짓</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="배열"><a href="#배열" class="headerlink" title="배열"></a>배열</h2><ul>
<li>$배열 이름 = array();</li>
<li><code>isset(변수명, 변수명, 변수명…)</code>: 세팅이 있는지 확인한다.</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$fruits</span> = <span class="keyword">array</span>();</span><br><span class="line">    <span class="variable">$fruits</span>[<span class="number">0</span>] = <span class="string">&#x27;apple&#x27;</span>;</span><br><span class="line">    <span class="variable">$fruits</span>[<span class="number">1</span>] = <span class="string">&#x27;banana&#x27;</span>;</span><br><span class="line">    <span class="variable">$fruits</span>[<span class="number">2</span>] = <span class="string">&#x27;orange&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$fruits</span>; <span class="comment">// 오류</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$fruits</span>[<span class="number">0</span>]; <span class="comment">// apple</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// 해당 식으로 줄여 사용 가능</span></span><br><span class="line">    <span class="variable">$fruits</span> = <span class="keyword">array</span>(<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banna&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 배열에 값이 있는 경우 */</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$fruits</span>[<span class="number">2</span>])) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$fruits</span>[<span class="number">2</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;과일배열에는 2번째 값이 없다&#x27;</span></span><br><span class="line">    &#125; <span class="comment">// orange</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 배열에 값이 없는 경우 */</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$fruits</span>[<span class="number">3</span>])) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$fruits</span>[<span class="number">3</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;과일배열에는 3번째 값이 없다&#x27;</span></span><br><span class="line">    &#125; <span class="comment">// 과일배열에는 3번째 값이 없다</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="연관-배열-Associative-Array"><a href="#연관-배열-Associative-Array" class="headerlink" title="연관 배열 (Associative Array)"></a>연관 배열 (Associative Array)</h3><ul>
<li>숫자로만 가져올 수 있는 것이 아니라 문자열로도 가져올 수 있는 배열이다.</li>
<li>키는 해당 문자열 이름을 가르킨다. (ex - apple, banana …)</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$fruits</span> = <span class="keyword">array</span>();</span><br><span class="line">    <span class="variable">$fruits</span>[<span class="string">&#x27;apple&#x27;</span>] = <span class="number">1000</span>;</span><br><span class="line">    <span class="variable">$fruits</span>[<span class="string">&#x27;banana&#x27;</span>] = <span class="number">2000</span>;</span><br><span class="line">    <span class="variable">$fruits</span>[<span class="string">&#x27;orange&#x27;</span>] = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$prices</span> <span class="keyword">as</span> <span class="variable">$key</span> = <span class="variable">$price</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$key</span>. <span class="string">&#x27; _ &#x27;</span> .<span class="variable">$price</span>.<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// apple _ 1000</span></span><br><span class="line">    <span class="comment">// banana _ 2000</span></span><br><span class="line">    <span class="comment">// orange _ 3000</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// 해당 식으로 줄여 사용 가능</span></span><br><span class="line">    <span class="variable">$prices</span> = <span class="keyword">array</span>(<span class="string">&#x27;apple&#x27;</span> = <span class="number">1000</span>, <span class="string">&#x27;banana&#x27;</span> =&gt; <span class="number">2000</span>, <span class="string">&#x27;orange&#x27;</span> =&gt; <span class="number">3000</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="반복문"><a href="#반복문" class="headerlink" title="반복문"></a>반복문</h2><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><ul>
<li>자바스크립트에서는 <code>length</code>이지만 PHP에서는 <code>conunt()</code>이다.</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$fruits</span> = <span class="keyword">array</span>(<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; $ &lt; count(<span class="variable">$fruits</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$fruits</span>[<span class="variable">$i</span>].<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// apple</span></span><br><span class="line">    <span class="comment">// banana</span></span><br><span class="line">    <span class="comment">// orange</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$fruits</span> = <span class="keyword">array</span>(<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$fruts</span> <span class="keyword">as</span> <span class="variable">$item</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$item</span>.<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// apple</span></span><br><span class="line">    <span class="comment">// banana</span></span><br><span class="line">    <span class="comment">// orange</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>Rock’s Easyweb<br><a href="https://www.youtube.com/watch?v=_oDE8lJGr7M&amp;list=PL-qMANrofLytZY15Agdi7wFc1seGO7Onb&amp;index=3">https://www.youtube.com/watch?v=_oDE8lJGr7M&amp;list=PL-qMANrofLytZY15Agdi7wFc1seGO7Onb&amp;index=3</a></p>
</blockquote>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>array</tag>
        <tag>php</tag>
        <tag>conditions</tag>
        <tag>loop</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 쿠키와 세션의 기본 사용법</title>
    <url>/2021/08/02/php-cookie-session/</url>
    <content><![CDATA[<p>PHP 기본 문법에서 쿠키와 세션을 확인해본다.</p>
<a id="more"></a>

<h2 id="cookie-쿠키"><a href="#cookie-쿠키" class="headerlink" title="cookie (쿠키)"></a>cookie (쿠키)</h2><ul>
<li>이름, 값, 만기 날짜, 경로가 제일 중요하다.</li>
<li>클라이언트에 저장된다.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$_COOKIE[name]</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $cookieName = &#x27;city&#x27;;</span><br><span class="line">    $cookieValue = &#x27;seoul&#x27;;</span><br><span class="line"></span><br><span class="line">    setcookie($cookieName, $cookieValue, time()+60, &#x27;/&#x27;);</span><br><span class="line">    // 이 페이지가 생성되자마자 60초 후에 쿠키가 생성하고</span><br><span class="line">    // 쿠키 생성여부에 따라</span><br><span class="line">    // 쿠키여부 문구를 출력하고 싶다.</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scal=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>home<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &lt;?php</span><br><span class="line">        if(!isset($_COOKIE[$cookieName])) &#123;</span><br><span class="line">            echo cookieName.&#x27;의 쿠키는 생성되지 않았습니다.&#x27;;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            echo cookieName.&#x27;의 쿠키는 생성되었습니다..&#x27;;</span><br><span class="line">            echo &#x27;생성된 값은&#x27;.$_COOKIE[$cookieName].&#x27;입니다.&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    ?&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="쿠키-삭제-cookie-del-php"><a href="#쿠키-삭제-cookie-del-php" class="headerlink" title="쿠키 삭제 (cookie_del.php)"></a>쿠키 삭제 (cookie_del.php)</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $cookieName = &#x27;city&#x27;;</span><br><span class="line">    $cookieValue = &#x27;seoul&#x27;;</span><br><span class="line"></span><br><span class="line">    setcookie($cookieName, $cookieValue, time()-60, &#x27;/&#x27;);</span><br><span class="line">    // 이 페이지가 생성되자마자 60초 후에 쿠키를 삭제하고</span><br><span class="line">    // 쿠키 생성여부에 따라</span><br><span class="line">    // 쿠키여부 문구를 출력하고 싶다.</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scal=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>home<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &lt;?php</span><br><span class="line">        echo cookieName.&#x27;의 쿠키는 삭제되었습니다..&#x27;;</span><br><span class="line">        echo &#x27;생성된 값은&#x27;.$_COOKIE[$cookieName].&#x27;입니다.&#x27;;</span><br><span class="line">        // 쿠키가 없기 때문에 에러 발생</span><br><span class="line">    ?&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="SESSION-세션"><a href="#SESSION-세션" class="headerlink" title="SESSION (세션)"></a>SESSION (세션)</h2><ul>
<li>브라우저가 해당 사이트에서 벗어난다면 세션이 종료된다.</li>
<li>사이트 접속을 했음에도 불구하고 30분동안 아무것도 하지 않는다면 세션 종료된다.</li>
<li>세션은 최상단에 작성하여야 한다.</li>
<li>서버에 저장되어 있다.</li>
<li>bitnami의 경우 <code>php.ini</code>에서 <code>session.save</code>를 검색하여 SESSION이 저장되는 경로를 알 수 있다.</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    session_start(); // 세션 시작</span><br><span class="line">    $_SESSION[&#x27;city&#x27;] = &#x27;Seoul&#x27;;</span><br><span class="line">    $_SESSION[&#x27;gu&#x27;] = &#x27;Jongro&#x27;;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scal=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>home<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &lt;?php</span><br><span class="line">        echo &#x27;세션이 등록되었습니다.&#x27;;</span><br><span class="line">        if(!isset($_SESSION[&#x27;city&#x27;])) &#123;</span><br><span class="line">            echo &#x27;세션이 등록되어 있지 않습니다.&#x27;;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            echo $_SESSION[&#x27;city&#x27;].&#x27;세션이 등록되어 있습니다.&#x27;;</span><br><span class="line">            print_r($_SESSION); // 모든 세션의 정보를 연관 배열 형태로 출력</span><br><span class="line">        &#125;</span><br><span class="line">    ?&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    session_start(); // 세션 시작</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scal=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>home<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &lt;?php</span><br><span class="line">        session_unset(); // 세션의 모든 변수를 해지한다.</span><br><span class="line">        print_r($SESSION); // 아무것도 출력되지 않음</span><br><span class="line">    ?&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>참고 비교 키워드<br>session_destory 모든 세션을 삭제<br>session_unset 모든 세션을 해지</p>
</blockquote>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://www.youtube.com/watch?v=qvainHwkc38&amp;list=PL-qMANrofLytZY15Agdi7wFc1seGO7Onb&amp;index=9">https://www.youtube.com/watch?v=qvainHwkc38&amp;list=PL-qMANrofLytZY15Agdi7wFc1seGO7Onb&amp;index=9</a></p>
</blockquote>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>cookie</tag>
        <tag>session</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 사용자 입력 데이터 전송방식 get, post</title>
    <url>/2021/08/02/php-get-post/</url>
    <content><![CDATA[<p>PHP 기본 문법에서 사용자 입력 데이터 전송방식에 대해 알아본다.</p>
<a id="more"></a>

<h2 id="사용자-입력-데이터-방식"><a href="#사용자-입력-데이터-방식" class="headerlink" title="사용자 입력 데이터 방식"></a>사용자 입력 데이터 방식</h2><ul>
<li><code>action=&quot;requests.php&quot;</code> : 사용자가 입력한 정보를 requests.php에서 확인한다. (회원가입 시 아이디를 중복체크한다거나, 로그인시 아이디와 비밀번호가 맞는지 체크하는 등)</li>
<li><code>name</code> : DB에서 입력한 값이 들어갈 필드명</li>
</ul>
<h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;requests.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;userName&quot;</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;userEmail&quot;</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;useremail&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userEmail&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;로그인&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="post"><a href="#post" class="headerlink" title="post"></a>post</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;requests.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;userName&quot;</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;userEmail&quot;</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;useremail&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userEmail&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;로그인&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="request"><a href="#request" class="headerlink" title="request"></a>request</h2><h3 id="get-1"><a href="#get-1" class="headerlink" title="get"></a>get</h3><ul>
<li>get 방식으로 넘어온 <code>$_GET</code>은 최상위 수퍼글로벌 배열을 활용할 수 있다.</li>
<li>get 방식은 url에 사용자가 입력한 필드와 값이 그대로 노출된다. (노출되는 길이의 제한이 있다.)</li>
<li>서버에 <code>HTTP</code> 요청을 보내어 캐시에 저장이 되는 방식이다.</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$name</span> = <span class="variable">$_GET</span>[<span class="string">&quot;username&quot;</span>];</span><br><span class="line">    <span class="variable">$email</span> = <span class="variable">$_GET</span>[<span class="string">&quot;useremail&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$name</span>.<span class="string">&#x27;님께서 입력한 이메일은 &#x27;</span>.<span class="variable">$email</span>.<span class="string">&#x27;입니다.&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><em><strong>결과</strong></em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mjae님의 입력한 이메일은 mjae404@gmail.com입니다.</span><br></pre></td></tr></table></figure>


<h3 id="post-1"><a href="#post-1" class="headerlink" title="post"></a>post</h3><ul>
<li>post 방식으로 넘어온 <code>$_POST</code>은 데이터를 별도로 첨부하여 전달하는 방식이다.</li>
<li>post 방식은  url에 사용자가 입력한 필드와 값이 그대로 노출되지 않는다.</li>
<li>캐시에 저장이 되지 않고 히스토리에도 남지 않는다.</li>
<li><code>request.php</code> 쿼리 방식으로 보냈다는 의미이며 사용자가 입력한 것은 별도로 암호화하여 전송한다.</li>
<li>내부적으로 암호화되었기 때문에 데이터 길이에 제한도 없으며 보안성도 뛰어나다.</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$name</span> = <span class="variable">$_POST</span>[<span class="string">&quot;username&quot;</span>];</span><br><span class="line">    <span class="variable">$email</span> = <span class="variable">$_POST</span>[<span class="string">&quot;useremail&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$name</span>.<span class="string">&#x27;님께서 입력한 이메일은 &#x27;</span>.<span class="variable">$email</span>.<span class="string">&#x27;입니다.&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><em><strong>결과</strong></em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mjae님의 입력한 이메일은 mjae404@gmail.com입니다.</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://www.youtube.com/watch?v=rCDuvv4ZZE8&amp;list=PL-qMANrofLytZY15Agdi7wFc1seGO7Onb&amp;index=7">https://www.youtube.com/watch?v=rCDuvv4ZZE8&amp;list=PL-qMANrofLytZY15Agdi7wFc1seGO7Onb&amp;index=7</a></p>
</blockquote>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>get</tag>
        <tag>post</tag>
        <tag>form</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 문서에서 다른 문서 불러오기</title>
    <url>/2021/08/01/php-include-require/</url>
    <content><![CDATA[<p>php 문서에서 다른 문서(ex. 공통문서)를 불러와본다.</p>
<a id="more"></a>

<h2 id="include"><a href="#include" class="headerlink" title="include"></a>include</h2><ul>
<li>특정 조건일 때 지정한 파일이 삽입되도록 처리 가능하다.</li>
<li>삽입 실패시(파일 및 문서가 존재하지 않을 경우) 존재하지 않는다는 문구를 출력하고 계속 파싱한다.</li>
<li>여러 번 출력하고 싶을 경우도 가능하다. (<code>include</code> 여러 번 사용 가능)</li>
</ul>
<p><em><strong>/common/header.php</strong></em></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;ko&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scal=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;<span class="meta">&lt;?=</span> <span class="variable">$title</span>; <span class="meta">?&gt;</span>&lt;/title&gt; <span class="comment">// 변수명 출력</span></span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>

<p><em><strong>index.php</strong></em></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// 변수 선언 전에 include 먼저 선언되거나</span></span><br><span class="line">    <span class="comment">// 선언 자체가 되지 않을 경우 에러 발생</span></span><br><span class="line">    <span class="variable">$title</span> = <span class="string">&#x27;home&#x27;</span>;</span><br><span class="line">    <span class="keyword">include</span>(<span class="string">&#x27;common/header.php&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    ……내용……</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><em><strong>결과</strong></em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scal=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>home<span class="tag">&lt;/<span class="name">title</span>&gt;</span> // 변수명 출력</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    ……내용……</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>안전하게 진행하고 싶을 경우 변수 선언이 되지 않았을 때 빈값을 삽입하도록 하단과 같이 <code>/common/header.php</code>에 if문을 삽입한다.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// !isset($title): 타이틀이 존재하지 않을 때</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$title</span>)) &#123;</span><br><span class="line">       <span class="variable">$title</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;ko&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">   &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scal=1.0&quot;</span>&gt;</span><br><span class="line">   &lt;title&gt;<span class="meta">&lt;?=</span> <span class="variable">$title</span>; <span class="meta">?&gt;</span>&lt;/title&gt; <span class="comment">// 변수명 출력</span></span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="include-once"><a href="#include-once" class="headerlink" title="include_once"></a>include_once</h3><p><code>include</code>와 동일한 기능을 하지만, 여러 번 호출을 하더라도 <code>include</code>와 달리 한번만 불러온다.<br><em><strong>index.php</strong></em></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$title</span> = <span class="string">&#x27;home&#x27;</span>;</span><br><span class="line">    <span class="keyword">include_once</span>(<span class="string">&#x27;common/header.php&#x27;</span>);</span><br><span class="line">    <span class="keyword">include_once</span>(<span class="string">&#x27;common/header.php&#x27;</span>); <span class="comment">// 두 번 호출</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    ……내용……</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><em><strong>결과</strong></em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scal=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>home<span class="tag">&lt;/<span class="name">title</span>&gt;</span> // 변수명 출력</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    ……내용……</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="require"><a href="#require" class="headerlink" title="require"></a>require</h2><ul>
<li>파일을 무조건 삽입해야 할 때 사용해야 한다. (조건을 만족하지 않아도 파일을 삽입한다)</li>
<li>삽입 실패시(파일 및 문서가 존재하지 않을 경우) 존재하지 않는다는 문구를 출력하고 해당 파일을 중지한다.</li>
<li>여러 번 호출할 경우 여러번 선언되었다는 에러가 발생한다.</li>
</ul>
<p><em><strong>/common/functions.php</strong></em></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">increment</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">static</span> <span class="variable">$count</span> =  <span class="number">0</span>; <span class="comment">//정적 변수</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">&#123;$count&#125;</span>&quot;</span>;</span><br><span class="line">    <span class="variable">$count</span>++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>index.php</strong></em></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">require</span>(<span class="string">&#x27;common/functions.php&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    increment(); <span class="comment">// 0</span></span><br><span class="line">    increment(); <span class="comment">// 1</span></span><br><span class="line">    increment(); <span class="comment">// 2</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="require-once"><a href="#require-once" class="headerlink" title="require_once"></a>require_once</h3><p>여러 번 호출되더라도 한 번만 호출한다.</p>
<p><em><strong>index.php</strong></em></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// 오류 발생</span></span><br><span class="line">    <span class="keyword">require</span>(<span class="string">&#x27;common/functions.php&#x27;</span>);</span><br><span class="line">    <span class="keyword">require</span>(<span class="string">&#x27;common/functions.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 오류 미발생</span></span><br><span class="line">    <span class="keyword">require_once</span>(<span class="string">&#x27;common/functions.php&#x27;</span>);</span><br><span class="line">    <span class="keyword">require_once</span>(<span class="string">&#x27;common/functions.php&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    increment(); <span class="comment">// 0</span></span><br><span class="line">    increment(); <span class="comment">// 1</span></span><br><span class="line">    increment(); <span class="comment">// 2</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://www.youtube.com/watch?v=rCDuvv4ZZE8&amp;list=PL-qMANrofLytZY15Agdi7wFc1seGO7Onb&amp;index=5">https://www.youtube.com/watch?v=rCDuvv4ZZE8&amp;list=PL-qMANrofLytZY15Agdi7wFc1seGO7Onb&amp;index=5</a></p>
</blockquote>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>include</tag>
        <tag>require</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 사용자 입력 데이터 전송방식 get, 유효성 검사하기, FILTER INPUT</title>
    <url>/2021/08/02/php-get-validity-check-filter-input/</url>
    <content><![CDATA[<p>PHP 기본 문법에서 사용자 입력 데이터 전송방식, 유효성 검사하기, FILTER-INPUT에 대해 알아본다.</p>
<a id="more"></a>

<h2 id="get-input"><a href="#get-input" class="headerlink" title="get input"></a>get input</h2><ul>
<li><code>$</code> : 수퍼글로벌. 이 서버 어느 페이지에서나 이 변수명으로 선언된 변수는 사용할 수 있다.</li>
<li><code>&amp;</code> : GET 방식으로 넘어가는 데이터 값을 구분하여 넘길 때에는 <code>&amp;</code>을 사용한다.</li>
<li>해킹이나 스크립트에 대한 보안을 위해 특정값(문자, 숫자 등)만 넣도록 할 수 있다.</li>
</ul>
<p><em><strong>URL</strong></em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">localhost&#x2F;2.1&#x2F;index.php?productid&#x3D;10&amp;limit&#x3D;2</span><br></pre></td></tr></table></figure>

<p><em><strong>결과</strong></em></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$product_id</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;productid&#x27;</span>];</span><br><span class="line">    <span class="variable">$limit</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;limit&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?=</span> <span class="variable">$product_id</span>; <span class="meta">?&gt;</span> <span class="comment">// 10</span></span><br><span class="line">showing category: <span class="meta">&lt;?=</span> <span class="variable">$product_id</span>; <span class="meta">?&gt;</span>.Limit<span class="meta">&lt;?=</span> <span class="variable">$limit</span>; <span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">// showing category: 10.Limit 2</span></span><br></pre></td></tr></table></figure>

<h2 id="filter-input"><a href="#filter-input" class="headerlink" title="filter input"></a>filter input</h2><ul>
<li>문자열에만 사용한다.</li>
<li><code>FILTER_VALIDATE_INT</code> : 숫자인지 검사한다. 숫자가 들어왔다면 true, 아니라면 false.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filter_input(들어오는 값의 타입, 변수명, FILTER_option);</span><br></pre></td></tr></table></figure>
<p><em><strong>URL</strong></em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">localhost&#x2F;2.1&#x2F;index.php?productid&#x3D;10&amp;limit&#x3D;2</span><br></pre></td></tr></table></figure>

<p><em><strong>결과</strong></em></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$product_id</span> = filter_input(INPUT_GET, <span class="string">&#x27;productid&#x27;</span>, FILTER_VALIDATE_INT);</span><br><span class="line">    <span class="variable">$limit</span> = filter_input(INPUT_GET, <span class="string">&#x27;limit&#x27;</span>, FILTER_VALIDATE_INT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$product_id</span> == <span class="literal">false</span> || <span class="variable">$limit</span> == <span class="literal">false</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(); <span class="comment">// 멈춤</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$product_id</span> = filter_input(INPUT_GET, <span class="string">&#x27;productid&#x27;</span>, FILTER_VALIDATE_INT);</span><br><span class="line">    <span class="variable">$limit</span> = filter_input(INPUT_GET, <span class="string">&#x27;limit&#x27;</span>, FILTER_VALIDATE_INT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$product_id</span> == <span class="literal">false</span>)&#123;</span><br><span class="line">        <span class="variable">$product_id</span> = <span class="number">10</span>; <span class="comment">// 기본값 설정</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$limit</span> == <span class="literal">false</span>)&#123;</span><br><span class="line">        <span class="variable">$limit</span> = <span class="number">10</span>; <span class="comment">// 기본값 설정</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>참고<br><a href="https://www.php.net/manual/en/book.filter.php">https://www.php.net/manual/en/book.filter.php</a></p>
</blockquote>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://www.youtube.com/watch?v=rCDuvv4ZZE8&amp;list=PL-qMANrofLytZY15Agdi7wFc1seGO7Onb&amp;index=8">https://www.youtube.com/watch?v=rCDuvv4ZZE8&amp;list=PL-qMANrofLytZY15Agdi7wFc1seGO7Onb&amp;index=8</a></p>
</blockquote>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>get</tag>
        <tag>form</tag>
        <tag>validity check</tag>
        <tag>filter input</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP loop로 반복작업 처리하기</title>
    <url>/2021/08/02/php-loop/</url>
    <content><![CDATA[<p>php로 반복작업을 처리해본다.</p>
<a id="more"></a>

<h2 id="loop"><a href="#loop" class="headerlink" title="loop"></a>loop</h2><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while(조건식) &#123;</span><br><span class="line">    조건의 결과 참일 때 반복할 코드</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>while문</strong></em></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="variable">$i</span> &lt; <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> (<span class="variable">$i</span>++).<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><em><strong>결과</strong></em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure>

<h3 id="do-while"><a href="#do-while" class="headerlink" title="do/while"></a>do/while</h3><p>일단 먼저 실행하고 조건식을 확인한다. 조건식이 참일 때까지 반복한다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">do&#123;</span><br><span class="line">    조건의 결과 참일 때 반복할 코드</span><br><span class="line">&#125;while(조건식)</span><br></pre></td></tr></table></figure>

<p><em><strong>do/while문</strong></em></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> (<span class="variable">$i</span>++).<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">while</span>(<span class="variable">$i</span> &lt; <span class="number">5</span>)</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><em><strong>결과</strong></em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure>

<h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for(초기값; 조건식; 증감)&#123;</span><br><span class="line">    조건의 결과 참일 때 반복할 코드</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>for문</strong></em></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">5</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="keyword">echo</span> (<span class="variable">$i</span>++).<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">    &#125;&gt;)</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">5</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">&#123;$i&#125;</span>&lt;br/&gt;&quot;</span>;</span><br><span class="line">    &#125;&gt;)</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><em><strong>결과</strong></em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure>

<h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">foreach(배열명 as 값을 저장할 변수)&#123;</span><br><span class="line">    반복할 코드</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>foreach문</strong></em></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$results</span> = arry(<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$results</span> <span class="keyword">as</span> <span class="variable">$result</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;변수 \$result의 값은 <span class="subst">&#123;$result&#125;</span>입니다. &lt;br/&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">변수 $result 값은 0입니다.</span><br><span class="line">변수 $result 값은 2입니다.</span><br><span class="line">변수 $result 값은 4입니다.</span><br><span class="line">변수 $result 값은 6입니다.</span><br><span class="line">변수 $result 값은 8입니다.</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>$</code> 앞에 <code>\</code>을 입력하면 문자열로 출력한다.</p>
</blockquote>
<h2 id="example"><a href="#example" class="headerlink" title="example"></a>example</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$scores</span> = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;국어&#x27;</span> =&gt; <span class="number">80</span>,</span><br><span class="line">        <span class="string">&#x27;영어&#x27;</span> =&gt; <span class="number">90</span>,</span><br><span class="line">        <span class="string">&#x27;수학&#x27;</span> =&gt; <span class="number">100</span>,</span><br><span class="line">        <span class="string">&#x27;과학&#x27;</span> =&gt; <span class="number">95</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$scores</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$score</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;배열 \$scores에서 과목명 <span class="subst">&#123;$key&#125;</span>의 점수는 <span class="subst">&#123;$score&#125;</span>입니다. &lt;br/&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><em><strong>결과</strong></em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">배열 $scores에서 과목명 국어의 점수는 80입니다.</span><br><span class="line">배열 $scores에서 과목명 영어의 점수는 90입니다.</span><br><span class="line">배열 $scores에서 과목명 수학의 점수는 100입니다.</span><br><span class="line">배열 $scores에서 과목명 과학의 점수는 95입니다.</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://www.youtube.com/watch?v=rCDuvv4ZZE8&amp;list=PL-qMANrofLytZY15Agdi7wFc1seGO7Onb&amp;index=6">https://www.youtube.com/watch?v=rCDuvv4ZZE8&amp;list=PL-qMANrofLytZY15Agdi7wFc1seGO7Onb&amp;index=6</a></p>
</blockquote>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>loop</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 개요</title>
    <url>/2021/07/28/php-overview/</url>
    <content><![CDATA[<p><em><strong>서버 사이드 언어</strong></em></p>
<table>
<thead>
<tr>
<th>언어</th>
<th>운영체제</th>
<th>웹서버</th>
<th>제조사</th>
</tr>
</thead>
<tbody><tr>
<td>PHP</td>
<td>리눅스, 윈도우</td>
<td>Apache 등</td>
<td>오픈소스</td>
</tr>
<tr>
<td>JSP</td>
<td>리눅스, 윈도우</td>
<td>Tomcat, Jeus 등</td>
<td>Oracle</td>
</tr>
<tr>
<td>ASP.NET</td>
<td>윈도우</td>
<td>IIS</td>
<td>Microsoft</td>
</tr>
</tbody></table>
<a id="more"></a>

<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a><a href="https://www.php.net/">PHP</a></h2><h3 id="응답-과정"><a href="#응답-과정" class="headerlink" title="응답 과정"></a>응답 과정</h3><ol>
<li>웹페이지 요청</li>
<li>스크립트 실행 요청</li>
<li>데이터베이스와의 작업</li>
<li>작업처리 결과</li>
<li>웹페이지 응답</li>
</ol>
<h3 id="php로-만들어진-오픈-CMS"><a href="#php로-만들어진-오픈-CMS" class="headerlink" title="php로 만들어진 오픈 CMS"></a>php로 만들어진 오픈 CMS</h3><ol>
<li>xpressengine</li>
<li>그누보드</li>
<li>워드프레스</li>
</ol>
<h3 id="환경설정"><a href="#환경설정" class="headerlink" title="환경설정"></a>환경설정</h3><ol>
<li>apache</li>
<li>php</li>
<li>mysql + phpmyadmin</li>
<li>autoset/bitnami wamp으로 일괄 설치 가능</li>
</ol>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>Rock’s Easyweb<br><a href="https://www.youtube.com/watch?v=GpBVlFL6ZVA&amp;list=PL-qMANrofLytZY15Agdi7wFc1seGO7Onb&amp;index=1">https://www.youtube.com/watch?v=GpBVlFL6ZVA&amp;list=PL-qMANrofLytZY15Agdi7wFc1seGO7Onb&amp;index=1</a></p>
</blockquote>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>overview</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 함수, 지역변수, 정적변수, 전역변수</title>
    <url>/2021/07/30/php-function-variable/</url>
    <content><![CDATA[<p>PHP 기본 문법에서 함수, 지역변수, 정적변수, 전역변수를 확인해본다.</p>
<a id="more"></a>

<h2 id="함수"><a href="#함수" class="headerlink" title="함수"></a>함수</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 함수이름(<span class="params">매개변수<span class="number">1</span>, 매개변수<span class="number">2</span></span>) </span>&#123;</span><br><span class="line">    …할일…</span><br><span class="line">&#125;</span><br><span class="line">함수이름();</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"><span class="variable">$x</span>, <span class="variable">$y</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$result</span> = <span class="variable">$x</span> + <span class="variable">$y</span>; <span class="comment">// local variable 지역변수</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$result</span> = sum (<span class="number">10</span>, <span class="number">20</span>); <span class="comment">// grobal variable 전역변수</span></span><br><span class="line">    <span class="comment">// 전역변수 주석하게 되면 에러가 난다</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$result</span>; <span class="comment">// 30</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="배열"><a href="#배열" class="headerlink" title="배열"></a>배열</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$fruits</span> = [</span><br><span class="line">        <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;mango&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;orange&#x27;</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    print_r(<span class="variable">$fruits</span>);</span><br><span class="line">    <span class="comment">// Array ([0] =&gt; apple [1]=&gt;mango [2]=&gt; banana [3]=&gt;orange)</span></span><br><span class="line">    <span class="comment">// php 내장함수</span></span><br><span class="line">    <span class="comment">// 변수값의 정보를 출력해준다</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">output</span>(<span class="params"><span class="variable">$value</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line">        print_r(<span class="variable">$value</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    output(<span class="variable">$fruits</span>);</span><br><span class="line">    <span class="comment">// Array</span></span><br><span class="line">    <span class="comment">// (</span></span><br><span class="line">    <span class="comment">//     [0] =&gt; apple</span></span><br><span class="line">    <span class="comment">//     [1]=&gt;mango</span></span><br><span class="line">    <span class="comment">//     [2]=&gt; banana</span></span><br><span class="line">    <span class="comment">//     [3]=&gt;orange</span></span><br><span class="line">    <span class="comment">// )</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="지역변수와-전역변수"><a href="#지역변수와-전역변수" class="headerlink" title="지역변수와 전역변수"></a>지역변수와 전역변수</h2><h3 id="지역변수"><a href="#지역변수" class="headerlink" title="지역변수"></a>지역변수</h3><p>지역변수는 함수 외부에서 출력되지 않는다.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myfunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$var</span> = <span class="number">10</span>; <span class="comment">// 지역변수</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">&#123;$var&#125;</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    myfunc();</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">&#123;$var&#125;</span>&quot;</span>; <span class="comment">// 에러발생</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="전역변수"><a href="#전역변수" class="headerlink" title="전역변수"></a>전역변수</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$var</span> = <span class="number">10</span>; <span class="comment">// 전역 변수</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myfunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$var</span>; <span class="comment">// 전역변수</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">&#123;$var&#125;</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    myfunc(); <span class="comment">// 10</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$var</span> = <span class="number">10</span>; <span class="comment">// 전역 변수</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myfunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">&#123;$GLOBALS[&#x27;var&#x27;]&#125;</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    myfunc(); <span class="comment">// 10</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="정적변수"><a href="#정적변수" class="headerlink" title="정적변수"></a>정적변수</h3><p>함수 내부에서 정적 변수를 출력하면 함수 호출이 종료되어도 메모리에 저장되어 출력이 가능하다.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">increment</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">static</span> <span class="variable">$count</span> =  <span class="number">0</span>; <span class="comment">//정적 변수</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">&#123;$count&#125;</span>&quot;</span>;</span><br><span class="line">        <span class="variable">$count</span>++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    increment(); <span class="comment">// 0</span></span><br><span class="line">    increment(); <span class="comment">// 1</span></span><br><span class="line">    increment(); <span class="comment">// 2</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://www.youtube.com/watch?v=qvainHwkc38&amp;list=PL-qMANrofLytZY15Agdi7wFc1seGO7Onb&amp;index=4">https://www.youtube.com/watch?v=qvainHwkc38&amp;list=PL-qMANrofLytZY15Agdi7wFc1seGO7Onb&amp;index=4</a></p>
</blockquote>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>variable</tag>
        <tag>function</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 변수 및 에러 확인</title>
    <url>/2021/07/28/php-variable-and-error/</url>
    <content><![CDATA[<p>PHP 기본 문법에서 변수 및 에러를 확인해본다.</p>
<a id="more"></a>

<h2 id="php-정보-확인"><a href="#php-정보-확인" class="headerlink" title="php 정보 확인"></a>php 정보 확인</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    phpinfo();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="기본-문법"><a href="#기본-문법" class="headerlink" title="기본 문법"></a>기본 문법</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="comment">// 기본적으로 <span class="meta">&lt;?php</span>로 시작하여</span></span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;hello world&#x27;</span> <span class="comment">// &#x27;&#x27; 안/PHP 문법 밖에 태그 사용 가능</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    여러 문장 주석 처리</span></span><br><span class="line"><span class="comment">    가능합니다</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">#한줄 주석</span></span><br><span class="line"><span class="meta">?&gt;</span> <span class="comment">// <span class="meta">?&gt;</span> 으로 닫힙니다</span></span><br></pre></td></tr></table></figure>

<h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><p>문자열 기본 출력 함수.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="PHP-변수"><a href="#PHP-변수" class="headerlink" title="PHP 변수"></a>PHP 변수</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="variable">$name</span> = <span class="string">&quot;mjae&quot;</span>; <span class="comment">// $로 변수를 선언합니다</span></span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;반갑습니다. &#x27;</span>.<span class="variable">$name</span>; <span class="comment">// 작은따옴표의 경우 .으로 문자열을 연결합니다</span></span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;반갑습니다. <span class="subst">$name</span>&quot;</span>; <span class="comment">// 큰따옴표의 경우 안에 변수가 들어올 수 있습니다</span></span><br><span class="line">   <span class="comment">// 반갑습니다. mjae</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;반갑습니다. $name&#x27;</span>; <span class="comment">// 반갑습니다. $name</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="에러-확인하고-싶을-경우"><a href="#에러-확인하고-싶을-경우" class="headerlink" title="에러 확인하고 싶을 경우"></a>에러 확인하고 싶을 경우</h2><p><em><strong>에러발생</strong></em></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;반갑습니다. $name</span></span><br><span class="line"><span class="string">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>보통 php 파일은 에러가 나면 어디서 에러가 났는지 알려주지 않는다. 그렇기 때문에 파일에서 확인하고 싶은 경우 따로 설정을 해주어야 한다. (물론 visual studio에서도 따로 에러 확인을 할 수는 있다.)</p>
<ol>
<li><code>C:\Bitnami\wampstack-8.0.8-0\apache2\php\php.ini</code>을 연다.</li>
<li><code>display_errors</code>를 검색한다.</li>
<li><code>display_errors = on</code>으로 설정을 변경한다.</li>
<li><code>Bitnami WAMP Stack</code>에서 웹서버를 리부팅한다.</li>
<li>다시 <code>localhost</code>를 확인하면 에러가 어디서 발생했는지 확인할 수 있다.</li>
</ol>
<blockquote>
<p>다 작업을 했을 경우 다시 설정을 off로 해두는 것이 좋다.</p>
</blockquote>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>Rock’s Easyweb<br><a href="https://www.youtube.com/watch?v=Wv6haVSf6vw&amp;list=PL-qMANrofLytZY15Agdi7wFc1seGO7Onb&amp;index=2">https://www.youtube.com/watch?v=Wv6haVSf6vw&amp;list=PL-qMANrofLytZY15Agdi7wFc1seGO7Onb&amp;index=2</a></p>
</blockquote>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>variable</tag>
        <tag>php</tag>
        <tag>error</tag>
      </tags>
  </entry>
  <entry>
    <title>PYTHON 추상화</title>
    <url>/2021/12/19/python-abstraction/</url>
    <content><![CDATA[<p><strong>추상화 (Abstraction)</strong><br>복잡한 세부 사항은 숨기면서 주요한 기능에만 집중할 수  있게 해주는 개념이다.</p>
<ul>
<li>변수 (Variable): 값을 저장</li>
<li>함수 (Function): 명령을 저장</li>
<li>객체 (Class)</li>
</ul>
<a id="more"></a>

<h2 id="변수"><a href="#변수" class="headerlink" title="변수"></a>변수</h2><p>변수가 추상화인 이유는 한번 변수를 정의하고 나면 세부적인 값은 알 필요가 없이 이름만 알면 되기 때문이다.</p>
<p><em>지정 연산자 (Assignment Operator)</em></p>
<p><code>=</code>는 수학적으로는 값이 같다는 의미이지만, Python에서는 <strong>오른쪽에 있는 값을 왼쪽에 있는 변수에 지정해주는 역할</strong> 을 해준다.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">2</span> + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(x) <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line">x = x + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(x) <span class="comment"># 4</span></span><br></pre></td></tr></table></figure>

<h2 id="함수"><a href="#함수" class="headerlink" title="함수"></a>함수</h2><ul>
<li><strong>내장함수(Built-in Function)</strong>: print, int, str 등 이미 만들어진 함수이다.</li>
<li>`def은 define(정의)라는 줄임말로 함수의 정의를 시작한다는 의미이다.</li>
<li><code>:</code>는 HEADER 부분이다.</li>
<li><code>:</code> 뒤로 오는 내용은 BODY이며 들여쓰기를 해줘야 한다.</li>
<li>처음으로 들여쓰기가 된 곳이 BODY의 시작이다.</li>
<li>처음으로 들여쓰기가 되지 않는 곳이 BODY의 끝이다.</li>
</ul>
<p><em>기본 구조</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 함수이름(<span class="params">파라미터</span>):</span></span><br><span class="line">    실행할 문장 <span class="number">1</span></span><br><span class="line">    실행할 문장 <span class="number">2</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello, world!&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Welcome to Python&quot;</span>)</span><br><span class="line"></span><br><span class="line">hello()</span><br><span class="line"><span class="comment"># Hello, world!</span></span><br><span class="line"><span class="comment"># Welcome to Python</span></span><br></pre></td></tr></table></figure>

<h2 id="파라미터"><a href="#파라미터" class="headerlink" title="파라미터"></a>파라미터</h2><p>언제 어떻게 쓰든 똑같은 것이 나오는 것이 아니라 매번 다른 것을 넣어 함수가 출력되게 하고 싶을 때, 함수에게 정보를 주어야 한다. 정보를 주는 방법중 하나가 파라미터(Parameter)이다.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>(<span class="params">name</span>):</span> <span class="comment"># name이 파라미터</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello, %s!&quot;</span> % (name))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Welcome to Python&quot;</span>)</span><br><span class="line"></span><br><span class="line">hello(<span class="string">&quot;JUDY&quot;</span>)</span><br><span class="line"><span class="comment"># Hello, JUDY!</span></span><br><span class="line"><span class="comment"># Welcome to Python</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_sum</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    pirnt(a + b)</span><br><span class="line"></span><br><span class="line">print_sum(<span class="number">4</span>, <span class="number">2</span>) <span class="comment"># 6</span></span><br></pre></td></tr></table></figure>

<h2 id="들여쓰기"><a href="#들여쓰기" class="headerlink" title="들여쓰기"></a>들여쓰기</h2><ul>
<li>블록: 들여쓰기 정도가 같은 명령들의 집합</li>
<li>들여쓰기의 단계에 따라 논리의 층위가 나뉜다.</li>
<li>들여쓰기를 잘못 진행하면 오류가 발생한다.</li>
<li>들여쓰기를 진행할 때 일반적으로  <code>Tab</code>키나 공백 4칸을 사용한다.</li>
</ul>
<h2 id="Syntactic-Sugar"><a href="#Syntactic-Sugar" class="headerlink" title="Syntactic Sugar"></a>Syntactic Sugar</h2><p>자주 쓰이는 표현을 더 간략하게 쓸 수 있게 해주는 문법. <code>+=</code>, <code>*=</code>, <code>-=</code>, <code>/=</code>, <code>%=</code>가 있다.</p>
<h2 id="Optional-Parameters"><a href="#Optional-Parameters" class="headerlink" title="Optional Parameters"></a>Optional Parameters</h2><p>파라미터에 기본값을 설정해주면 해당 파라미터에 값을 넘겨주지 않아도 기본값이 출력된다. 단, Optional Parameter는 모두 마지막에 위치하여야 한다.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myself</span>(<span class="params">name, nationality = <span class="string">&quot;한국&quot;</span></span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;내 이름은 %s&quot;</span> % name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;국적은 %s&quot;</span>% nationality)</span><br><span class="line"></span><br><span class="line">myself(<span class="string">&quot;Python&quot;</span>) <span class="comment"># 기본값이 설정된 파라미터를 변경하지 않음</span></span><br><span class="line"><span class="comment"># 내 이름은 Python</span></span><br><span class="line"><span class="comment"># 국적은 한국</span></span><br></pre></td></tr></table></figure>

<h2 id="return문"><a href="#return문" class="headerlink" title="return문"></a>return문</h2><ol>
<li>함수 호출 부분을 return을 따르는 값으로 대체한다.</li>
<li>현재 실행중인 함수를 멈추고 호출이 끝나는 지점부터 다시 실행한다.</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">X</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x + <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;f 끝&quot;</span>) <span class="comment"># 실행되지 않는다. Dead Code.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">g</span>(<span class="params">x</span>):</span></span><br><span class="line">    rueturn x * x - <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;g 끝&quot;</span>) <span class="comment"># Dead Code</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">2</span>)) <span class="comment"># = print(3)</span></span><br><span class="line"><span class="built_in">print</span>(g(<span class="number">3</span>)) <span class="comment"># = print(8)</span></span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">2</span>) + g(<span class="number">3</span>)) <span class="comment"># = print(3+8)</span></span><br></pre></td></tr></table></figure>

<h2 id="return과-print의-차이"><a href="#return과-print의-차이" class="headerlink" title="return과 print의 차이"></a>return과 print의 차이</h2><ul>
<li>return은 출력하지 않는다.</li>
<li>return을 따로 해주지 않으면 None이 출력된다.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_square</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(x * x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_square</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line">print_square(<span class="number">3</span>) <span class="comment"># 9출력</span></span><br><span class="line">get_square(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># get_square(3)을 9로 대체할 뿐, 출력하지 않는다</span></span><br><span class="line"><span class="built_in">print</span>(get_square(<span class="number">3</span>)) <span class="comment"># 9 출력</span></span><br><span class="line"><span class="built_in">print</span>(print_square(<span class="number">3</span>)) <span class="comment"># None</span></span><br><span class="line"><span class="comment"># 코드 내에 return이 없으므로 return값으로 None이 설정된다</span></span><br></pre></td></tr></table></figure>

<h2 id="global-변수와-local-변수"><a href="#global-변수와-local-변수" class="headerlink" title="global 변수와 local 변수"></a>global 변수와 local 변수</h2><ul>
<li><strong>local 변수</strong>: 함수 내에 정의된 변수. 한 부분에서만 유효하고 그 부분을 벗어나면 사용하지 못한다.</li>
<li><strong>global 변수</strong>: 함수 바깥에서 정의한 변수. 모든 범위에서 사용할 수 있다.</li>
<li>하나의 변수를 다른 여러 함수 안에서 사용하고 싶다면 함수 내부에서 <code>global 변수명</code>으로 지정하여 global 변수로 사용할 수 있다.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">x_is_one</span>():</span></span><br><span class="line">    <span class="keyword">global</span> x <span class="comment"># 글로벌 변수로 설정</span></span><br><span class="line">    x = <span class="number">1</span> <span class="comment"># local 변수</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">5</span> <span class="comment"># global 변수</span></span><br><span class="line">x_is_one()</span><br><span class="line"><span class="built_in">print</span>(x) <span class="comment"># 5</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="상수-Constant"><a href="#상수-Constant" class="headerlink" title="상수 (Constant)"></a>상수 (Constant)</h2><p>처음부터 끝까지 변하지 않는 값. 이름은 대문자로 기재하여야 한다. 새로 할당한다고 해도 오류가 나지 않지만 상수는 처음 설정하고 나서 변경하지 않는 것이 좋다.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">PI = <span class="number">3.14</span></span><br><span class="line"><span class="built_in">print</span>(PI) <span class="comment"># 3.14</span></span><br><span class="line">PI = <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(PI) <span class="comment"># 0</span></span><br></pre></td></tr></table></figure>


<h2 id="스타일"><a href="#스타일" class="headerlink" title="스타일"></a>스타일</h2><p>올바르게 작동한다고 해도 간결하고 예쁘게 쓰는 것이 좋다.</p>
<h3 id="이름-규칙"><a href="#이름-규칙" class="headerlink" title="이름 규칙"></a>이름 규칙</h3><ol>
<li>모든 변수와 함수 이름은 소문자로 기재하고 단어가 여러개인 경우 <code>_</code>로 나눈다.</li>
<li>모든 상수 이름은 대문자로 기재하고 단어가 여러개인 경우 <code>_</code>로 나눈다.</li>
<li>의미있는 변수 및 함수 이름을 사용한다.</li>
<li>적당한 화이트 스페이스는 가독성을 높인다.</li>
<li>적당한 추상화 및 주석(코멘트)를 사용한다.</li>
<li>한 줄에 80자를 넘기지 않는 것이 좋다.</li>
</ol>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>코드잇 온라인 강의 프로그래밍 기초</p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>data type</tag>
      </tags>
  </entry>
  <entry>
    <title>PYTHON 제어문</title>
    <url>/2021/12/22/python-control-flow-statement/</url>
    <content><![CDATA[<p>제어문을 활용하면 조건에 따라 동작을 나눌 수 있다. 그리고 반복문을 활용하면 우리가 하나하나 힘겹게 하던 일들을 컴퓨터에게 자동으로 반복시킬 수 있다. 반복문은 원하는 명령들을 한번만 기재하고 반복적으로 실행 가능한 문이다. PYTHON에는 while 반복문과 for 반복문이 있다.</p>
<a id="more"></a>

<h2 id="while문"><a href="#while문" class="headerlink" title="while문"></a>while문</h2><p>결과값이 false가 나올 때까지 조건부분을 반복수행한다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while 조건부분(결과값이 불리언 값으로 나오는 식):</span><br><span class="line">    수행부분(반복적으로 실행하고 싶은 명령들)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i=&lt;<span class="number">3</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I can code too!&quot;</span>)</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    <span class="comment"># I can code too!를 3번 반복한다</span></span><br></pre></td></tr></table></figure>

<h2 id="if문"><a href="#if문" class="headerlink" title="if문"></a>if문</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if 조건부분(결과값이 불리언 값으로 나오는 식):</span><br><span class="line">    수행부분(조건이 True일 때 실행하고 싶은 명령들)</span><br><span class="line">else:</span><br><span class="line">    수행부분(조건이 False일 때 실행하고 싶은 명령들)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">temperature = <span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> temperautre &lt;= <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;자켓을 입는다.&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    pirnt(<span class="string">&quot;자켓을 입지 않는다&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 자켓을 입지 않는다</span></span><br></pre></td></tr></table></figure>

<h2 id="elif문"><a href="#elif문" class="headerlink" title="elif문"></a>elif문</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if 조건부분(결과값이 불리언 값으로 나오는 식):</span><br><span class="line">    수행부분(첫번째 조건이 True일 때 실행하고 싶은 명령들)</span><br><span class="line">elif 조건부분(결과값이 불리언 값으로 나오는 식):</span><br><span class="line">    수행부분(첫번째 조건은 False, 두번째 조건이 True일 때 실행하고 싶은 명령들)</span><br><span class="line">else:</span><br><span class="line">    수행부분(조건이 모두 False일 때 실행하고 싶은 명령들)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">5</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a &lt; b:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a는 b보다 작습니다.&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> a == b:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a와 b는 같습니다.&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a는 b보다 큽니다.&quot;</span>)<span class="string">&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># a는 b보다 큽니다.</span></span><br></pre></td></tr></table></figure>

<h2 id="for문"><a href="#for문" class="headerlink" title="for문"></a>for문</h2><p>for문은 while문과 달리 인덱싱을 위한 i 변수가 필요 없다. 변수의 이름은 임의로 정할 수 있으며, 의미 있는 이름을 정해주는 것이 좋다. 프로그래밍 언어에서 동일한 기능을 깔끔하게 만들어 놓은 것을 ‘syntactic sugar’(꿀)라고 부른다.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> 변수 <span class="keyword">in</span> 리스트/<span class="built_in">range</span>/문자열:</span><br><span class="line">    &lt;첫번째 실행할 줄&gt;</span><br><span class="line">    &lt;두번째 실행할 줄&gt;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<h3 id="range-함수"><a href="#range-함수" class="headerlink" title="range 함수"></a>range 함수</h3><p>간편하며 깔끔하다. 리스트를 만들지 않아도 동일한 효과를 낼 수 있다. 또한 메모리가 효율적이다.</p>
<p><em><strong>파라미터가 2개 있는 range 함수</strong></em></p>
<p>range(n, m)은 n부터 m - 1까지의 수들을 의미한다.</p>
<p><em><strong>파라미터가 1개 있는 range 함수</strong></em></p>
<p>range(m)은 0부터 m - 1까지의 수들을 의미한다.</p>
<p><em><strong>파라미터가 3개 있는 range 함수</strong></em><br>range(n, m, s)은 n부터 m - 1까지의 수 중 간격이 s인 수들을 의미한다.</p>
<h2 id="break문"><a href="#break문" class="headerlink" title="break문"></a>break문</h2><p>만약 while문의 조건부분과 상관 없이 반복문에서 나오고 싶으면 break문을 사용한다.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">100</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># i가 23의 배수면 반복문을 끝냄</span></span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">23</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>

<h2 id="continue문"><a href="#continue문" class="headerlink" title="continue문"></a>continue문</h2><p>만약 현재 진행되고 있는 수행부분을 중단시키고 바로 조건부분을 다시 확인하고 싶으면 continue문을 사용한다.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">15</span>:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># i가 홀수면 print(i) 안하고 바로 조건부분으로 돌아감</span></span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>코드잇 온라인 강의 프로그래밍 기초</p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>control flow</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>PYTHON 거스름돈 계산기</title>
    <url>/2021/12/29/python-exercise001/</url>
    <content><![CDATA[<p>현명하게 거스름돈을 계산해주는 프로그램을 만드려고 합니다. 예를 들어 33,000원짜리 물건을 사기 위해 100,000원을 냈다면, 50,000원 1장, 10,000원 1장, 5,000원 1장, 1,000원 2장과 같이 ‘가장 적은 수’의 지폐를 거슬러 주는 방식입니다.</p>
<a id="more"></a>

<p>payment(지불한 금액)와 cost(가격)라는 파라미터 두개를 필요로 하는 함수 calculate_change를 쓰세요. 이 함수는 거스름돈을 위해 50,000원짜리와 10,000원짜리, 5,000원짜리, 1,000원짜리가 각각 몇 장 필요한지 출력해주는 역할을 합니다.</p>
<p>payment, cost 파라미터의 값은 1,000의 배수라고 가정합시다.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_change</span>(<span class="params">payment, cost</span>):</span></span><br><span class="line">    <span class="comment"># 코드를 작성하세요.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 테스트</span></span><br><span class="line">calculate_change(<span class="number">100000</span>, <span class="number">33000</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">calculate_change(<span class="number">500000</span>, <span class="number">378000</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">50000</span>원 지폐: <span class="number">1</span>장</span><br><span class="line"><span class="number">10000</span>원 지폐: <span class="number">1</span>장</span><br><span class="line"><span class="number">5000</span>원 지폐: <span class="number">1</span>장</span><br><span class="line"><span class="number">1000</span>원 지폐: <span class="number">2</span>장</span><br><span class="line"></span><br><span class="line"><span class="number">50000</span>원 지폐: <span class="number">2</span>장</span><br><span class="line"><span class="number">10000</span>원 지폐: <span class="number">2</span>장</span><br><span class="line"><span class="number">5000</span>원 지폐: <span class="number">0</span>장</span><br><span class="line"><span class="number">1000</span>원 지폐: <span class="number">2</span>장</span><br></pre></td></tr></table></figure>

<p><em>개인 풀이</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_change</span>(<span class="params">payment, cost</span>):</span></span><br><span class="line">    <span class="comment"># 코드를 작성하세요.</span></span><br><span class="line">    change = payment - cost</span><br><span class="line">    fifty_thousand_count = <span class="built_in">int</span>(change / <span class="number">50000</span>)</span><br><span class="line"></span><br><span class="line">    change = change % <span class="number">50000</span></span><br><span class="line">    ten_thousand_count = <span class="built_in">int</span>(change / <span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line">    change = change % <span class="number">10000</span></span><br><span class="line">    five_thousand_count = <span class="built_in">int</span>(change / <span class="number">5000</span>)</span><br><span class="line"></span><br><span class="line">    change = change % <span class="number">5000</span></span><br><span class="line">    one_thousand_count = <span class="built_in">int</span>(change / <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;50000원 지폐:&quot;</span> + <span class="built_in">str</span>(fifty_thousand_count) + <span class="string">&quot;장&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;10000원 지폐:&quot;</span> + <span class="built_in">str</span>(ten_thousand_count) + <span class="string">&quot;장&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;5000원 지폐:&quot;</span> + <span class="built_in">str</span>(five_thousand_count) + <span class="string">&quot;장&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;1000원 지폐:&quot;</span> + <span class="built_in">str</span>(one_thousand_count) + <span class="string">&quot;장&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 테스트</span></span><br><span class="line">calculate_change(<span class="number">100000</span>, <span class="number">33000</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">calculate_change(<span class="number">500000</span>, <span class="number">378000</span>)</span><br></pre></td></tr></table></figure>

<p><em>다른 풀이</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_change</span>(<span class="params">payment, cost</span>):</span></span><br><span class="line">    <span class="comment"># 코드를 작성하세요.</span></span><br><span class="line">    change = payment - cost</span><br><span class="line">    fifty_thousand_count = <span class="built_in">int</span>(change / <span class="number">50000</span>)</span><br><span class="line"></span><br><span class="line">    change = change % <span class="number">50000</span></span><br><span class="line">    ten_thousand_count = <span class="built_in">int</span>(change / <span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line">    change = change % <span class="number">10000</span></span><br><span class="line">    five_thousand_count = <span class="built_in">int</span>(change / <span class="number">5000</span>)</span><br><span class="line"></span><br><span class="line">    change = change % <span class="number">5000</span></span><br><span class="line">    one_thousand_count = <span class="built_in">int</span>(change / <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;50000원 지폐: %d장&quot;</span> % (fifty_thousand_count))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;10000원 지폐: %d장&quot;</span> % (ten_thousand_count))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;5000원 지폐: %d장&quot;</span> % (five_thousand_count))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;1000원 지폐: %d장&quot;</span> % (one_thousand_count))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 테스트</span></span><br><span class="line">calculate_change(<span class="number">100000</span>, <span class="number">33000</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">calculate_change(<span class="number">500000</span>, <span class="number">378000</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>코드잇 온라인 강의 프로그래밍 기초</p>
</blockquote>
]]></content>
      <categories>
        <category>exercise</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>exercise</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>PYTHON 데이터 타입</title>
    <url>/2021/12/19/python-datatype/</url>
    <content><![CDATA[<p>자료형에는 숫자(Number), 문자(String), 불린(Boolean)이 있다.</p>
<ul>
<li>숫자: 정수(Integer), 소수(Floating Point)</li>
<li>문자: “Hello” + “World” → “HelloWorld”</li>
<li>불린: True, False</li>
</ul>
<a id="more"></a>

<h2 id="숫자형"><a href="#숫자형" class="headerlink" title="숫자형"></a>숫자형</h2><ul>
<li>기본적인 사칙연산 순서를 따른다.</li>
<li>정수형과 정수형간의 연산은 결과값으로 정수형이 나온다.</li>
<li>소수형과 소수형간의 연산, 소수형과 정수형간의 연산은 모두 결과값으로 소수형이 나온다.</li>
<li>나눗셈은 어떤 연산이든 모두 결과값이 소수형으로 나온다.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 덧셈</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">4</span> + <span class="number">7</span>) <span class="comment"># 11</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 뺄셈</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">4</span> - <span class="number">7</span>) <span class="comment"># -3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 곱셈</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">4</span> * <span class="number">7</span>) <span class="comment"># 28</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 나머지</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">7</span> % <span class="number">3</span>) <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 거듭제곱</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span>** <span class="number">3</span>) <span class="comment"># 2의 3승이기 때문에 8</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>연산자</th>
<th>의미</th>
</tr>
</thead>
<tbody><tr>
<td><code>+</code></td>
<td>덧셈 (addition)</td>
</tr>
<tr>
<td><code>-</code></td>
<td>뺄셈 (subtraction)</td>
</tr>
<tr>
<td><code>*</code></td>
<td>곱셈 (multiplication)</td>
</tr>
<tr>
<td><code>/</code></td>
<td>나눗셈 (division)</td>
</tr>
<tr>
<td><code>%</code></td>
<td>나머지 (modulo)</td>
</tr>
<tr>
<td><code>**</code></td>
<td>거듭제곱 (exponentiation)</td>
</tr>
</tbody></table>
<h2 id="문자열"><a href="#문자열" class="headerlink" title="문자열"></a>문자열</h2><ul>
<li><code>&quot;</code>, <code>&#39;</code>으로 원하는 문자열을 감싼다. (작은 따옴표, 큰따옴표 모두 사용 가능)</li>
<li>같은 인용부호로 시작하고 끝나야 한다.</li>
<li>문자열 내에 인용부호가 들어가 있다면 서로 다른 인용부호를 사용하여야 한다.</li>
<li><code>+</code>는 문자열에서 좌, 우의 문자열을 <strong>이어 연결하라</strong> 라는 의미이다.</li>
<li><code>*</code>는 문자열에서 좌항의 문자열을 <strong>우항의 숫자만큼 반복하라</strong> 는 의미이다.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 문자열 연결 (String Concatenation)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello&quot;</span> + <span class="string">&#x27;World&#x27;</span>) <span class="comment"># HelloWorld</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello&quot;</span> * <span class="number">3</span>) <span class="comment"># HelloHelloHello</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;2&quot;</span> + <span class="string">&quot;5&quot;</span>) <span class="comment"># 25</span></span><br></pre></td></tr></table></figure>


<h2 id="형변환-Type-Casting-Type-Conversion"><a href="#형변환-Type-Casting-Type-Conversion" class="headerlink" title="형변환 (Type Casting / Type Conversion)"></a>형변환 (Type Casting / Type Conversion)</h2><ul>
<li>int: ineger(정수)</li>
<li>float: floating point(소수)</li>
<li>str: string (문자열)</li>
<li>파이썬에서는 숫자와 문자열을 합칠 수 없기 때문에 형변환후에 연결해야 한다.</li>
<li>숫자로 변경할 수 없는 문자열의 경우 숫자형으로 형변환을 진행해도 오류가 발생한다.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#숫자형 → 숫자형</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="number">3.8</span>)) <span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(<span class="number">3</span>) <span class="comment"># 3.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#문자열 → 숫자형</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="string">&quot;2&quot;</span>) + <span class="built_in">int</span>(<span class="string">&quot;5&quot;</span>)) <span class="comment"># print(2+5)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(<span class="string">&quot;1.1&quot;</span> + <span class="built_in">float</span>(<span class="string">&quot;2.5&quot;</span>))) <span class="comment"># print(1.1+2.5)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="string">&quot;Hellow World&quot;</span>)) <span class="comment"># ValueError</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 숫자형 → 문자열</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(<span class="number">2</span>) + <span class="built_in">str</span>(<span class="number">5</span>)) <span class="comment"># print (&quot;2&quot; + &quot;5&quot;)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;제 나이는 &quot;</span> + <span class="number">10</span> + <span class="string">&quot;살입니다.&quot;</span>) <span class="comment"># TypeError</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;제 나이는 &quot;</span> + <span class="built_in">str</span>(<span class="number">10</span>) + <span class="string">&quot;살입니다.&quot;</span>) <span class="comment"># 제 나이는 10살입니다.</span></span><br></pre></td></tr></table></figure>

<h2 id="문자열-포맷팅"><a href="#문자열-포맷팅" class="headerlink" title="문자열 포맷팅"></a>문자열 포맷팅</h2><h3 id="문자열-포맷-코드"><a href="#문자열-포맷-코드" class="headerlink" title="문자열 포맷 코드"></a>문자열 포맷 코드</h3><table>
<thead>
<tr>
<th>코드</th>
<th>자료형</th>
</tr>
</thead>
<tbody><tr>
<td><code>%d</code></td>
<td>정수(Integer), 10진 정수의 약자</td>
</tr>
<tr>
<td><code>%f</code></td>
<td>소수(Floating point), %.숫자f를 할 경우 해당 숫자 자리까지 출력</td>
</tr>
<tr>
<td><code>%s</code></td>
<td>문자열(String), string의 약자</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">year = <span class="number">2016</span></span><br><span class="line">month = <span class="number">1</span></span><br><span class="line">day = <span class="number">16</span></span><br><span class="line">day_of_week = <span class="string">&quot;일&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;오늘은 &quot;</span> + <span class="built_in">str</span>(year) + <span class="string">&quot;년 &quot;</span> + <span class="built_in">str</span>(month) + <span class="string">&quot;월 &quot;</span> +</span><br><span class="line"><span class="built_in">str</span>(day) <span class="string">&quot;일 &quot;</span> + day_of_weak + <span class="string">&quot;요일입니다.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;오늘은 %d년 %d월 %d일 %s요일입니다.&quot;</span> % (year, month, day, day_of_week))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;오늘은 %d년 %d월 %d일 %s요일입니다.&quot;</span> % (year, month, day+<span class="number">1</span>, <span class="string">&quot;월&quot;</span>))</span><br></pre></td></tr></table></figure>


<h2 id="불린"><a href="#불린" class="headerlink" title="불린"></a>불린</h2><ul>
<li>명제: 참 또는 거짓이 확실한 문장</li>
<li>불린을 사용할 시에는 인용부호를 제외하고 사용하여야 한다.</li>
</ul>
<p><em>AND 연산자</em></p>
<table>
<thead>
<tr>
<th>x</th>
<th>y</th>
<th>x AND y</th>
</tr>
</thead>
<tbody><tr>
<td>True</td>
<td>True</td>
<td>True</td>
</tr>
<tr>
<td>True</td>
<td>False</td>
<td>False</td>
</tr>
<tr>
<td>False</td>
<td>True</td>
<td>False</td>
</tr>
<tr>
<td>False</td>
<td>False</td>
<td>False</td>
</tr>
</tbody></table>
<p><em>OR 연산자</em></p>
<table>
<thead>
<tr>
<th>x</th>
<th>y</th>
<th>x OR y</th>
</tr>
</thead>
<tbody><tr>
<td>True</td>
<td>True</td>
<td>True</td>
</tr>
<tr>
<td>True</td>
<td>False</td>
<td>True</td>
</tr>
<tr>
<td>False</td>
<td>True</td>
<td>True</td>
</tr>
<tr>
<td>False</td>
<td>False</td>
<td>False</td>
</tr>
</tbody></table>
<p><em>NOT 연산자</em></p>
<table>
<thead>
<tr>
<th>x</th>
<th>NOT x</th>
</tr>
</thead>
<tbody><tr>
<td>True</td>
<td>False</td>
</tr>
<tr>
<td>False</td>
<td>True</td>
</tr>
</tbody></table>
<p><em>조건 연산 부호(conditional operator)</em></p>
<table>
<thead>
<tr>
<th>연산자</th>
<th>뜻</th>
</tr>
</thead>
<tbody><tr>
<td><code>&gt;</code></td>
<td>초과 (greater than)</td>
</tr>
<tr>
<td><code>&lt;</code></td>
<td>미만 (less than)</td>
</tr>
<tr>
<td><code>&gt;=</code></td>
<td>이상 (greater than or equal to)</td>
</tr>
<tr>
<td><code>&lt;=</code></td>
<td>이하 (less than or equal to)</td>
</tr>
<tr>
<td><code>==</code></td>
<td>같다 (equal to)</td>
</tr>
<tr>
<td><code>!=</code></td>
<td>같지 않다 (not equal to)</td>
</tr>
</tbody></table>
<h2 id="type-함수"><a href="#type-함수" class="headerlink" title="type 함수"></a>type 함수</h2><p>어떤 자료형인지 알고 싶을 때 <code>type</code> 함수를 사용한다.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">1</span>)) <span class="comment"># &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">1.0</span>)) <span class="comment"># &lt;class &#x27;float&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="string">&quot;1&quot;</span>)) <span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">print</span>))</span><br><span class="line"><span class="comment"># &lt;class &#x27;builtin_function_or_method&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="floor-division"><a href="#floor-division" class="headerlink" title="floor division"></a>floor division</h2><p><code>//</code> 연산자는  나눗셈 연산 후 결과값을 내림한다.  소수형이 있을 경우 결과값이 소수형으로 나온다.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">3</span> / <span class="number">2</span>) <span class="comment"># 1.5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="number">3</span> / <span class="number">2</span>)) <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span> // <span class="number">2</span>) <span class="comment"># 1</span></span><br></pre></td></tr></table></figure>


<h2 id="반올림"><a href="#반올림" class="headerlink" title="반올림"></a>반올림</h2><p><code>round</code>는 소수형을 반올림해준다.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">round</span>(<span class="number">1.421</span>, <span class="number">1</span>)) <span class="comment"># 1.4</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">round</span>(<span class="number">2.7862</span>, <span class="number">2</span>))  <span class="comment"># 2.79</span></span><br></pre></td></tr></table></figure>


<h2 id="줄바꿈-기호-Newline-Character"><a href="#줄바꿈-기호-Newline-Character" class="headerlink" title="줄바꿈 기호 (Newline Character)"></a>줄바꿈 기호 (Newline Character)</h2><p>문자열 내에 <code>\n</code> 기호는 줄을 바꾸어주는 엔터키와 동일한 역할이다.</p>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>코드잇 온라인 강의 프로그래밍 기초</p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>data type</tag>
      </tags>
  </entry>
  <entry>
    <title>PYTHON 학점 계산기</title>
    <url>/2021/12/31/python-exercise003/</url>
    <content><![CDATA[<p>성적표를 기다리는 학생들을 위해서 학점 계산기를 만들어보세요.</p>
<a id="more"></a>

<p>절대 평가 방식으로 총 점수가 90점 이상이면 A를, 80점 이상 90점 미만이면 B를, 70점 이상 80점 미만이면 C를, 60점 이상 70점 미만이면 D를, 60점 미만이면 F를 부과하는 수업입니다.</p>
<p>성적이 A일 경우 “You get an A”를, B일 경우 “You get a B”를, C일 경우 “You get a C”를, D일 경우 “You get a D”를, F일 경우 “You fail”을 출력하는 함수를 쓰세요.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_grade</span>(<span class="params">midterm, final</span>):</span></span><br><span class="line">    total = midterm + final</span><br><span class="line">    <span class="comment"># 코드를 쓰세요.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 테스트</span></span><br><span class="line">print_grade(<span class="number">40</span>, <span class="number">45</span>)</span><br><span class="line">print_grade(<span class="number">20</span>, <span class="number">35</span>)</span><br><span class="line">print_grade(<span class="number">30</span>, <span class="number">32</span>)</span><br><span class="line">print_grade(<span class="number">50</span>, <span class="number">45</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">You get a B</span><br><span class="line">You fail</span><br><span class="line">You get a D</span><br><span class="line">You get an A</span><br></pre></td></tr></table></figure>

<p><em><strong>개인 풀이</strong></em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_grade</span>(<span class="params">midterm, final</span>):</span></span><br><span class="line">    total = midterm + final</span><br><span class="line">    <span class="comment"># 코드를 쓰세요.</span></span><br><span class="line">    <span class="keyword">if</span> total&gt;=<span class="number">90</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;you get an A&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> total&gt;= <span class="number">80</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;you get a B&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> total&gt;= <span class="number">70</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;you get a C&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> total&gt;= <span class="number">60</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;you get a D&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;You fail&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 테스트</span></span><br><span class="line">print_grade(<span class="number">40</span>, <span class="number">45</span>)</span><br><span class="line">print_grade(<span class="number">20</span>, <span class="number">35</span>)</span><br><span class="line">print_grade(<span class="number">30</span>, <span class="number">32</span>)</span><br><span class="line">print_grade(<span class="number">50</span>, <span class="number">45</span>)</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>코드잇 온라인 강의 프로그래밍 기초</p>
</blockquote>
]]></content>
      <categories>
        <category>exercise</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>exercise</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>PYTHON 홀수짝수</title>
    <url>/2021/12/30/python-exercise002/</url>
    <content><![CDATA[<p>짝수인지 홀수인지 판단해주는 <code>is_evenly_divisible</code> 함수를 쓰세요.</p>
<a id="more"></a>


<p><code>is_evenly_divisible</code>는 <code>number</code>(수)를 파라미터로 받습니다. 짝수인 경우에는, 즉 <code>number</code>가 2로 나누어 떨어질 경우에는 True를 리턴해줍니다. 홀수인 경우에는, 즉 <code>number</code>가 2로 나누어 떨어지지 않을 경우에는 False를 리턴해줍니다. 함수 안에는 <code>print</code>문을 사용하면 안 되고, return문을 사용하여야 합니다.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_evenly_divisible</span>(<span class="params">number</span>):</span></span><br><span class="line">    <span class="comment"># 코드를 작성하세요</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(is_evenly_divisible(<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(is_evenly_divisible(<span class="number">7</span>))</span><br><span class="line"><span class="built_in">print</span>(is_evenly_divisible(<span class="number">8</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p><em>개인 풀이</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_evenly_divisible</span>(<span class="params">number</span>):</span></span><br><span class="line">    <span class="comment"># 코드를 작성하세요</span></span><br><span class="line">    <span class="keyword">return</span> number%<span class="number">2</span>==<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(is_evenly_divisible(<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(is_evenly_divisible(<span class="number">7</span>))</span><br><span class="line"><span class="built_in">print</span>(is_evenly_divisible(<span class="number">8</span>))</span><br></pre></td></tr></table></figure>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>코드잇 온라인 강의 프로그래밍 기초</p>
</blockquote>
]]></content>
      <categories>
        <category>exercise</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>exercise</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>PYTHON 이상한 수학 문제 I</title>
    <url>/2022/01/03/python-exercise004/</url>
    <content><![CDATA[<p>while문과 if문을 활용하여 100이하의 자연수 중 8의 배수이지만, 12의 배수는 아닌 것을 모두 출력하세요.</p>
<a id="more"></a>

<p>실행하면 아래의 내용이 콘솔에 출력되어야 합니다.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">32</span></span><br><span class="line"><span class="number">40</span></span><br><span class="line"><span class="number">56</span></span><br><span class="line"><span class="number">64</span></span><br><span class="line"><span class="number">80</span></span><br><span class="line"><span class="number">88</span></span><br></pre></td></tr></table></figure>

<p><em><strong>개인풀이</strong></em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">100</span>:</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">8</span> == <span class="number">0</span> <span class="keyword">and</span> i % <span class="number">12</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>코드잇 온라인 강의 프로그래밍 기초</p>
</blockquote>
]]></content>
      <categories>
        <category>exercise</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>exercise</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>PYTHON 이상한 수학 문제 II</title>
    <url>/2022/01/03/python-exercise005/</url>
    <content><![CDATA[<p>10보다 작은 2 또는 3의 배수는 2, 3, 4, 6, 8, 9이며, 이들의 합은 32입니다. while문과 if문을 활용하여, 1000보다 작은 자연수 중 2 또는 3의 배수의 합을 출력하는 프로그램을 써보세요.</p>
<a id="more"></a>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">333167</span><br></pre></td></tr></table></figure>

<p><em><strong>개인풀이</strong></em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">999</span>:</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">or</span> i % <span class="number">3</span> == <span class="number">0</span> :</span><br><span class="line">        <span class="built_in">sum</span> += i</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>코드잇 온라인 강의 프로그래밍 기초</p>
</blockquote>
]]></content>
      <categories>
        <category>exercise</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>exercise</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>PYTHON 택이의 우승상금</title>
    <url>/2022/01/05/python-exercise006/</url>
    <content><![CDATA[<p>1988년 쌍문동에 사는 택이는 바둑대회 우승 상금으로 5000만원을 받았습니다. 하지만 바둑 외에는 아는게 없으니, 이웃 어른들에게 이 돈으로 무엇을 해야할지 물어보기로 하였습니다. 동일 아저씨나 미란 아주머니 중 누구의 말을 듣는 것이 좋을지 판단해보세요.</p>
<a id="more"></a>

<p>은행에서 근무하는 동일 아저씨는, 은행에 돈을 맡겨서 매년 이자로 12%씩 받는 것을 추천하셨습니다. 1년 후인 1989년에는, 5000만원의 12% 이자인 600만원이 더해져 5600만원이 된다고 하면서요. 이 이야기를 들은 미란 아주머니는 고작 12%때문에 생돈을 은행에 넣어 놓느냐며, 얼마 전 지어진 매매가 5000만원짜리 은마아파트를 살 것을 추천하셨습니다. 2016년 현재 은마아파트의 매매가는 11억원입니다.</p>
<p><strong>while문과 if문을 사용해 1988년 은행에 5000만원을 넣었을 경우 2016년에 얼마나 있을지 계산</strong><sup style="margin:0 5px;">1</sup>하여, <strong>2016년에 은행에 저축해 둔 금액이 더 크다면, <code>*원 차이로 동일 아저씨의 말씀이 맞습니다.</code>가 출력</strong><sup style="margin:0 5px;">2</sup>되게 하세요. 하지만 <strong>은마 아파트의 가격이 더 크다면, <code>*원 차이로 미란 아주머니의 말씀이 맞습니다.</code>가 출력</strong><sup style="margin:0 5px;">3</sup>되게 하세요. (단 이자율은 매년 12%로 같다고 가정합니다.)</p>
<!-- more -->

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">94193324원 차이로 동일 아저씨의 말씀이 맞습니다.</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INTEREST_RATE = <span class="number">0.12</span></span><br><span class="line">APARTMENT_PRICE = <span class="number">1100000000</span></span><br><span class="line"></span><br><span class="line">amount = <span class="number">50000000</span></span><br><span class="line">year = <span class="number">1988</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> year &lt; <span class="number">2016</span>:</span><br><span class="line">    amount = amount * (<span class="number">1</span> + INTEREST_RATE)</span><br><span class="line">    year = year + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> amount &gt; APARTMENT_PRICE:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%d원 차이로 동일 아저씨 말씀이 맞습니다.&quot;</span> %(amount-APARTMENT_PRICE))</span><br><span class="line"><span class="keyword">elif</span> amount &lt; APARTMENT_PRICE:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%d원 차이로 미란 아주머니 말씀이 맞습니다.&quot;</span> %(APARTMENT_PRICE-amount))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;똑같습니다.&quot;</span>)</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>코드잇 온라인 강의 프로그래밍 기초</p>
</blockquote>
]]></content>
      <categories>
        <category>exercise</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>exercise</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>PYTHON 데이터 분석</title>
    <url>/2021/12/23/python-data-analysis/</url>
    <content><![CDATA[<p>파이썬으로는 데이터 분석을 할 수 있다.</p>
<a id="more"></a>

<h2 id="파일-읽기"><a href="#파일-읽기" class="headerlink" title="파일 읽기"></a>파일 읽기</h2><p> 텍스트 파일을 읽기 위해서 <code>open</code> 내장 함수를 사용하면 된다. 첫번째 파라미터에는 파일 이름을 넘겨주어야 하며, 두번째 파라미터로는 읽는다는 의미의 <code>r</code>을 넘겨주면 된다. 추후에 파일을 쓰게 될 때에는 <code>w</code>를 넘겨준다. in_file의 type을 출력해보면 <code>&lt;class &#39;_io.TextIOWrapper&#39;&gt;</code>라고 나오지만, for문에 쓰면 <code>in_file</code>을 마치 문자열 리스트(list of strings)처럼 다룰 수 있다. 파일을 다 읽었다면 파일을 닫아주는 것이 좋다. <code>close</code> 메소드를 사용하면 메모리를 해방시켜줄 수 있다.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">in_file = <span class="built_in">open</span>(<span class="string">&#x27;chicken.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> in_file:</span><br><span class="line">    <span class="built_in">print</span>(line)</span><br><span class="line"></span><br><span class="line">in_file.close()</span><br></pre></td></tr></table></figure>

<h2 id="strip-메소드"><a href="#strip-메소드" class="headerlink" title="strip 메소드"></a>strip 메소드</h2><p>문자열의 가장 앞쪽과 뒤쪽에 있는 화이트 스페이스(white space)가 제거된 새로운 문자열을 리턴해준다. 단, 가장 앞쪽과 뒤쪽에 있는 화이트 스페이스만 제거하고 중간에 있는 화이트 스페이스의 경우 그대로 놔둔다.</p>
<blockquote>
<p>화이트 스페이스는 띄어쓰기뿐만 아니라 탭(<code>\t</code>)과 엔터(<code>\n</code>)까지 포괄적으로 포함한다.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;    Hello world!     &quot;</span>.strip())</span><br><span class="line"><span class="comment"># Hello world!</span></span><br></pre></td></tr></table></figure>


<h2 id="split-메소드"><a href="#split-메소드" class="headerlink" title="split 메소드"></a>split 메소드</h2><p>파라미터로 넘겨주는 값을 기준으로 문자열을 분리시키고, 분리된 값이 정리되어 있는 리스트를 리턴해준다. <code>split</code>메소드의 파라미터는 옵셔널 파라미터이기 때문에 아무 값도 넘겨주지 않았을 경우 기본값으로 “”가 넘어가게 된다.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1. 2. 3. 4. 5. 6&quot;</span>.split(<span class="string">&quot;.&quot;</span>))</span><br><span class="line"><span class="comment"># [&#x27;1&#x27;, &#x27; 2&#x27;, &#x27; 3&#x27;, &#x27; 4&#x27;, &#x27; 5&#x27;, &#x27; 6&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1 2 3 4 5 6&quot;</span>.split())</span><br><span class="line"><span class="comment">#[&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;]</span></span><br></pre></td></tr></table></figure>

<h2 id="파일-쓰기"><a href="#파일-쓰기" class="headerlink" title="파일 쓰기"></a>파일 쓰기</h2><p>파일을 읽을 때와 마찬가지로 <code>open</code> 함수를 쓰면 된다. 첫번째 파라미터는 파일 이름을 넘겨주고, 두번째 파라미터는 ‘write’의 약자인 <code>w</code>를 넘겨주면 된다.  마찬가지로 파일을 다 쓰면 꼭 닫아주는 것이 좋다.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">out_file = <span class="built_in">open</span>(<span class="string">&#x27;new_file.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">out_file.write(<span class="string">&quot;Hello world!\n&quot;</span>)</span><br><span class="line">out_file.write(<span class="string">&quot;My name is Minjee Kim!&quot;</span>)</span><br><span class="line">out_file.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Hello world!</span></span><br><span class="line"><span class="comment"># My name is Minjee Kim!</span></span><br></pre></td></tr></table></figure>


<h2 id="사전"><a href="#사전" class="headerlink" title="사전"></a>사전</h2><p>사전(dictionary)은 순서가 없는 key-value 쌍의 집합이다.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(dict1))</span><br><span class="line"><span class="comment"># &lt;class &#x27;dict&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<p><em><strong>key가 정수인 경우</strong></em></p>
<p>리스트는 인덱스 0부터 시작하고 순서대로 채워지지만 사전은 순서가 없기때문에 0부터 시작하지 않고 아무 값들을 쓸 수 있다.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1[<span class="number">5</span>] = <span class="number">25</span></span><br><span class="line">dict1[<span class="number">2</span>] = <span class="number">4</span></span><br><span class="line">dict1[<span class="number">3</span>] = <span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dict1)</span><br><span class="line"><span class="comment"># &#123;2: 4, 3: 9, 5: 25&#125;</span></span><br></pre></td></tr></table></figure>

<p><em><strong>key가 정수가 아닌 경우</strong></em></p>
<p>사전이 리스트와 가장 다른 점은 key가 정수뿐만 아니라 아무 자료형이나 될 수 있다는 점이다.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">family = &#123;&#125;</span><br><span class="line">family[<span class="string">&#x27;mom&#x27;</span>] = <span class="string">&#x27;grace&#x27;</span></span><br><span class="line">family[<span class="string">&#x27;dad&#x27;</span>] = <span class="string">&#x27;chris&#x27;</span></span><br><span class="line">family[<span class="string">&#x27;son&#x27;</span>] = <span class="string">&#x27;young&#x27;</span></span><br><span class="line">family[<span class="string">&#x27;daughter&#x27;</span>] = <span class="string">&#x27;kay&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(family[<span class="string">&#x27;dad&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(family[<span class="string">&#x27;daughter&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># chris</span></span><br><span class="line"><span class="comment"># kay</span></span><br></pre></td></tr></table></figure>

<h3 id="사전의-key-모두-받아오기"><a href="#사전의-key-모두-받아오기" class="headerlink" title="사전의 key 모두 받아오기"></a>사전의 key 모두 받아오기</h3><p>key들만 모두 받고 싶은 경우 <code>keys</code> 메소드를 사용한다. key들을 리스트로 쓰고 싶으면 list 함수로 형 변환을 하면 된다.</p>
<h3 id="사전의-value-모두-받아오기"><a href="#사전의-value-모두-받아오기" class="headerlink" title="사전의 value 모두 받아오기"></a>사전의 value 모두 받아오기</h3><p>value들을 모두 받고 싶은 경우 <code>values</code> 메소드를 사용한다.  value들을 리스트로 쓰고 싶으면 <code>list</code> 함수로 형 변환을 하면 된다.</p>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>코드잇 온라인 강의 프로그래밍 기초</p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>data type</tag>
      </tags>
  </entry>
  <entry>
    <title>PYTHON 구구단</title>
    <url>/2022/01/07/python-exercise007/</url>
    <content><![CDATA[<p>while문을 사용하여 콘솔에 아래 문장들이 출력되게 구구단 프로그램을 작성하세요.</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 * 1 &#x3D; 1</span><br><span class="line">1 * 2 &#x3D; 2</span><br><span class="line">1 * 3 &#x3D; 3</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">9 * 7 &#x3D; 63</span><br><span class="line">9 * 8 &#x3D; 72</span><br><span class="line">9 * 9 &#x3D; 81</span><br></pre></td></tr></table></figure>

<p><em><strong>While문</strong></em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i &lt;=<span class="number">9</span>:</span><br><span class="line">    j = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j&lt;=<span class="number">9</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%d * %d = %d&quot;</span> % (i, j, i * j))</span><br><span class="line">        j = j + <span class="number">1</span></span><br><span class="line">    i = i + <span class="number">1</span></span><br></pre></td></tr></table></figure>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>코드잇 온라인 강의 프로그래밍 기초</p>
</blockquote>
]]></content>
      <categories>
        <category>exercise</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>exercise</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>PYTHON 리스트</title>
    <url>/2021/12/21/python-list/</url>
    <content><![CDATA[<p>변수에 여러가지 값을 저장하고 싶다면 리스트(list)라는 자료형을 사용하면 된다. 리스트 안에는 또 다른 리스트가 있을 수 있으며, <strong>nested list</strong> 라고 부른다.</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">리스트[인덱스]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">alphabets = [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>]</span><br><span class="line">grades = [[<span class="number">62</span>, <span class="number">75</span>, <span class="number">77</span>], [<span class="number">78</span>, <span class="number">81</span>, <span class="number">86</span>], [<span class="number">85</span>, <span class="number">91</span>, <span class="number">89</span>]]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(numbers) <span class="comment"># [1, 2, 3, 4]</span></span><br><span class="line"><span class="built_in">print</span>(alphabets) <span class="comment"># [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(grades[<span class="number">0</span>]) <span class="comment"># [62, 75, 77]</span></span><br><span class="line"><span class="built_in">print</span>(grades[<span class="number">2</span>][<span class="number">1</span>]) <span class="comment"># 91</span></span><br></pre></td></tr></table></figure>

<h2 id="인덱싱"><a href="#인덱싱" class="headerlink" title="인덱싱"></a>인덱싱</h2><p>인덱스를 사용하면 리스트에서 몇번째 자리에 어떤 값이 있는지 알 수 있다.</p>
<ul>
<li>인덱스는 0부터 시작한다.</li>
<li>없는 인덱스를 찾으면 오류가 발생한다.</li>
<li>음수의 인덱스도 가능하다. (ex.-1일 경우 제일 마지막 원소)</li>
<li><code>numbers[a:b]</code>: 인덱스 a부터 인덱스 b-1까지의 원소를 불러온다.</li>
<li><code>numbers[a:]</code>: 인덱스 a부터 마지막 인덱스까지의 원소를 불러온다.</li>
<li><code>numbers[:b]</code>: 첫번째 인덱스[0]부터 인덱스 b-1까지의 원소를 불러온다.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(numbers[<span class="number">1</span>]) <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(numbers[-<span class="number">1</span>]) <span class="comment"># 4</span></span><br><span class="line"><span class="built_in">print</span>(numbers[<span class="number">10</span>]) <span class="comment">#  list index out of range</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(numbers[<span class="number">0</span>] + numbers[<span class="number">1</span>]) <span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(numbers[<span class="number">0</span>:<span class="number">2</span>]) <span class="comment"># [1, 2]</span></span><br><span class="line"><span class="built_in">print</span>(numbers[<span class="number">2</span>:]) <span class="comment"># [3, 4]</span></span><br><span class="line"><span class="built_in">print</span>(numbers[:<span class="number">2</span>]) <span class="comment"># [1, 2]</span></span><br><span class="line"></span><br><span class="line">numbers[<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(numbers) <span class="comment"># [7, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line">numbers[<span class="number">0</span>] = numbers[<span class="number">2</span>] + numbers[<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(numbers) <span class="comment"># [7, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>


<h2 id="리스트-함수"><a href="#리스트-함수" class="headerlink" title="리스트 함수"></a>리스트 함수</h2><h3 id="len-함수"><a href="#len-함수" class="headerlink" title="len 함수"></a>len 함수</h3><p>리스트 안의 원소 개수를 알려준다.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alphabet = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;리스트 길이: %d&quot;</span> % <span class="built_in">len</span>(alphabet)) <span class="comment"># 리스트 길이: 4</span></span><br></pre></td></tr></table></figure>

<h3 id="원소-추가하기"><a href="#원소-추가하기" class="headerlink" title="원소 추가하기"></a>원소 추가하기</h3><p><code>insert</code>와 <code>append</code>를 사용하여 리스트에 원소를 추가한다.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numbers = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 마지막 위치에 5 추가</span></span><br><span class="line">numbers.append(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(numbers) <span class="comment"># [5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 마지막 위치에 8 추가</span></span><br><span class="line">numbers.append(<span class="number">8</span>)</span><br><span class="line"><span class="built_in">print</span>(numbers) <span class="comment"># [5, 8]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 마지막 위치에 10 추가</span></span><br><span class="line">numbers.append(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(numbers) <span class="comment"># [5, 8, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 인덱스 0 자리에 0 추가</span></span><br><span class="line">numbers.insert(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(numbers) <span class="comment"># [0, 5, 8, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 인덱스 3 자리에 12 추가</span></span><br><span class="line">numbers.insert(<span class="number">3</span>, <span class="number">12</span>)</span><br><span class="line"><span class="built_in">print</span>(numbers) <span class="comment">#[0, 5, 8, 12, 10]</span></span><br></pre></td></tr></table></figure>

<h3 id="원소-삭제하기"><a href="#원소-삭제하기" class="headerlink" title="원소 삭제하기"></a>원소 삭제하기</h3><p><code>del</code> 함수를 사용하여 원하는 리스트의 원소를 삭제할 수 있다.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 인덱스 3에 있는 값 삭제</span></span><br><span class="line"><span class="keyword">del</span> numbers[<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(numbers) <span class="comment"># [1, 2, 3, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 인덱스 2부터 마지막 값까지 삭제</span></span><br><span class="line"><span class="keyword">del</span> numbers[<span class="number">2</span>:]</span><br><span class="line"><span class="built_in">print</span>(numbers) <span class="comment"># [1, 2]</span></span><br></pre></td></tr></table></figure>

<h3 id="리스트-연결하기"><a href="#리스트-연결하기" class="headerlink" title="리스트 연결하기"></a>리스트 연결하기</h3><p><code>+</code>로 리스트들을 연결할 수 있다.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num1 = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">num2 = [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">num = num1 + num2</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(num) <span class="comment">#[1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>

<h3 id="리스트에서-값의-존재-확인하기"><a href="#리스트에서-값의-존재-확인하기" class="headerlink" title="리스트에서 값의 존재 확인하기"></a>리스트에서 값의 존재 확인하기</h3><p><code>in</code>이라는 키워드로 리스트에 값의 존재를 확인할 수 있다.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span> <span class="keyword">in</span> num) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">8</span> <span class="keyword">in</span> num) <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">5</span> <span class="keyword">not</span> <span class="keyword">in</span> num) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span> <span class="keyword">not</span> <span class="keyword">in</span> num) <span class="comment"># False</span></span><br></pre></td></tr></table></figure>

<h3 id="sorted-함수"><a href="#sorted-함수" class="headerlink" title="sorted 함수"></a>sorted 함수</h3><p><code>sorted</code> 함수는 리스트의 원소들을 <strong>오름차순으로 정렬한 새로운 리스트를 리턴</strong> 해준다.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numbers = [<span class="number">6</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line">numbers = <span class="built_in">sorted</span>(numbers)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(numbers) <span class="comment"># [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>

<h3 id="sort-메소드"><a href="#sort-메소드" class="headerlink" title="sort 메소드"></a>sort 메소드</h3><p><code>some_list.sort()</code>는 새로운 리스트를 생성하지 않고 정렬된 상태로 바꿔주기만 한다. (새로운 리스트를 리턴하지 않는다.)</p>
<h3 id="reverse-메소드"><a href="#reverse-메소드" class="headerlink" title="reverse 메소드"></a>reverse 메소드</h3><p><code>some_list.reverse()</code>는 리스트에서 원소들을 뒤집어진 순서로 배치한다.</p>
<h3 id="index-메소드"><a href="#index-메소드" class="headerlink" title="index 메소드"></a>index 메소드</h3><p><code>some_list.index(x)</code>는 리스트에서 x의 값을 갖고 있는 원소의 인덱스를 리턴한다.</p>
<h3 id="remove-메소드"><a href="#remove-메소드" class="headerlink" title="remove 메소드"></a>remove 메소드</h3><p><code>some_list.remove(x)</code>는 리스트에서 첫 번째로 x의 값을 갖고 있는 원소를 삭제한다.</p>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>코드잇 온라인 강의 프로그래밍 기초</p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>data type</tag>
      </tags>
  </entry>
  <entry>
    <title>PYTHON 약수 찾기</title>
    <url>/2022/01/08/python-exercise008/</url>
    <content><![CDATA[<p>자연수 중 120의 약수를 모두 출력하고, 총 몇개의 약수가 있는지 출력하는 프로그램을 써보세요.</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">8</span><br><span class="line">10</span><br><span class="line">12</span><br><span class="line">15</span><br><span class="line">20</span><br><span class="line">24</span><br><span class="line">30</span><br><span class="line">40</span><br><span class="line">60</span><br><span class="line">120</span><br><span class="line">120의 약수는 총 16개입니다.</span><br></pre></td></tr></table></figure>

<p><em><strong>개인풀이</strong></em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">120</span></span><br><span class="line">x = <span class="number">1</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> x &lt;= n:</span><br><span class="line">    <span class="keyword">if</span> n % x == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(x)</span><br><span class="line">        count = count + <span class="number">1</span></span><br><span class="line">    x = x + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%d의 약수는 총 %d개 입니다.&quot;</span> % (n, count))</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>코드잇 온라인 강의 프로그래밍 기초</p>
</blockquote>
]]></content>
      <categories>
        <category>exercise</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>exercise</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>PYTHON 모듈</title>
    <url>/2021/12/20/python-module/</url>
    <content><![CDATA[<p><strong>모듈</strong> 은 바로 실행하는 용도가 아니라, 나중에 사용할 함수나 클래스 등을 미리 정의해둔 파일이다. 정보를 한번만 정의해두고 import하면 여러 프로그램에서 손쉽게 사용할 수 있다.</p>
<a id="more"></a>

<h2 id="모듈"><a href="#모듈" class="headerlink" title="모듈"></a>모듈</h2><p>기본적으로 모듈 안에 정의된 변수 / 함수 / 클래스를 호출하는 방식은 아래와 같다. 여러 개의 함수/변수/클래스를 불러오고 싶다면 <code>,</code> (쉼표)로 구분한다. 모듈 안의 정의된 모든 변수 / 함수 / 클래스를 호출하고 싶다면 <code>*</code>을 사용한다. 단, 일부만 사용하고 싶을 경우에 <code>*</code>를 사용하는 것은 불필요하다.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> (모듈 파일명) <span class="keyword">import</span> (불러올 함수명), (불러올 변수명), (불러올 클래스)</span><br></pre></td></tr></table></figure>


<h2 id="random-모듈"><a href="#random-모듈" class="headerlink" title="random 모듈"></a>random 모듈</h2><p>파이썬을 설치하면 기본적으로 제공되는 <code>random</code>이라는 모듈이 있다. 그 안에 <code>randint</code>, <code>uniform</code>이라는 함수가 있다. 이 두 함수를 사용하고 싶다면 <code>random</code> 모듈파일을 먼저 불러와야 한다.</p>
<p><em><strong>randint</strong></em></p>
<p>파라미터에 두개의 숫자를 받고, 그 숫자 사이의 정수를 임의로 랜덤하게 리턴해준다.</p>
<p><em><strong>uniform</strong></em></p>
<p>파라미터에 두개의 숫자를 받고, 그 숫자 사이의 소수를 임의로 랜덤하게 리턴해준다.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint, uniform</span><br></pre></td></tr></table></figure>


<h2 id="input"><a href="#input" class="headerlink" title="input"></a>input</h2><p>사용자의 입력을 받고 싶을 때 <code>input</code>이라는 내장함수를 사용할 수 있다. 입력을 받기 전에 콘솔에 출력된다. 보통 유저에게 어떤 값을 입력할지 설명하는 용도로 사용된다. 사용자가 입력을 진행할 때까지 프로그램이 멈추고, 입력하면 다음 단계로 진행된다.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="built_in">input</span>(<span class="string">&quot;이름을 입력하세요 :&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello &quot;</span> + name) <span class="comment"># Hello Minjee</span></span><br></pre></td></tr></table></figure>

<p>사용자가 어떤 것을 입력해도 <strong>입력값은 문자열 형태로 리턴</strong> 된다. 따라서 숫자형의 값을 입력받고 싶다면 <code>int</code> 함수를 사용해서 직접 형변환을 시켜주어야 한다.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;정수 : &quot;</span>))</span><br><span class="line">y = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;정수 : &quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;입력한 정수의 합 %d&quot;</span> % (x + y))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 정수 : 5</span></span><br><span class="line"><span class="comment"># 정수 : 3</span></span><br><span class="line"><span class="comment"># 입력한 정수의 합 : 8</span></span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>코드잇 온라인 강의 프로그래밍 기초</p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>data type</tag>
      </tags>
  </entry>
  <entry>
    <title>PYTHON 객체</title>
    <url>/2021/12/24/python-object/</url>
    <content><![CDATA[<p>속성과 행동을 떠올릴 수 있다면 모두 객체이다. 객체는 속성과 행동으로 이루어져 있다. 속성은 변수로 나타내며, 행동은 함수(메소드)로 나타낸다.</p>
<p><img src="/images/python_object.jpg" alt="객체란"></p>
<a id="more"></a>


<h2 id="객체-지향-프로그래밍"><a href="#객체-지향-프로그래밍" class="headerlink" title="객체 지향 프로그래밍"></a>객체 지향 프로그래밍</h2><p>프로그램을 여러개의 독립된 __객체들과 그 객체들 간의 상호 작용__으로 파악하는 프로그래밍 접근법. 프로그램을 객체와 객체의 소통으로 바라본다. 프로그램에 어떤 객체들이 필요할지 정한 후에 속성과 행동을 정하고 서로 어떻게 소통할지 판단한다.</p>
<blockquote>
<p><strong>모델링(modeling)</strong> : 객체지향적으로 설계</p>
</blockquote>
<blockquote>
<p><strong>꼭 알아야 할 4가지 개념</strong> : 추상화 캡슐화, 상속, 다형성</p>
</blockquote>
<h2 id="객체-설계의-원칙-SOLID-원칙"><a href="#객체-설계의-원칙-SOLID-원칙" class="headerlink" title="객체 설계의 원칙, SOLID 원칙"></a>객체 설계의 원칙, SOLID 원칙</h2><ol>
<li>단일 책임 원칙 (Single Responsibility Principle)</li>
<li>개방 폐쇄 원칙 (Open-closed Principle)</li>
<li>리스코프 치환 원칙 (Liskov Substitution Principle)</li>
<li>인터페이스 분리 원칙 (Interface Segregation Principle)</li>
<li>의존 관계 역전 원칙 (Dependency Inversion Principle)</li>
</ol>
<h2 id="클래스와-인스턴스"><a href="#클래스와-인스턴스" class="headerlink" title="클래스와 인스턴스"></a>클래스와 인스턴스</h2><p>클래스는 어떠한 변수와 메소드를 가지는지 알려주는 명세서같은 설계도라고 보면 된다. 객체의 경우 클래스로 구현하고 싶은 결과물이며, 인스턴스로 실체화한다.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">User1 = User() <span class="comment"># 유저 인스턴스가 생성된다.</span></span><br><span class="line">User2 = User()</span><br><span class="line">User3 = User()</span><br></pre></td></tr></table></figure>


<h2 id="인스턴스-변수"><a href="#인스턴스-변수" class="headerlink" title="인스턴스 변수"></a>인스턴스 변수</h2><p>인스턴스가 개인적으로 갖고 있는 속성.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user1.name = <span class="string">&quot;Minjee Kim&quot;</span></span><br><span class="line">user1.email = <span class="string">&quot;mjaedot@gmail.com&quot;</span></span><br><span class="line">user1.nickname = <span class="string">&quot;mjaedot&quot;</span></span><br><span class="line"></span><br><span class="line">user2.name = <span class="string">&quot;Inho Baek&quot;</span></span><br><span class="line">user2.email = <span class="string">&quot;Inho@gmail.com&quot;</span></span><br><span class="line">user2.nickname = <span class="string">&quot;cheese in the trap&quot;</span></span><br><span class="line"></span><br><span class="line">user3.name = <span class="string">&quot;Myungyoung Gang&quot;</span></span><br><span class="line">user3.email = <span class="string">&quot;hope@gmail.com&quot;</span></span><br><span class="line">user3.nickname = <span class="string">&quot;Gadam Hangsul&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(user1.name) <span class="comment"># Minjee Kim</span></span><br><span class="line"><span class="built_in">print</span>(user2.email) <span class="comment">#Inho@gmail.com</span></span><br><span class="line"><span class="built_in">print</span>(user3.age) <span class="comment">#정의하지 않았으므로 에러 발생</span></span><br></pre></td></tr></table></figure>

<h2 id="메소드"><a href="#메소드" class="headerlink" title="메소드"></a>메소드</h2><ol>
<li><strong>인스턴스 메소드</strong> : 인스턴스 변수를 사용하거나 인스턴스 변수에 값을 설정하는 메소드.</li>
<li><strong>클래스 메소드</strong></li>
<li><strong>정적 메소드</strong></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say_hello</span>(<span class="params">some_user</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello, my name is &#123;&#125;.&quot;</span>.<span class="built_in">format</span>(some_user.name))</span><br><span class="line"></span><br><span class="line">User.say_hello(user1) <span class="comment"># Hello, my name is Minjee Kim.</span></span><br><span class="line">User.say_hello(user2) <span class="comment"># Hello, my name is Inho Baek.</span></span><br><span class="line">User.say_hello(user3) <span class="comment"># Hello, my name is Myungyoung Gang.</span></span><br></pre></td></tr></table></figure>

<p><em><strong>인스턴스 메소드의 특별한 규칙</strong></em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#인스턴스의 메소드를 호출. 첫번째 파라미터를 자동으로 넣어준다.</span></span><br><span class="line">user1.say_hello() <span class="comment"># Hello, my name is Minjee Kim.</span></span><br><span class="line">user1.say_hello(user1) <span class="comment"># 파라미터가 2개 들어가게 되어 에러 발생.</span></span><br></pre></td></tr></table></figure>

<h2 id="self"><a href="#self" class="headerlink" title="self"></a>self</h2><p>파이썬에서는 인스턴스 메소드의 첫번째 파라미터를 self로 사용하는 것을 권장한다.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">self, my_email, my_nickname</span>):</span></span><br><span class="line">    <span class="keyword">if</span>(self.email == my_email <span class="keyword">and</span> self.nickname == my_nickname):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;환영합니다.&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;실패!&quot;</span>)</span><br></pre></td></tr></table></figure>


<h2 id="인스턴스-변수와-같은-이름을-갖는-파라미터"><a href="#인스턴스-변수와-같은-이름을-갖는-파라미터" class="headerlink" title="인스턴스 변수와 같은 이름을 갖는 파라미터"></a>인스턴스 변수와 같은 이름을 갖는 파라미터</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_name</span>(<span class="params">self, name</span>):</span></span><br><span class="line">    <span class="comment"># 파라미터로 받는 name이 유저의 이름과 같은지 불린값으로 리턴하는 메소드.</span></span><br><span class="line">    <span class="keyword">return</span> self.name == name</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(user1.check_name(<span class="string">&quot;Minjee Kim&quot;</span>)) <span class="comment"># true</span></span><br><span class="line"><span class="built_in">print</span>(user1.check_name(<span class="string">&quot;Inho Baek&quot;</span>)) <span class="comment"># false</span></span><br></pre></td></tr></table></figure>


<h2 id="인스턴스-변수-초기값-선언"><a href="#인스턴스-변수-초기값-선언" class="headerlink" title="인스턴스 변수 초기값 선언"></a>인스턴스 변수 초기값 선언</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span>(<span class="params">self, name, email, password</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.email = email</span><br><span class="line">        self password = password</span><br><span class="line"></span><br><span class="line">user1 = User()</span><br><span class="line">user1.initialize(<span class="string">&quot;Young&quot;</span>, <span class="string">&quot;young@codeit.kr&quot;</span>, <span class="string">&quot;123456&quot;</span>)</span><br><span class="line"><span class="comment"># Young young@codeit.kr 123456</span></span><br><span class="line"></span><br><span class="line">user2 = User()</span><br><span class="line">user2.initialize(<span class="string">&quot;Yoonsoo&quot;</span>, <span class="string">&quot;yoonsoo@codeit.kr&quot;</span>, <span class="string">&quot;abcdef&quot;</span>)</span><br><span class="line"><span class="comment"># Yoonsoo yoonsoo@codeit.kr abcdef</span></span><br><span class="line"></span><br><span class="line">user3 = User()</span><br><span class="line">User.initialize(user3, <span class="string">&quot;Taeho&quot;</span>, <span class="string">&quot;taeho@codeit.kr&quot;</span>, <span class="string">&quot;123abc&quot;</span>)</span><br><span class="line"><span class="comment"># Taeho taeho@codeit.kr 123abc</span></span><br><span class="line"></span><br><span class="line">user4 = User()</span><br><span class="line">User.initialize(user4, <span class="string">&quot;Lisa&quot;</span>, <span class="string">&quot;lisa@codeit.kr&quot;</span>, <span class="string">&quot;abc123&quot;</span>)</span><br><span class="line"><span class="comment"># Lisa lisa@codeit.kr abc123</span></span><br></pre></td></tr></table></figure>

<h2 id="init-메소드"><a href="#init-메소드" class="headerlink" title="__init__ 메소드"></a><code>__init__</code> 메소드</h2><p><code>__init__</code> 메서드는 인스턴스가 생성될 때 자동으로 호출된다.</p>
<ol>
<li>User 인스턴스 생성</li>
<li><code>__init__</code> 메소드 자동 호출</li>
<li>인스턴스 변수들의 초깃값 설정</li>
</ol>
<blockquote>
<p><strong>특수메소드</strong> : 특정 상황에서 자동으로 호출되는 메소드(언더바가 두개씩  있는 메소드. magic method, special method)</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span>(<span class="params">self, name, email, password</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.email = email</span><br><span class="line">        self password = password</span><br><span class="line"></span><br><span class="line">user1 = User(<span class="string">&quot;Young&quot;</span>, <span class="string">&quot;young@codeit.kr&quot;</span>, <span class="string">&quot;123456&quot;</span>)</span><br><span class="line"><span class="comment"># Young young@codeit.kr 123456</span></span><br><span class="line"></span><br><span class="line">user2 = User(<span class="string">&quot;Yoonsoo&quot;</span>, <span class="string">&quot;yoonsoo@codeit.kr&quot;</span>, <span class="string">&quot;abcdef&quot;</span>)</span><br><span class="line"><span class="comment"># Yoonsoo yoonsoo@codeit.kr abcdef</span></span><br><span class="line"></span><br><span class="line">user3 = User(<span class="string">&quot;Taeho&quot;</span>, <span class="string">&quot;taeho@codeit.kr&quot;</span>, <span class="string">&quot;123abc&quot;</span>)</span><br><span class="line"><span class="comment"># Taeho taeho@codeit.kr 123abc</span></span><br><span class="line"></span><br><span class="line">user4 = User(<span class="string">&quot;Lisa&quot;</span>, <span class="string">&quot;lisa@codeit.kr&quot;</span>, <span class="string">&quot;abc123&quot;</span>)</span><br><span class="line"><span class="comment"># Lisa lisa@codeit.kr abc123</span></span><br></pre></td></tr></table></figure>

<h2 id="str-메소드"><a href="#str-메소드" class="headerlink" title="__str__ 메소드"></a><code>__str__</code> 메소드</h2><p>인스턴스를 출력할 때 우리가 원하는 정보를 나오게 하고 싶다면 클래스에 <code>__str__</code> 메소드를 정의하면 된다.</p>
<blockquote>
<p><strong>double underscore</strong> : dunder라고 부르기도 한다.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, email, password</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.email = email</span><br><span class="line">        self password = password</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sya_hello</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Hello, my name is &#123;&#125;.&quot;</span>.<span class="built_in">format</span>(self.name))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;사용자: &#123;&#125;, 이메일: &#123;&#125;, 비밀번호: *****&quot;</span>.<span class="built_in">format</span>(self.name, self.email)</span><br><span class="line"></span><br><span class="line">user1 = User(<span class="string">&quot;Minjee Kim&quot;</span>, <span class="string">&quot;mjaedot@gmail.com&quot;</span>, <span class="string">&quot;1234&quot;</span>)</span><br><span class="line">user1 = User(<span class="string">&quot;Inho Baek&quot;</span>, <span class="string">&quot;inho@gmail.com&quot;</span>, <span class="string">&quot;abcd&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(user1)</span><br><span class="line"><span class="built_in">print</span>(user2)</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>코드잇 온라인 강의 객체지향 프로그래밍</p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>data type</tag>
      </tags>
  </entry>
  <entry>
    <title>리액트 next.js 세팅</title>
    <url>/2022/08/21/react-nextjs/</url>
    <content><![CDATA[<h1 id="Next-js를-사용하는-이유"><a href="#Next-js를-사용하는-이유" class="headerlink" title="Next.js를 사용하는 이유"></a>Next.js를 사용하는 이유</h1><ul>
<li>프리 렌더링</li>
<li>Vercel로 서버 호스팅</li>
<li>파일 시스템 기반 서버 호스팅</li>
</ul>
<p><code>npx create next app .</code>으로 설치한다.</p>
<ol>
<li><code>node.js</code>를 설치한다.</li>
<li><code>npm i next</code> 명령어를 진행한다.</li>
<li><code>npm i react react-dom</code> 을 설치한다.</li>
</ol>
<blockquote>
<p><a href="https://thebook.io/">https://thebook.io/</a> 에서 참고할 수 있다.</p>
</blockquote>
<a id="more"></a>

<ul>
<li><code>next</code>는 <code>pages</code>폴더가 반드시 있어야만 한다. 안에 있는 페이지들을 스플리팅해준다.</li>
<li><code>npm run dev</code>, <code>npm run build</code> 명령어로 확인할 수 있다.<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;next&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;next build&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>화살표 예쁘게 변경하는 방법: <code>settings</code> -&gt; <code>color scheme</code> -&gt; <code>color scheme font</code> -&gt; <code>enable font ligatures</code></li>
<li>기본 레이아웃<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Home = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello, Next!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Home;</span><br></pre></td></tr></table></figure></li>
<li><code>pages</code> 폴더는 필수적으로 있어야 한다.</li>
<li>컴포넌트를 쪼갤 경우 <code>components</code> 폴더를 제작하여 만들 수 있다. (폴더명은 자유)</li>
</ul>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>인프런 온라인 강의 React로 NodeBird SNS 만들기 _ 조현영 강사님</p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>react</tag>
        <tag>nextjs</tag>
      </tags>
  </entry>
  <entry>
    <title>리액트 개요</title>
    <url>/2022/05/24/react-overview/</url>
    <content><![CDATA[<ul>
<li><code>create-react-app</code>으로 리액트 프로젝트 생성.<br><code>npm init react-app &lt;폴더 이름&gt;</code> 혹은 해당 폴더 안에 들어간 후  터미널에서 <code>npm init react-app .</code></li>
<li>개발모드 실행: <code>npm run start</code></li>
<li>개발모드 종료: <code>Ctrl + C</code></li>
<li>리액트 개발자 도구: React Developer Tools (크롬 확장 프로그램)</li>
</ul>
<a id="more"></a>

<h2 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h2><p><code>JSX</code>는 자바스크립트의 확장 문법이다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> root = ReactDOM.createRoot(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.render(<span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>안녕 리액트!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<h3 id="HTML과-다른-속성명"><a href="#HTML과-다른-속성명" class="headerlink" title="HTML과 다른 속성명"></a>HTML과 다른 속성명</h3><ol>
<li>속성명은 카멜케이스로 작성한다.</li>
</ol>
<ul>
<li><code>onclick</code>, <code>onblur</code>, <code>onfocus</code>, <code>tabindex</code> 같은 이벤트 속성 및 속성들은 <code>onClick</code>, <code>onBlur</code>, <code>onFocus</code>, <code>onMouseDown</code>, <code>onMouseOver</code>, <code>tabIndex</code>처럼 작성되어야 한다.</li>
<li>예외적으로 비표준 속성을 다룰 때 활용하는 <code>data-*</code> 속성은 기존 HTML 문법 그대로 작성하여야 한다.</li>
</ul>
<ol start="2">
<li>자바스크립트 예약어와 같은 속성명은 사용할 수 없다.</li>
</ol>
<ul>
<li><code>for</code>, <code>class</code> 등과 같은 자바스크립트 문법에 해당하는 예약어와 똑같은 이름의 속성명은 사용 불가하다.</li>
<li>HTML의 <code>for</code>의 경우 <code>htmlFor</code>으로, <code>class</code>의 경우 <code>className</code>으로 작성하여야 한다.</li>
</ul>
<h3 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h3><p>JSX 문법을 활용할 때는 반드시 하나의 요소로 감싸주어야 한다. 여러 개의 요소를 작성하면 오류가 발생하므로 여러 태그를 감싸는 부모 태그를 만들어 하나의 요소를 만들어 주어야 한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;안녕&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;리액트!&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>부모 태그로 감쌀 경우 꼭 필요하지 않은 태그가 생길 수 있으므로 <code>Fragment</code>로 감싸주면 의미 없는 부모 태그를 만들지 않아도 된다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Fragment &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Fragment&gt;</span><br><span class="line">    &lt;p&gt;안녕&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;리액트!&lt;/p&gt;</span><br><span class="line">  &lt;/Fragment&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>빈 태그로 감싸는 단축 문법으로 활용 가능하다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;&gt;</span><br><span class="line">    &lt;p&gt;안녕&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;리액트!&lt;/p&gt;</span><br><span class="line">  &lt;/&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="자바스크립트-표현식"><a href="#자바스크립트-표현식" class="headerlink" title="자바스크립트 표현식"></a>자바스크립트 표현식</h3><ul>
<li><strong>중괄호(<code>&#123;&#125;</code>)</strong> 를 활용하면 자바스크립트 표현식을 넣을 수 있다.</li>
<li>중괄호는 자바스크립트 <strong>표현식</strong> 을 다룰 때 활용하기 때문에 중괄호 안에서 <code>for</code>, <code>if</code>문 등의 문장은 다룰 수 없다.</li>
<li>JSX 문법을 활용할 때 조건문이 필요하다면 조건 연산자를, 반복문이 필요하다면 배열의 반복 메소드를 사용할 수 있다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> product = <span class="string">&#x27;맥북&#x27;</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;h1&gt;나만의 &#123;product&#125; 주문하기&lt;/h1&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> product = <span class="string">&#x27;MacBook&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> model = <span class="string">&#x27;Air&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> imageUrl = <span class="string">&#x27;https://upload.wikimedia.org/wikipedia/commons/thumb/1/1e/MacBook_with_Retina_Display.png/500px-MacBook_with_Retina_Display.png&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">&#x27;곧 도착합니다!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;&gt;</span><br><span class="line">    &lt;h1&gt;&#123;product + <span class="string">&#x27; &#x27;</span> + model&#125; 주문하기&lt;/h1&gt;</span><br><span class="line">    &lt;img src=&#123;imageUrl&#125; alt=<span class="string">&quot;제품 사진&quot;</span> /&gt;</span><br><span class="line">    &lt;button onClick=&#123;handleClick&#125;&gt;확인&lt;/button&gt;</span><br><span class="line">  &lt;/&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="리액트-엘리먼트"><a href="#리액트-엘리먼트" class="headerlink" title="리액트 엘리먼트"></a>리액트 엘리먼트</h2><ul>
<li>JSX 문법으로 작성한 요소는 결과적으로 자바스크립트 객체가 된다. 이러한 객체를 <strong>리액트 엘리먼트</strong> 라고 한다.</li>
<li>리액트 엘리먼트는 리액트로 화면을 그려내는데 가장 기본적인 요소이다.</li>
<li>이 리액트 엘리먼트를 <code>ReactDOM.render</code> 함수의 아규먼트로 전달하게 되면 리액트가 객체 현태의 값을 해석하여 HTML 형태로 브라우저에 띄워준다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>안녕 리액트!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line"><span class="built_in">console</span>.log(element);</span><br><span class="line">ReactDOM.render(element, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;$$typeof: Symbol(react.element), type: &quot;h1&quot;, key: null, ref: null, props: &#123;…&#125;, …&#125;</span><br></pre></td></tr></table></figure>

<h2 id="리액트-컴포넌트"><a href="#리액트-컴포넌트" class="headerlink" title="리액트 컴포넌트"></a>리액트 컴포넌트</h2><ul>
<li>리액트 컴포넌트는 리액트 앨리먼트를 조금 더 자유로게 다루기 위한 문법이다.</li>
<li>가장 간단한 방법은 <strong>자바스크립트의 함수를 활용</strong> 하는 것이다.</li>
<li>컴포넌트 함수를 통해 하나의 태그처럼 활용할 수 있다.</li>
<li>이런 특성을 모듈 문법으로 활용하면 훨씬 더 독립적으로 컴포넌트 특성에 집중해서 코드를 작성할 수 있다.</li>
<li>리액트 컴포넌트의 이름은 반드시 <strong>첫 글자를 대문자로 작성</strong> 해야 한다. 소문자인 경우 오류가 발생한다.</li>
</ul>
<p><em><strong>하나의 컴포넌트인 Hello 함수(JSX 문법으로 작성되었으며 하나의 요소를 리턴)</strong></em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>안녕 리액트<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = (</span><br><span class="line">  &lt;&gt;</span><br><span class="line">    &lt;Hello /&gt;</span><br><span class="line">    &lt;Hello /&gt;</span><br><span class="line">    &lt;Hello /&gt;</span><br><span class="line">  &lt;/&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">ReactDOM.render(element, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> diceBlue01 <span class="keyword">from</span> <span class="string">&#x27;./assets/dice-blue-1.svg&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dice</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;diceBlue01&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;주사위&quot;</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Dice;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Dice <span class="keyword">from</span> <span class="string">&#x27;./Dice&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Dice /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>

<h2 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h2><ul>
<li>컴포넌트를 작성할 때 컴포넌트에도 속성을 지정할 수 있는데 이렇게 컴포넌트에 지정한 속성들을 <strong>Props</strong> 라고 한다.</li>
<li>Properties의 약자이다.</li>
<li>컴포넌트에 속성을 지정해주면 각 속성이 하나의 객체로 모여서 컴포넌트를 정의한 함수의 첫 번째에 파라미터로 전달된다.</li>
<li>props는 객체 형태를 띠고 읬으므로 Destructuring 문법을 활용하여 더 간결하게 코드를 작성할 수 있다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Dice <span class="keyword">from</span> <span class="string">&#x27;./Dice&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Dice color=<span class="string">&quot;blue&quot;</span> /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> diceBlue01 <span class="keyword">from</span> <span class="string">&#x27;./assets/dice-blue-1.svg&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dice</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(props)</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;diceBlue01&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;주사위&quot;</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Dice;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123; color: &quot;blue&quot; &#125;</span><br></pre></td></tr></table></figure>

<h2 id="Children"><a href="#Children" class="headerlink" title="Children"></a>Children</h2><ul>
<li><code>props</code>에는 <code>children</code>이라는 특별한 프로퍼티가 있다.</li>
<li>컴포넌트를 작성할 때 컴포넌트를 단일 태그가 아니라 여는 태그와 닫는 태그의 형태로 작성하면 그 안에 작성된 코드가 <code>children</code>값에 담긴다.</li>
<li>어떤 정보를 전달할 때는 일반적인 <code>props</code> 속성값을 주로 활용하고, 화면에 보여질 모습을 직관적인 코드로 작성할 떼 <code>children</code> 값을 활용할 수 있다.</li>
<li><code>children</code>을 활용하면 컴포넌트 안에 컴포넌트를 작성할 수 있고 컴포넌트 안에 복잡한 태그를 더 작성할 수 있다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Button</span>(<span class="params">&#123; children &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Button;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Dice <span class="keyword">from</span> <span class="string">&#x27;./Dice&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Button&gt;던지기&lt;/Button&gt;</span><br><span class="line">        &lt;Button&gt;처음부터&lt;/Button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;Dice color=<span class="string">&quot;red&quot;</span> num=&#123;<span class="number">2</span>&#125; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>

<h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><ul>
<li>상태가 바뀔 때마다 화면을 새롭게 그려내는 방식으로 동작한당.</li>
<li>state를 만들고 state를 바꾸기 위해서 <code>useState</code>라는 함수를 활용한다.</li>
<li>보통 Destructuring 문법으로 작성한다. <code>useState</code> 함수가 초깃값을 아규먼트로 받고 그에 대한 실행 결과로 요소 2개를 가진 배열의 형태로 리턴하기 때문이다.</li>
<li>첫 번째 변수는 원하는 state의 이름을 지어주고, 두 번째 변수에는 state 이름 앞에 set을 붙인 다음 카멜 케이스로 이름을 짓는 것이 일반적이다.</li>
<li><code>state</code>는 변수에 새로운 값을 변경하는 것이 아니라 <code>setter</code> 함수를 활용하여야 한다. <code>setter</code> 함수는 호출할 때 전달하는 아규먼트 값으로 <code>state</code>값을 변경한다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [num, setNum] = useState(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Button <span class="keyword">from</span> <span class="string">&#x27;./Button&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Dice <span class="keyword">from</span> <span class="string">&#x27;./Dice&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [num, setNum] = useState(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleRollClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setNum(<span class="number">3</span>); <span class="comment">// num state를 3으로 변경!</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleClearClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setNum(<span class="number">1</span>); <span class="comment">// num state를 1로 변경!</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Button onClick=&#123;handleRollClick&#125;&gt;던지기&lt;/Button&gt;</span><br><span class="line">      &lt;Button onClick=&#123;handleClearClick&#125;&gt;처음부터&lt;/Button&gt;</span><br><span class="line">      &lt;Dice color=<span class="string">&quot;red&quot;</span> num=&#123;num&#125; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>

<h2 id="참조형-State"><a href="#참조형-State" class="headerlink" title="참조형 State"></a>참조형 State</h2><ul>
<li>참조형 state를 활용할 땐 반드시 새로운 참조형 값을 만들어서 <code>state</code>를 변경해야 한다.</li>
<li>간단한 방법은 Spread 문법(<code>...</code>)을 활용하는 것이다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ... </span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [gameHistory, setGameHistory] = useState([]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleRollClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> nextNum = random(<span class="number">6</span>);</span><br><span class="line">    setGameHistory([...gameHistory, nextNum]); <span class="comment">// state가 제대로 변경된다!</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<h2 id="디자인을-적용하는-방법"><a href="#디자인을-적용하는-방법" class="headerlink" title="디자인을 적용하는 방법"></a>디자인을 적용하는 방법</h2><h3 id="이미지-불러오기"><a href="#이미지-불러오기" class="headerlink" title="이미지 불러오기"></a>이미지 불러오기</h3><p>이미지 파일은 <code>import</code> 구문을 통해 불러오고, 불러온 이미지 주소를 <code>src</code> 속성으로 사용하면 된다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> diceImg <span class="keyword">from</span> <span class="string">&#x27;./assets/dice.png&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dice</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;diceImg&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;주사위 이미지&quot;</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>

<h3 id="인라인-스타일"><a href="#인라인-스타일" class="headerlink" title="인라인 스타일"></a>인라인 스타일</h3><ul>
<li>인라인 스타일은 문자열이 아닌 <strong>객체형</strong> 으로 사용한다.</li>
<li>프로퍼티 이름은 CSS 속성 이름으로, 프로퍼티 값은 CSS 속성 값으로 기재한다.</li>
<li><code>borderRadius</code>처럼 대시 기호 없이 <strong>카멜 케이스</strong> 로 써야 한다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> diceImg <span class="keyword">from</span> <span class="string">&#x27;./assets/dice.png&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> style = &#123;</span><br><span class="line">  borderRadius: <span class="string">&#x27;50%&#x27;</span>,</span><br><span class="line">  width: <span class="string">&#x27;120px&#x27;</span>,</span><br><span class="line">  height: <span class="string">&#x27;120px&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dice</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">&#123;style&#125;</span> <span class="attr">src</span>=<span class="string">&#123;diceImg&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;주사위 이미지&quot;</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>

<h3 id="클레스네임-사용하기"><a href="#클레스네임-사용하기" class="headerlink" title="클레스네임 사용하기"></a>클레스네임 사용하기</h3><ul>
<li>CSS 파일에 정의된 클래스명을 <code>className</code> prop에 문자열로 넣어준다.</li>
<li>재사용성을 고려하여 <code>className</code> prop을 부모 컴포넌트에서 받으면 더 좋다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> diceImg <span class="keyword">from</span> <span class="string">&#x27;./assets/dice.png&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./Dice.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dice</span>(<span class="params">&#123; className = <span class="string">&#x27;&#x27;</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> classNames = <span class="string">`Dice <span class="subst">$&#123;className&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">className</span>=<span class="string">&#123;classNames&#125;</span> <span class="attr">src</span>=<span class="string">&#123;diceImg&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;주사위 이미지&quot;</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>

<h2 id="편리하게-클래스네임을-쓰는-방법"><a href="#편리하게-클래스네임을-쓰는-방법" class="headerlink" title="편리하게 클래스네임을 쓰는 방법"></a>편리하게 클래스네임을 쓰는 방법</h2><ul>
<li><code>className</code>을 템플릿 문자열로 사용할 경우 개수가 늘어날수록 알아보기 힘들어진다는 문제점이 있다.</li>
<li>라이브러리를 사용하여 미리 만들어놓은 코드를 이용하여 편하게 개발하는 방법이 있다.</li>
<li><code>classnames</code>라는 라이브러리는 클레스네임에만 집중할 수 있어 읽기 편해진다.</li>
<li><code>classnames</code> 라이브러리는 <code>npm install classnames</code>으로 설치하고 <code>import</code>로 불러와 사용할 수 있다.</li>
</ul>
<p><em><strong>템플릿 문자열을 사용한 예</strong></em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Button</span>(<span class="params">&#123; isPending, color, size, invert, children &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> classNames = <span class="string">`Button <span class="subst">$&#123;isPending ? <span class="string">&#x27;pending&#x27;</span> : <span class="string">&#x27;&#x27;</span>&#125;</span> <span class="subst">$&#123;color&#125;</span> <span class="subst">$&#123;size&#125;</span> <span class="subst">$&#123;invert ? <span class="string">&#x27;invert&#x27;</span> : <span class="string">&#x27;&#x27;</span>&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&#123;classNames&#125;</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Button;</span><br></pre></td></tr></table></figure>

<p><em><strong>배열을 사용한 예</strong></em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Button</span>(<span class="params">&#123; isPending, color, size, invert, children &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> classNames = [</span><br><span class="line">    <span class="string">&#x27;Button&#x27;</span>,</span><br><span class="line">    isPending ? <span class="string">&#x27;pending&#x27;</span> : <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    color,</span><br><span class="line">    size,</span><br><span class="line">    invert ? <span class="string">&#x27;invert&#x27;</span> : <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  ].join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&#123;classNames&#125;</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Button;</span><br></pre></td></tr></table></figure>

<p><em><strong>classnames 라이브러리를 사용한 예</strong></em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> classNames <span class="keyword">from</span> <span class="string">&#x27;classnames&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Button</span>(<span class="params">&#123; isPending, color, size, invert, children &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;button</span><br><span class="line">      className=&#123;classNames(</span><br><span class="line">        <span class="string">&#x27;Button&#x27;</span>,</span><br><span class="line">        isPending &amp;&amp; <span class="string">&#x27;pending&#x27;</span>,</span><br><span class="line">        color,</span><br><span class="line">        size,</span><br><span class="line">        invert &amp;&amp; <span class="string">&#x27;invert&#x27;</span>,</span><br><span class="line">      )&#125;&gt;</span><br><span class="line">     &#123; children &#125;</span><br><span class="line">   &lt;/button &gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Button;</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>코드잇 온라인 강의 React 프론트엔드 개발</p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>overview</tag>
        <tag>JavaScript</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>SCSS 내장 함수</title>
    <url>/2020/11/20/scss-built-in-function/</url>
    <content><![CDATA[<p><a href="https://sass-lang.com/documentation/modules">Sass에서 기본적으로 제공하는 내장함수</a>는 종류가 많다. 필요할 수 있는 함수만 정리.</p>
<a id="more"></a>

<h2 id="색상-RGB-HSL-Opacity-함수"><a href="#색상-RGB-HSL-Opacity-함수" class="headerlink" title="색상(RGB / HSL / Opacity) 함수"></a>색상(RGB / HSL / Opacity) 함수</h2><ul>
<li><strong>mix($color1, $color2)</strong> : 두 개의 색을 섞음</li>
<li><strong>lighten($color, $amount)</strong> : 더 밝은색으로 만듦</li>
<li><strong>darken($color, $amount)</strong> : 더 어두운색을 만듦</li>
<li><strong>saturate($color, $amount)</strong> : 색상의 채도를 올림</li>
<li><strong>desaturate($color, $amount)</strong> : 색상의 채도를 낮춤</li>
<li><strong>grayscale($color)</strong> : 색상을 회색으로 변환</li>
<li><strong>invert($color)</strong> : 색상을 반전</li>
<li><strong>rgba($color, $alpha</strong>) : 색상의 투명도를 변경</li>
<li><strong>opacify($color, $amount) / fade-in($color, $amount)</strong> : 색상을 더 불투명하게 만듦</li>
<li><strong>transparentize($color, $amount) / fade-out($color, $amount)</strong> : 색상을 더 투명하게 만듦</li>
</ul>
<h2 id="문자-String-함수"><a href="#문자-String-함수" class="headerlink" title="문자 (String) 함수"></a>문자 (String) 함수</h2><ul>
<li><strong>unquote($string)</strong> : 문자에서 따옴표를 제거</li>
<li><strong>quote($string)</strong> : 문자에 따옴표를 추가</li>
<li><strong>str-insert($string, $insert, $index)</strong> : 문자의 index번째에 특정 문자를 삽입</li>
<li><strong>str-index($string, $substring)</strong> : 문자에서 특정 문자의 첫 index를 반환</li>
<li><strong>str-slice($string, $start-at, [$end-at])</strong> : 문자에서 특정 문자(몇 번째 글자부터 몇 번째 글자까지)를 추출</li>
<li><strong>to-upper-case($string)</strong> : 문자를 대문자를 변환</li>
<li><strong>to-lower-case($string)</strong> : 문자를 소문자로 변환</li>
</ul>
<h2 id="숫자-Number-함수"><a href="#숫자-Number-함수" class="headerlink" title="숫자 (Number) 함수"></a>숫자 (Number) 함수</h2><ul>
<li><strong>percentage($number)</strong> : 숫자(단위 무시)를 백분율로 변환</li>
<li><strong>round($number)</strong> : 정수로 반올림</li>
<li><strong>ceil($number)</strong> : 정수로 올림</li>
<li><strong>floor($number)</strong> : 정수로 내림(버림)</li>
<li><strong>abs($number)</strong> : 숫자의 절대 값을 반환</li>
<li><strong>min($numbers…)</strong> : 숫자 중 최소 값을 찾음</li>
<li><strong>max($numbers…)</strong> : 숫자 중 최대 값을 찾음</li>
<li><strong>random()</strong> : 0 부터 1 사이의 난수를 반환</li>
</ul>
<h2 id="List-함수"><a href="#List-함수" class="headerlink" title="List 함수"></a>List 함수</h2><p>모든 List 내장 함수는 <strong>기존 List 데이터를 갱신하지 않고 새 List 데이터를 반환</strong> 한다. <strong>Map 데이터에서도 사용 가능</strong> 하다.</p>
<ul>
<li><strong>length($list)</strong> : List의 개수를 반환</li>
<li><strong>nth($list, $n)</strong> : List에서 n번째 값을 반환</li>
<li><strong>set-nth($list, $n, $value)</strong> : List에서 n번째 값을 다른 값으로 변경</li>
<li><strong>join($list1, $list2, [$separator])</strong> : 두 개의 List를 하나로 결합</li>
<li><strong>zip($lists…)</strong> : 여러 List들을 하나의 다차원 List로 결합</li>
<li><strong>index($list, $value)</strong> : List에서 특정 값의 index를 반환</li>
</ul>
<h2 id="Map-함수"><a href="#Map-함수" class="headerlink" title="Map 함수"></a>Map 함수</h2><p>모든 Map 내장 함수는 <strong>기존 Map 데이터를 갱신하지 않고 새 Map 데이터를 반환</strong> 한다.</p>
<ul>
<li><strong>map-get($map, $key)</strong> : Map에서 특정 key의 value를 반환</li>
<li><strong>map-merge($map1, $map2)</strong> : 두 개의 Map을 병합하여 새로운 Map를 만듦</li>
<li><strong>map-keys($map)</strong> : Map에서 모든 key를 List로 반환</li>
<li><strong>map-values($map)</strong> : Map에서 모든 value를 List로 반환</li>
</ul>
<h2 id="관리-Introspection-함수"><a href="#관리-Introspection-함수" class="headerlink" title="관리(Introspection) 함수"></a>관리(Introspection) 함수</h2><ul>
<li><strong>variable-exists(name)</strong> : 변수가 현재 범위에 존재하는지 여부를 반환 (인수는 $없이 변수의 이름만 사용)</li>
<li><strong>unit($number)</strong> : 숫자의 단위를 반환</li>
<li><strong>unitless($number)</strong> : 숫자에 단위가 있는지 여부를 반환</li>
<li><strong>comparable($number1, $number2)</strong> : 두 개의 숫자가 연산 가능한지 여부를 반환</li>
</ul>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://heropy.blog/2018/01/31/sass/">https://heropy.blog/2018/01/31/sass/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>Sass &amp; SCSS</category>
      </categories>
      <tags>
        <tag>function</tag>
        <tag>Sass</tag>
        <tag>SCSS</tag>
        <tag>built-in Function</tag>
      </tags>
  </entry>
  <entry>
    <title>SCSS 함수</title>
    <url>/2020/08/25/scss-function/</url>
    <content><![CDATA[<p>자신의 함수를 정의하여 사용할 수 있다. 함수와 Mixins는 거의 유사하지만, 반환되는 내용이 다르다.</p>
<a id="more"></a>

<h2 id="함수"><a href="#함수" class="headerlink" title="함수"></a>함수</h2><p>함수는 <code>@include</code> 같은 별도의 지시어 없이 사용하기 때문에 내가 지정한 함수와 내장 함수(Built-in Functions)의 이름이 충돌할 수 있기 때문에 내가 지정한 함수에는 별도의 접두어를 붙여주는 것이 좋다.</p>
<blockquote>
<p><strong>내장함수</strong><br>응용 프로그램에 내장되어 있으며 최종 사용자가 액세스 할 수 있는 기능. 이미 색의 빨강 성분을 가져오는 내장 함수로 <code>red( )</code>가 있다. 같은 이름을 사용하면 충돌하기 때문에 별도의 접두어를 붙여서 <code>extract-red( )</code>같은 이름을 사용할 수 있다.</p>
</blockquote>
<br/>

<p><u><em>Mixin과 함수의 차이</em></u></p>
<ul>
<li><strong>Mixin</strong><ul>
<li>지정한 스타일(속성값)을 반환</li>
<li><code>@include</code> 지시어 사용</li>
</ul>
</li>
<li><strong>함수</strong><ul>
<li>연산된 특정 값을 <code>@return</code> 지시어를 통해 반환</li>
<li>함수 이름으로 바로 사용</li>
<li>인수가 없더라도 소괄호를 열고 닫아 주어야 함</li>
</ul>
</li>
</ul>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Mixins</span></span><br><span class="line"><span class="keyword">@mixin</span> 믹스인이름($매개변수) &#123;</span><br><span class="line">  스타일;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Functions</span></span><br><span class="line"><span class="keyword">@function</span> 함수이름($매개변수) &#123;</span><br><span class="line">  <span class="keyword">@return</span> 값</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Mixin</span></span><br><span class="line"><span class="keyword">@include</span> 믹스인이름(인수);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Functions</span></span><br><span class="line">함수이름(인수)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>SCSS</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@function</span> columns(<span class="variable">$number</span>: <span class="number">1</span>, <span class="variable">$columns</span>: <span class="number">12</span>, <span class="variable">$width</span>: <span class="number">1200px</span>)&#123;</span><br><span class="line">  <span class="keyword">@return</span> <span class="variable">$width</span> * (<span class="variable">$number</span>/<span class="variable">$columns</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// columns와 width는 똑같은 인수로 넣을 것이기 때문에</span></span><br><span class="line"><span class="comment">// 굳이 인수로 집어넣지 않는다.</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="variable">$width</span>: <span class="number">1200px</span>;</span><br><span class="line">  <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="attribute">width</span>: columns();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="attribute">width</span>: columns(<span class="number">8</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>)&#123;</span><br><span class="line">    <span class="attribute">width</span>: columns(<span class="number">3</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Compiled CSS</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="comment">/* 총 너비 */</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>)&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="조건과-반복-Control-Directives-Expressions"><a href="#조건과-반복-Control-Directives-Expressions" class="headerlink" title="조건과 반복(Control Directives / Expressions)"></a>조건과 반복(Control Directives / Expressions)</h2><h3 id="if-함수"><a href="#if-함수" class="headerlink" title="if(함수)"></a>if(함수)</h3><p><strong>조건의 값</strong>(<code>true</code>, <code>false</code>)<strong>에 따라 두 개의 표현식 중 하나만 반환</strong>. 조건부 삼항 연산자(conditional ternary operator)와 비슷하다.</p>
<blockquote>
<p>조건의 값이 <code>true</code>면 <code>표현식1</code>을, 조건이 값이 <code>false</code>면 <code>표현식2</code>를 실행한다.</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">if(조건, 표현식<span class="number">1</span>, 표현식<span class="number">2</span>)</span><br></pre></td></tr></table></figure>


<h3 id="if-지시어"><a href="#if-지시어" class="headerlink" title="if (지시어)"></a>if (지시어)</h3><p><code>@if</code> 지시어는 조건에 따른 분기 처리가 가능하며 <strong>if문 (if statements)</strong> 과 유사하다.</p>
<ul>
<li>같이 사용할 수 있는 지시어는 <code>@else</code>, <code>if</code>가 있다.</li>
<li>추가 지시어를 사용하면 더 복잡한 조건문을 작성할 수 있다.</li>
<li>조건에 <code>( )</code>는 생략 가능하다.</li>
<li>조건에는 논리 연산자 and, or, not을 사용할 수 있다.</li>
</ul>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @if</span></span><br><span class="line"><span class="keyword">@if</span> (조건) &#123;</span><br><span class="line">  <span class="comment">/* 조건이 참일 때 구문 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @if @else</span></span><br><span class="line"><span class="keyword">@if</span> (조건) &#123;</span><br><span class="line">  <span class="comment">/* 조건이 참일 때 구문 */</span></span><br><span class="line">&#125; <span class="keyword">@else</span> &#123;</span><br><span class="line">  <span class="comment">/* 조건이 거짓일 때 구문 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @if @else if</span></span><br><span class="line"><span class="keyword">@if</span> (조건<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="comment">/* 조건1이 참일 때 구문 */</span></span><br><span class="line">&#125; <span class="keyword">@else</span> if (조건<span class="number">2</span>) &#123;</span><br><span class="line">  <span class="comment">/* 조건2가 참일 때 구문 */</span></span><br><span class="line">&#125; <span class="keyword">@else</span> &#123;</span><br><span class="line">  <span class="comment">/* 모두 거짓일 때 구문 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p><code>@for</code>는 스타일을 <strong>반복적으로 출력</strong> 한다. <strong>for문과 유사</strong> 하다. <code>:nth-child()</code>에서 유용하게 사용되는 <code>@for</code>는 <code>through</code>를 사용하기를 권장한다.</p>
<ol>
<li><strong>through를 사용하는 형식</strong>: 1부터 해당 숫자까지 반복</li>
<li><strong>to를 사용하는 형식</strong>: 1부터 해당 숫자 직전까지 반복</li>
</ol>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// through</span></span><br><span class="line"><span class="comment">// 종료 만큼 반복</span></span><br><span class="line"><span class="keyword">@for</span> $변수 from 시작 through 종료 &#123;</span><br><span class="line">  <span class="comment">// 반복 내용</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// to</span></span><br><span class="line"><span class="comment">// 종료 직전까지 반복</span></span><br><span class="line"><span class="keyword">@for</span> $변수 from 시작 to 종료 &#123;</span><br><span class="line">  <span class="comment">// 반복 내용</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="each"><a href="#each" class="headerlink" title="each"></a>each</h3><p><code>@each</code>는 <strong>List와 Map 데이터를 반복</strong> 할 때 사용한다. <strong>for in 문과 유사</strong> 하다.</p>
<ol>
<li>매번 반복마다 Index 값이 필요하다면 <code>index( )</code> 내장 함수를 사용할 수 있다.</li>
<li>동시에 여러개의 List 데이터를 반복 처리할 수도 있다. (단, 각 데이터의 Length가 동일해야 함)</li>
<li>Map 데이터를 반복할 겨우 하나의 데이터에 두 개의 변수가 필요하다.</li>
</ol>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@each</span> $변수 in 데이터 &#123;</span><br><span class="line">  <span class="comment">// 반복 내용</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><p><code>@while</code>은 <strong>조건이</strong> <code>false</code><strong>가 평가될 때까지 내용을 반복</strong> 한다. while문과 유사하게 잘못된 조건으로 인해 컴파일 중 무한 루프에 빠질 수 있기 때문에 사용을 권장하지 않음.</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@while</span> 조건 &#123;</span><br><span class="line">  <span class="comment">// 반복 내용</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://heropy.blog/2018/01/31/sass/">https://heropy.blog/2018/01/31/sass/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>Sass &amp; SCSS</category>
      </categories>
      <tags>
        <tag>function</tag>
        <tag>SCSS</tag>
        <tag>SASS</tag>
      </tags>
  </entry>
  <entry>
    <title>SCSS Mixins</title>
    <url>/2020/08/26/scss-mixins/</url>
    <content><![CDATA[<p>스타일 시트 전체에서 <strong>재사용할 CSS 선언 그룹을 정의</strong> 해준다. 약간의 Mixin으로 다양한 스타일을 만들 수 있다.</p>
<ul>
<li>선언하기: @mixin (만들어서)</li>
<li>포함하기: @include (사용하기)</li>
</ul>
<a id="more"></a>

<h2 id="mixin"><a href="#mixin" class="headerlink" title="mixin"></a>mixin</h2><p>Mixin은 선택자를 포함가능하고 상위 요소 참조(&amp; 등)도 가능하다.</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SCSS</span></span><br><span class="line"><span class="keyword">@mixin</span> 믹스인이름 &#123;</span><br><span class="line">  스타일;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sass</span></span><br><span class="line">=믹스인이름</span><br><span class="line">  스타일</span><br></pre></td></tr></table></figure>

<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SCSS</span></span><br><span class="line"><span class="keyword">@mixin</span> large-text &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">22px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">  <span class="attribute">color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sass</span></span><br><span class="line">=large-text</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">22px</span></span><br><span class="line">  font-weight: bold</span><br><span class="line">  font-family: sans-serif</span><br><span class="line">  color: orange</span><br></pre></td></tr></table></figure>


<h2 id="include"><a href="#include" class="headerlink" title="@include"></a>@include</h2><p>선언된 Mixin을 사용하기 위해서는 <code>@include</code>가 필요하다.</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SCSS</span></span><br><span class="line"><span class="keyword">@include</span> 믹스인이름;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sass</span></span><br><span class="line">+믹스인이름</span><br></pre></td></tr></table></figure>

<blockquote>
<p>SCSS</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SCSS</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> large-text;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> large-text;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sass</span></span><br><span class="line"><span class="selector-tag">h1</span></span><br><span class="line">  +large-text</span><br><span class="line"><span class="selector-tag">div</span></span><br><span class="line">  +large-text</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Compiled to CSS</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">22px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">  <span class="attribute">color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">22px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">  <span class="attribute">color</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="인수-Arguments"><a href="#인수-Arguments" class="headerlink" title="인수 (Arguments)"></a>인수 (Arguments)</h2><p>Minxin은 함수처럼 인수(Arguments)를 가질 수 있으며, 하나의 Mixin으로 다양한 결과를 만들 수 있다.</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SCSS</span></span><br><span class="line"><span class="keyword">@mixin</span> 믹스인이름($매개변수) &#123;</span><br><span class="line">  스타일;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@include</span> 믹스인이름(인수);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sass</span></span><br><span class="line">=믹스인이름($매개변수)</span><br><span class="line">  스타일</span><br><span class="line">+믹스인이름(인수)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>SCSS</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> dash-line(<span class="variable">$width</span>, <span class="variable">$color</span>) &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="variable">$width</span> dashed <span class="variable">$color</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box1</span> &#123; <span class="keyword">@include</span> dash-line(<span class="number">1px</span>, black); &#125;</span><br><span class="line"><span class="selector-class">.box2</span> &#123; <span class="keyword">@include</span> dash-line(<span class="number">2px</span>, orange); &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Compiled to CSS</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> dashed black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> dashed orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="인수의-기본값-설정"><a href="#인수의-기본값-설정" class="headerlink" title="인수의 기본값 설정"></a>인수의 기본값 설정</h3><p>인수는 기본값을 가질 수 있다.<code>@include</code> 포함 단계에서 별도의 인수가 전달되지 않으면 기본값이 사용된다.</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> 믹스인이름($매개변수: 기본값) &#123;</span><br><span class="line">  스타일;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>SCSS</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> dash-line(<span class="variable">$width</span>: <span class="number">1px</span>, <span class="variable">$color</span>: black) &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="variable">$width</span> dashed <span class="variable">$color</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box1</span> &#123; <span class="keyword">@include</span> dash-line; &#125;</span><br><span class="line"><span class="selector-class">.box2</span> &#123; <span class="keyword">@include</span> dash-line(<span class="number">2px</span>); &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Compiled to CSS</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> dashed black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> dashed black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="키워드-인수"><a href="#키워드-인수" class="headerlink" title="키워드 인수"></a>키워드 인수</h3><p>Mixin에 전달할 인수를 입력할 때 <strong>명시적으로 키워드(변수)를 입력하여 작성</strong> 할 수 있다. 별도의 입력 순서를 필요로 하지 않기 때문에 편리하지만 작성하지 않은 인수가 적용될 수 있도록 기본값을 설정해주는 것이 좋다.</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> 믹스인이름($매개변수<span class="attribute">A</span>: 기본값, $매개변수<span class="attribute">B</span>: 기본값) &#123;</span><br><span class="line">  스타일;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@include</span> 믹스인이름($매개변수<span class="attribute">B</span>: 인수);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>SCSS</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> position(</span><br><span class="line">  <span class="variable">$p</span>: absolute,</span><br><span class="line">  <span class="variable">$t</span>: null,</span><br><span class="line">  <span class="variable">$b</span>: null,</span><br><span class="line">  <span class="variable">$l</span>: null,</span><br><span class="line">  <span class="variable">$r</span>: null</span><br><span class="line">) &#123;</span><br><span class="line">  <span class="attribute">position</span>: <span class="variable">$p</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="variable">$t</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="variable">$b</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="variable">$l</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="variable">$r</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.absolute</span> &#123;</span><br><span class="line">  <span class="comment">// 키워드 인수로 설정할 값만 전달</span></span><br><span class="line">  <span class="keyword">@include</span> position(<span class="variable">$b</span>: <span class="number">10px</span>, <span class="variable">$r</span>: <span class="number">20px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fixed</span> &#123;</span><br><span class="line">  <span class="comment">// 인수가 많아짐에 따라 가독성을 확보하기 위해 줄바꿈</span></span><br><span class="line">  <span class="keyword">@include</span> position(</span><br><span class="line">    fixed,</span><br><span class="line">    <span class="variable">$t</span>: <span class="number">30px</span>,</span><br><span class="line">    <span class="variable">$r</span>: <span class="number">40px</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Compiled to CSS</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.absolute</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fixed</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="가변-인수-Variable-Arguments"><a href="#가변-인수-Variable-Arguments" class="headerlink" title="가변 인수(Variable Arguments)"></a>가변 인수(Variable Arguments)</h3><p><strong>입력할 인수의 개수가 불확실</strong> 할 때 <strong>가변인수</strong> 를 사용한다. 가변인수는 매개변수 뒤에 <code>...</code>을 붙여준다.</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> 믹스인이름($매개변수...) &#123;</span><br><span class="line">  스타일;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@include</span> 믹스인이름(인수A, 인수B, 인수C);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>SCSS</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 인수를 순서대로 하나씩 전달 받다가,</span></span><br><span class="line"><span class="comment">// 3번째 매개변수($bg-values)는 인수의 개수에 상관없이 받음</span></span><br><span class="line"><span class="keyword">@mixin</span> bg(<span class="variable">$width</span>, <span class="variable">$height</span>, <span class="variable">$bg-values</span>...) &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$width</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">$height</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="variable">$bg-values</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="comment">// 위의 Mixin(bg) 설정에 맞게 인수를 순서대로 전달하다가</span></span><br><span class="line">  <span class="comment">//3번째 이후부터는 개수에 상관없이 전달</span></span><br><span class="line">  <span class="keyword">@include</span> bg(</span><br><span class="line">    <span class="number">100px</span>,</span><br><span class="line">    <span class="number">200px</span>,</span><br><span class="line">    url(<span class="string">&quot;/images/a.png&quot;</span>) no-repeat <span class="number">10px</span> <span class="number">20px</span>,</span><br><span class="line">    url(<span class="string">&quot;/images/b.png&quot;</span>) no-repeat,</span><br><span class="line">    url(<span class="string">&quot;/images/c.png&quot;</span>)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Compiled to CSS</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;/images/a.png&quot;</span>) no-repeat <span class="number">10px</span> <span class="number">20px</span>,</span><br><span class="line">              <span class="built_in">url</span>(<span class="string">&quot;/images/b.png&quot;</span>) no-repeat,</span><br><span class="line">              <span class="built_in">url</span>(<span class="string">&quot;/images/c.png&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>가변 인수를 전달할 값으로 사용한 경우</em></p>
<blockquote>
<p>SCSS</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> font(</span><br><span class="line">  <span class="variable">$style</span>: normal,</span><br><span class="line">  <span class="variable">$weight</span>: normal,</span><br><span class="line">  <span class="variable">$size</span>: <span class="number">16px</span>,</span><br><span class="line">  <span class="variable">$family</span>: sans-serif</span><br><span class="line">) &#123;</span><br><span class="line">  <span class="attribute">font</span>: &#123;</span><br><span class="line">    style: <span class="variable">$style</span>;</span><br><span class="line">    weight: <span class="variable">$weight</span>;</span><br><span class="line">    size: <span class="variable">$size</span>;</span><br><span class="line">    family: <span class="variable">$family</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="comment">// 매개변수 순서와 개수에 맞게 전달</span></span><br><span class="line">  <span class="variable">$font-values</span>: italic, bold, <span class="number">16px</span>, sans-serif;</span><br><span class="line">  <span class="keyword">@include</span> font(<span class="variable">$font-values</span>...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="comment">// 필요한 값만 키워드 인수로 변수에 담아 전달</span></span><br><span class="line">  <span class="variable">$font-values</span>: (style: italic, size: <span class="number">22px</span>);</span><br><span class="line">  <span class="keyword">@include</span> font(<span class="variable">$font-values</span>...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="comment">// 필요한 값만 키워드 인수로 전달</span></span><br><span class="line">  <span class="keyword">@include</span> font((<span class="attribute">weight</span>: <span class="number">900</span>, <span class="attribute">family</span>: monospace)...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Compiled to CSS</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">font-style</span>: italic;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">font-style</span>: italic;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">22px</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">900</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: monospace;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="content"><a href="#content" class="headerlink" title="content"></a>content</h3><p>선언된 Mixin에 <code>@content</code>가 포함되어 있으면 해당 부분에 원하는 스타일 블록을 전달할 수 있다. 이 방식으로 <strong>Mixin이 가지고 있는 기능에 선택자나 속성을 추가</strong> 할 수 있다. Mixin에게 전달된 스타일 블록은 Mixin의 범위가 아니라 스타일 블록이 정의된 범위에서 평가된다. Mixin의 매개변수는 전달된 스타일 블록 안에서 사용되지 않고, <strong>전역 값으로 해석</strong> 된다.</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> 믹스인이름() &#123;</span><br><span class="line">  스타일;</span><br><span class="line">  <span class="keyword">@content</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@include</span> 믹스인이름() &#123;</span><br><span class="line">  <span class="comment">// 스타일 블록</span></span><br><span class="line">  스타일;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>SCSS</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$color</span>: red;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@mixin</span> colors(<span class="variable">$color</span>: blue) &#123;</span><br><span class="line">  <span class="comment">// Mixin의 범위</span></span><br><span class="line">  <span class="keyword">@content</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">$color</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="variable">$color</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> colors() &#123;</span><br><span class="line">    <span class="comment">// 스타일 블록이 정의된 범위</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$color</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Compiled to CSS</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">  <span class="attribute">border-color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="확장-Extend"><a href="#확장-Extend" class="headerlink" title="확장 (Extend)"></a>확장 (Extend)</h2><p><strong>특정 선택자가 다른 선택자의 모든 스타일을 가져야 하는 경우</strong> 에 확장 기능을 사용할 수 있지만 다음과 같은 문제를 고려해야 한다.</p>
<ul>
<li>내 현재 선택자가 어디에 첨부될 것인가?</li>
<li>원하지 않는 부작용이 초래될 수 있는가?</li>
<li>한 번의 확장으로 얼마나 큰 CSS가 생성되는가?</li>
</ul>
<p>이러한 이유로 확장은 권하지 않으며 <strong>Mixin을 대체 기능으로 사용</strong> 하는 것이 좋다.</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@extend</span> 선택자;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>SCSS</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn-danger</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> .btn;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Compiled to CSS</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.btn</span>, <span class="selector-class">.btn-danger</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn-danger</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://heropy.blog/2018/01/31/sass/">https://heropy.blog/2018/01/31/sass/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>Sass &amp; SCSS</category>
      </categories>
      <tags>
        <tag>SCSS</tag>
        <tag>SASS</tag>
        <tag>mixins</tag>
      </tags>
  </entry>
  <entry>
    <title>mySQL 데이터 분석</title>
    <url>/2022/02/07/sql-data-analysis/</url>
    <content><![CDATA[<h2 id="집계함수-Aggregate-Function"><a href="#집계함수-Aggregate-Function" class="headerlink" title="집계함수 (Aggregate Function)"></a>집계함수 (Aggregate Function)</h2><ul>
<li>어떤 컬럼의 값들을 대상으로 원하는 특징값을 구해주는 함수.</li>
<li>특정 컬럼의 여러 row의 값들을 동시에 고려해서 실행되는 함수.</li>
<li>그루핑을 통해 생성된 각 그룹의 수치적인 특성을 구하는 함수.</li>
</ul>
<a id="more"></a>

<ul>
<li><p><code>COUNT</code>: null의 갯수는 제외하고 조회한다.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(email) <span class="keyword">FROM</span> main.member;</span><br><span class="line"><span class="keyword">SELECT</span> height <span class="keyword">FROM</span> main.member;</span><br></pre></td></tr></table></figure></li>
<li><p><code>*</code>: 전체 row 수를 조회해준다.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> main.member;</span><br></pre></td></tr></table></figure></li>
<li><p><code>MAX</code>: 최댓값을 구한다.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(height) <span class="keyword">FROM</span> main.member; </span><br></pre></td></tr></table></figure></li>
<li><p><code>MIN</code>: 최솟값을 구한다.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(height) <span class="keyword">FROM</span> main.member; </span><br></pre></td></tr></table></figure></li>
<li><p><code>AVG</code>: 평균값을 구한다. NULL은 제외하여 평군을 구함.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(height) <span class="keyword">FROM</span> main.member; </span><br></pre></td></tr></table></figure></li>
<li><p><code>SUM</code>: 합계 함수</p>
</li>
<li><p><code>STD</code>: 표준편차 함수</p>
</li>
</ul>
<h2 id="산술함수-Mathematical-Function"><a href="#산술함수-Mathematical-Function" class="headerlink" title="산술함수 (Mathematical Function)"></a>산술함수 (Mathematical Function)</h2><blockquote>
<p>특정 컬럼의 각 row의 값마다 실행되는 함수</p>
</blockquote>
<ul>
<li><code>ABS</code>: 절대값을 구하는 함수</li>
<li><code>SQRT</code>: 제곱근을 구하는 함수</li>
<li><code>CEIL</code>: 올림 함수</li>
<li><code>FLOOR</code>: 내림 함수</li>
<li><code>ROUND</code>: 반올림 함수</li>
<li><a href="https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html">참고</a></li>
</ul>
<h2 id="NULL을-다루는-방법"><a href="#NULL을-다루는-방법" class="headerlink" title="NULL을 다루는 방법"></a>NULL을 다루는 방법</h2><ul>
<li>NULL이 있는 데이터만 확인하고 싶은 경우<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> main.member <span class="keyword">WHERE</span> address <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure></li>
<li>NULL이 없는 데이터만 확인하고 싶은 경우<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> main.member <span class="keyword">WHERE</span> address <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure></li>
<li>여러 속성중 특정 값 하나라도 NULL이 있는 데이터를 보고 싶은 경우<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> main.member</span><br><span class="line">    <span class="keyword">WHERE</span> address <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line">        <span class="keyword">OR</span> weight <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line">        <span class="keyword">OR</span> height <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure></li>
<li>NULL을 다른 단어로 변경하고 싶은 경우<ul>
<li>값이 있으면 그 값 그대로, NULL이면 두번째 인자가 출력된다.<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="built_in">COALESCE</span>(height, <span class="string">&#x27;###&#x27;</span>),</span><br><span class="line">    <span class="built_in">COALESCE</span>(weight, <span class="string">&#x27;---&#x27;</span>),</span><br><span class="line">    <span class="built_in">COALESCE</span>(address, <span class="string">&#x27;@@@&#x27;</span>),</span><br><span class="line"><span class="keyword">FROM</span> main.member;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="NULL에-대해-알아야-하는-사실"><a href="#NULL에-대해-알아야-하는-사실" class="headerlink" title="NULL에 대해 알아야 하는 사실"></a>NULL에 대해 알아야 하는 사실</h3><ul>
<li>IS NULL과 =NULL은 다르다.<ul>
<li>NULL은 어떠한 값이 아니기 때문에 등호를 사용하여 비교할 수 있는 대상이 아니다. 그래서 TRUE일 수가 없다.</li>
</ul>
</li>
<li>NULL은 어떤 연산을 해도 NULL이다.</li>
<li>컬럼끼리 계산할 때 하나라도 NULL이 있으면 결과는 NULL이다.</li>
</ul>
<h2 id="이상한-값을-제외하고-싶다면"><a href="#이상한-값을-제외하고-싶다면" class="headerlink" title="이상한 값을 제외하고 싶다면?"></a>이상한 값을 제외하고 싶다면?</h2><ul>
<li>제대로 필터링하지 않으면 20, 30대 타겟인 데이터베이스에 음수, 300 등의 이상한 숫자가 생길 수 있다.<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(age) <span class="keyword">FROM</span> main.member <span class="keyword">WHERE</span> age <span class="keyword">BETWEEN</span> <span class="number">5</span> <span class="keyword">AND</span> <span class="number">100</span>;</span><br></pre></td></tr></table></figure></li>
<li>이상한 주소를 입력한 회원들이 있을 수 있다.<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> main.member <span class="keyword">WHERE</span> address <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">&#x27;%호&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="컬럼에-alias-붙이기"><a href="#컬럼에-alias-붙이기" class="headerlink" title="컬럼에 alias 붙이기"></a>컬럼에 alias 붙이기</h2><ul>
<li>띄어쓰기(스페이스)가 포함된 alias에는 따옴표를 붙여주어야 한다. 그렇지 않으면 스페이스를 기준으로 구문 해석이 이루어지는 SQL 특성상 에러가 발생한다.</li>
</ul>
<h3 id="as"><a href="#as" class="headerlink" title="as"></a>as</h3><ul>
<li><code>AS</code>를 붙여 별칭을 붙인다.</li>
<li><code>AS</code>를 생략하여 스페이스로 구분할 수 있지만, 가독성을 위해 <code>as</code>를 사용하는 것이 좋다.<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  email 이메일,</span><br><span class="line">  height <span class="keyword">AS</span> 키,</span><br><span class="line">  weight <span class="keyword">AS</span> 몸무게,</span><br><span class="line">  weight <span class="operator">/</span> ((height<span class="operator">/</span><span class="number">100</span>) <span class="operator">*</span> (height<span class="operator">/</span><span class="number">100</span>)) <span class="keyword">AS</span> BMI</span><br><span class="line"><span class="keyword">FROM</span> main.member;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h3><ul>
<li>concatenate의 줄임말로 연결하다의 의미이다.</li>
<li>괄호 안에 있는 것들을 이어서 하나의 컬럼으로 만들어준다.<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  email 이메일,</span><br><span class="line">  CONCAT(height, <span class="string">&#x27;cm&#x27;</span>, <span class="string">&#x27;, &#x27;</span>, weight, <span class="string">&#x27;kg&#x27;</span>) <span class="keyword">AS</span> <span class="string">&#x27;키와 몸무게&#x27;</span>,</span><br><span class="line">  weight <span class="operator">/</span> ((height<span class="operator">/</span><span class="number">100</span>) <span class="operator">*</span> (height<span class="operator">/</span><span class="number">100</span>)) <span class="keyword">AS</span> BMI</span><br><span class="line"><span class="keyword">FROM</span> main.member;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="컬럼의-값-변환해서-보기"><a href="#컬럼의-값-변환해서-보기" class="headerlink" title="컬럼의 값 변환해서 보기"></a>컬럼의 값 변환해서 보기</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  email 이메일,</span><br><span class="line">  CONCAT(height, <span class="string">&#x27;cm&#x27;</span>, <span class="string">&#x27;, &#x27;</span>, weight, <span class="string">&#x27;kg&#x27;</span>) <span class="keyword">AS</span> <span class="string">&#x27;키와 몸무게&#x27;</span>,</span><br><span class="line">  weight <span class="operator">/</span> ((height<span class="operator">/</span><span class="number">100</span>) <span class="operator">*</span> (height<span class="operator">/</span><span class="number">100</span>)) <span class="keyword">AS</span> BMI,</span><br><span class="line">  </span><br><span class="line">(<span class="keyword">CASE</span></span><br><span class="line">  <span class="keyword">WHEN</span> weight <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="keyword">OR</span> height <span class="keyword">is</span> <span class="keyword">NULL</span> <span class="keyword">THEN</span> <span class="string">&#x27;비만 여부 알 수 없음&#x27;</span></span><br><span class="line">  <span class="keyword">WHEN</span> weight <span class="operator">/</span> ((height<span class="operator">/</span><span class="number">100</span>) <span class="operator">*</span> (height<span class="operator">/</span><span class="number">100</span>)) <span class="operator">&gt;=</span> <span class="number">25</span> <span class="keyword">THEN</span> <span class="string">&#x27;과체중 또는 비만&#x27;</span></span><br><span class="line">  <span class="keyword">WHEN</span> weight <span class="operator">/</span> ((height<span class="operator">/</span><span class="number">100</span>) <span class="operator">*</span> (height<span class="operator">/</span><span class="number">100</span>)) <span class="operator">&gt;=</span> <span class="number">18.5</span></span><br><span class="line">    <span class="keyword">AND</span> weight <span class="operator">/</span> ((height<span class="operator">/</span><span class="number">100</span>) <span class="operator">*</span> (height<span class="operator">/</span><span class="number">100</span>)) <span class="operator">&lt;</span> <span class="number">25</span></span><br><span class="line">    <span class="keyword">THEN</span> <span class="string">&#x27;정상&#x27;</span></span><br><span class="line">  <span class="keyword">ELSE</span> <span class="string">&#x27;저체중&#x27;</span></span><br><span class="line"><span class="keyword">END</span>) <span class="keyword">AS</span> obesity_check</span><br><span class="line">  </span><br><span class="line"><span class="keyword">FROM</span> main.member</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> obesity_check <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure>

<h2 id="CASE-함수의-종류"><a href="#CASE-함수의-종류" class="headerlink" title="CASE 함수의 종류"></a>CASE 함수의 종류</h2><h3 id="단순-CASE-함수"><a href="#단순-CASE-함수" class="headerlink" title="단순 CASE 함수"></a>단순 CASE 함수</h3><ul>
<li>CASE 문 바로 뒤에 컬럼 이름을 쓰고, 그 컬럼의 값과 어떤 값이 같은지(=)를 비교하는 CASE 함수.</li>
<li><code>ELSE 컬럼이름</code>: 해당 컬럼에 있던 모든 값을 그대로 보여달라는 의미.</li>
<li>등호 연산(=)만 가능하다.<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CASE</span> 컬럼 이름 </span><br><span class="line">  <span class="keyword">WHEN</span> 값 <span class="keyword">THEN</span> 값 </span><br><span class="line">  <span class="keyword">WHEN</span> 값 <span class="keyword">THEN</span> 값</span><br><span class="line">  <span class="keyword">WHEN</span> 값 <span class="keyword">THEN</span> 값</span><br><span class="line">  <span class="keyword">ELSE</span> 값</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="검색-CASE-함수"><a href="#검색-CASE-함수" class="headerlink" title="검색 CASE 함수"></a>검색 CASE 함수</h3><ul>
<li>일단 TRUE인 조건을 만나게되면 거기에 있는 THEN 뒤의 값을 돌려주고, CASE 함수는 종료된다.</li>
<li>좀더 다양한 형태의 조건을 사용할 수 있다.<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CASE</span></span><br><span class="line">  <span class="keyword">WHEN</span> 조건<span class="number">1</span> <span class="keyword">THEN</span> 값</span><br><span class="line">  <span class="keyword">WHEN</span> 조건<span class="number">2</span> <span class="keyword">THEN</span> 값 </span><br><span class="line">  <span class="keyword">WHEN</span> 조건<span class="number">3</span> <span class="keyword">THEN</span> 값 </span><br><span class="line">  <span class="keyword">ELSE</span> 값</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="NULL을-다른-값으로-변환하는-다양한-함수"><a href="#NULL을-다른-값으로-변환하는-다양한-함수" class="headerlink" title="NULL을 다른 값으로 변환하는 다양한 함수"></a>NULL을 다른 값으로 변환하는 다양한 함수</h2><h3 id="COALESCE-함수"><a href="#COALESCE-함수" class="headerlink" title="COALESCE 함수"></a>COALESCE 함수</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COALESCE</span>(height, <span class="string">&#x27;N/A&#x27;</span>) <span class="keyword">FROM</span> main.member;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COALESCE</span>(height, weight <span class="operator">*</span> <span class="number">2.3</span>, <span class="string">&#x27;N/A&#x27;</span>) <span class="keyword">FROM</span> main.member;</span><br></pre></td></tr></table></figure>

<h3 id="IFNULL-함수"><a href="#IFNULL-함수" class="headerlink" title="IFNULL 함수"></a>IFNULL 함수</h3><p>첫 번 인자가 NULL인 경우에는, 두 번째 인자를 표시하고 NULL이 아니면 해당 값을 그대로 표현</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> IFNULL(height, <span class="string">&#x27;N/A&#x27;</span>) <span class="keyword">FROM</span> main.member;</span><br></pre></td></tr></table></figure>

<h3 id="IF-함수"><a href="#IF-함수" class="headerlink" title="IF 함수"></a>IF 함수</h3><p>가장 첫 번째 인자로 어떤 조건식이 온다. 만약 그 조건식의 결과가 True라면 두 번째 인자를 리턴하고, False라면 세 번째 인자를 리턴한다.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> IF(height <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>, height, <span class="string">&#x27;N/A&#x27;</span>) <span class="keyword">FROM</span> main.member;</span><br></pre></td></tr></table></figure>

<h3 id="CASE-함수"><a href="#CASE-함수" class="headerlink" title="CASE 함수"></a>CASE 함수</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">CASE</span></span><br><span class="line">    <span class="keyword">WHEN</span> height <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">THEN</span> height</span><br><span class="line">    <span class="keyword">ELSE</span> <span class="string">&#x27;N/A&#x27;</span></span><br><span class="line">  <span class="keyword">END</span></span><br><span class="line"><span class="keyword">FROM</span> main.member;</span><br></pre></td></tr></table></figure>

<h2 id="고유값만-보기"><a href="#고유값만-보기" class="headerlink" title="고유값만 보기"></a>고유값만 보기</h2><ul>
<li><code>DISTINCT</code>: 고유한 값<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>(gender) <span class="keyword">FROM</span> main.member;</span><br></pre></td></tr></table></figure></li>
<li><code>SUBSTRING</code>: 문자열의 일부를 추출하는 함수. 인수에는 몇번째 문자열부터 몇글자의 문자열을 추출할 것인가.<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>(<span class="built_in">SUBSTRING</span>(address, <span class="number">1</span>, <span class="number">2</span>)) <span class="keyword">FROM</span> main.member;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="고유값-개수-구하기"><a href="#고유값-개수-구하기" class="headerlink" title="고유값 개수 구하기"></a>고유값 개수 구하기</h2><ul>
<li><code>COUNT</code> 함수는 <code>DISTINCT</code>와도 함께 사용할 수 있다.<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span>(gender)) <span class="keyword">FROM</span> main.member;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span>(<span class="built_in">SUBSTRING</span>(address, <span class="number">1</span>, <span class="number">2</span>))) <span class="keyword">FROM</span> main.member;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="문자열-관련-함수들"><a href="#문자열-관련-함수들" class="headerlink" title="문자열 관련 함수들"></a>문자열 관련 함수들</h2><h3 id="LENGTH-함수"><a href="#LENGTH-함수" class="headerlink" title="LENGTH 함수"></a>LENGTH 함수</h3><p>문자열의 길이를 구한다.</p>
<h3 id="UPPER-LOWER-함수"><a href="#UPPER-LOWER-함수" class="headerlink" title="UPPER, LOWER 함수"></a>UPPER, LOWER 함수</h3><ul>
<li>UPPER: 문자열을 모두 대문자로 바꿔서 보여준다.</li>
<li>LOWER: 문자열을 모두 소문자로 바꿔서 보여준다.</li>
</ul>
<h3 id="LPAD-RPAD-함수"><a href="#LPAD-RPAD-함수" class="headerlink" title="LPAD, RPAD 함수"></a>LPAD, RPAD 함수</h3><ul>
<li>문자열의 왼쪽 혹은 오른쪽을 특정 문자열로 채워주는 함수.</li>
<li>숫자이더라도 문자열 함수 안에 인자로 넣어주면 자동으로 문자열로 형변환이 되어 계산됨.</li>
<li>LPAD: LEFT + padding</li>
<li>RPAD: RIGHT + padding</li>
<li><code>LPAD(age, 10, &#39;0&#39;)</code>: age 컬럼의 값을 왼쪽에 문자 9을 붙여서 총 10자리로 만들어라는 의미.<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> email, LPAD(age, <span class="number">10</span>, <span class="string">&#x27;0&#x27;</span>) <span class="keyword">FROM</span> main.member;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="TRIM-LTRIM-RTRIM-함수"><a href="#TRIM-LTRIM-RTRIM-함수" class="headerlink" title="TRIM, LTRIM, RTRIM 함수"></a>TRIM, LTRIM, RTRIM 함수</h3><ul>
<li>문자열에 존재하는 공백을 제거하는 함수.</li>
<li><code>LTRIM</code>: 왼쪽 공백 삭제</li>
<li><code>RTRIM</code>: 오른쪽 공백 삭제</li>
<li><code>TRIM</code>: 왼쪽, 오른쪽 양쪽 다 공백 삭제</li>
</ul>
<h2 id="그루핑해서-보기"><a href="#그루핑해서-보기" class="headerlink" title="그루핑해서 보기"></a>그루핑해서 보기</h2><ul>
<li><code>GROUP BY</code>를 사용하면 각 그룹에 대해서 각각 실행된다.</li>
<li>각각의 row는 하나의 그룹을 나타낸다.<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> gender <span class="keyword">FROM</span> main.member <span class="keyword">GROUP</span> <span class="keyword">BY</span> gender;</span><br></pre></td></tr></table></figure></li>
<li>COUNT 함수를 사용했을 때 그룹별 각각 조회한다.<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> gender, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> main.member <span class="keyword">GROUP</span> <span class="keyword">BY</span> gender;</span><br></pre></td></tr></table></figure></li>
<li>SUBSTRING 함수와 함께 사용할 수 있다. → 지역별로 분리한다.<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="built_in">SUBSTRING</span>(address, <span class="number">1</span>, <span class="number">2</span>) <span class="keyword">as</span> regin,</span><br><span class="line">  <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> main.member</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="built_in">SUBSTRING</span>(address, <span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure></li>
<li>여러개의 컬럼을 그루핑할 수도 있다. → 같은 지역이라도 성별로 분리할 수도 있음.<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="built_in">SUBSTRING</span>(address, <span class="number">1</span>, <span class="number">2</span>) <span class="keyword">as</span> regin,</span><br><span class="line">  <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> main.member</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  <span class="built_in">SUBSTRING</span>(address, <span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">  gender;</span><br></pre></td></tr></table></figure></li>
<li>주요 그룹들만 보고 싶을 때 HAVING을 사용한다. → 서울 지역 남성을 보고 싶을 때<blockquote>
<p>where: 테이블에서 맨 처음 row들을 조회할 때 조건을 설정하기 위한 구문<br>having: 이미 조회된 row들을 그룹핑했을 때 생성된 그룹들중에 다시 필터링을 할 때 사용하는 구문</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="built_in">SUBSTRING</span>(address, <span class="number">1</span>, <span class="number">2</span>) <span class="keyword">as</span> regin,</span><br><span class="line">  <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> main.member</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  <span class="built_in">SUBSTRING</span>(address, <span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">  gender</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">  region <span class="operator">=</span> <span class="string">&#x27;서울&#x27;</span></span><br><span class="line">  <span class="keyword">AND</span> GENDER <span class="operator">=</span> <span class="string">&#x27;m&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
<li>NULL값도 노출하기 때문에 값이 있는 region값만 정렬하고 싶으면 IS NOT NULL을 사용한다.<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="built_in">SUBSTRING</span>(address, <span class="number">1</span>, <span class="number">2</span>) <span class="keyword">as</span> regin,</span><br><span class="line">  <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> main.member</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  <span class="built_in">SUBSTRING</span>(address, <span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">  gender</span><br><span class="line"><span class="keyword">HAVING</span> region <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  region <span class="keyword">ASC</span>,</span><br><span class="line">  gender <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="GROUP-BY를-쓸-때-지켜야-하는-규칙"><a href="#GROUP-BY를-쓸-때-지켜야-하는-규칙" class="headerlink" title="GROUP BY를 쓸 때 지켜야 하는 규칙"></a>GROUP BY를 쓸 때 지켜야 하는 규칙</h3><ul>
<li>SELECT절에는 GROUP BY 뒤에서 사용한 컬럼 또는 COUNT, MAX 같은 집계 함수만 사용할 수 있다.</li>
<li>반대로, GROUP BY 뒤에 쓰지 않은 컬럼 이름을 SELECT절 뒤에 사용할 수 없다.</li>
</ul>
<p><em><strong>오류 예시</strong></em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUBSTRING</span>(address, <span class="number">1</span>, <span class="number">2</span>) <span class="keyword">AS</span> region, gender, age, <span class="built_in">COUNT</span> (<span class="operator">*</span>) <span class="keyword">FROM</span> main.member</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="built_in">SUBSTRING</span>(address, <span class="number">1</span>, <span class="number">2</span>), gender</span><br><span class="line"><span class="keyword">HAVING</span> region <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> region <span class="keyword">ASC</span>, gender <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<p><em><strong>정상 예시</strong></em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUBSTRING</span>(address, <span class="number">1</span>, <span class="number">2</span>) <span class="keyword">AS</span> region, gender, <span class="built_in">AVG</span>(age), <span class="built_in">COUNT</span> (<span class="operator">*</span>) <span class="keyword">FROM</span> main.member</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="built_in">SUBSTRING</span>(address, <span class="number">1</span>, <span class="number">2</span>), gender</span><br><span class="line"><span class="keyword">HAVING</span> region <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> region <span class="keyword">ASC</span>, gender <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<h3 id="WITH-ROLLUP"><a href="#WITH-ROLLUP" class="headerlink" title="WITH ROLLUP"></a>WITH ROLLUP</h3><ul>
<li>세부 그룹들을 좀 더 큰 단위의 그룹으로 중간중간에 합쳐준다.</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUBSTRING</span>(address, <span class="number">1</span>, <span class="number">2</span>) <span class="keyword">as</span> region, gender, <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> main.member</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="built_in">SUBSTRING</span>(address, <span class="number">1</span>, <span class="number">2</span>), gender <span class="keyword">WITH</span> <span class="keyword">ROLLUP</span></span><br><span class="line"><span class="keyword">HAVING</span> region <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> region <span class="keyword">ASC</span>, gender <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<ol>
<li>GROUP BY 뒤 기준 순서에 따라 WITH ROLLUP의 결과도 달라진다.</li>
<li>NULL임을 나타내기 위해 쓰인 NULL vs. 부분 총계를 나타내기 위해 쓰인 NULL</li>
</ol>
<h2 id="SELECT문의-실행-순서"><a href="#SELECT문의-실행-순서" class="headerlink" title="SELECT문의 실행 순서"></a>SELECT문의 실행 순서</h2><h3 id="앞에-나와야-하는-순서"><a href="#앞에-나와야-하는-순서" class="headerlink" title="앞에 나와야 하는 순서"></a>앞에 나와야 하는 순서</h3><ol>
<li>SELECT</li>
<li>FROM</li>
<li>WHERE</li>
<li>GROUP BY</li>
<li>HAVING</li>
<li>ORDER BY</li>
<li>LIMIT</li>
</ol>
<h3 id="해석-및-실행되는-순서"><a href="#해석-및-실행되는-순서" class="headerlink" title="해석 및 실행되는 순서"></a>해석 및 실행되는 순서</h3><ol>
<li>FROM: 어느 테이블을 대상으로 할 것인지를 먼저 결정한다.</li>
<li>WHERE: 해당 테이블에서 특정 조건(들)을 만족하는 row들만 선별한다.</li>
<li>GROUP BY: row들을 그루핑 기준대로 그루핑된다. 하나의 그룹은 하나의 row로 표현한다.</li>
<li>HAVING: 그루핑 작업 후 생성된 여러 그룹들 중에서, 특정 조건(들)을 만족하는 그룹들만 선별한다.</li>
<li>SELECT: 모든 컬럼 또는 특정 컬럼들을 조회한다.</li>
<li>ORDER BY: 각 row를 특정 기준에 따라서 정렬한다.</li>
<li>LIMIT: 이전 단계까지 조회된 row들 중 일부 row들만을 추린다.</li>
</ol>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>코드잇 온라인 강의 개발자를 위한 SQL 데이터베이스</p>
</blockquote>
]]></content>
      <categories>
        <category>Data Base</category>
        <category>SQL</category>
        <category>mySQL</category>
      </categories>
      <tags>
        <tag>Data Base</tag>
        <tag>SQL</tag>
        <tag>mySQL</tag>
        <tag>data analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>Sass &amp; SCSS 개요</title>
    <url>/2020/08/21/scss-overview/</url>
    <content><![CDATA[<blockquote>
<p><strong>CSS Preprocessor</strong></p>
</blockquote>
<p>CSS가 동작하기 전에 사용할 수 있는 기능. Sass, Less, Stylus 등이 있다. CSS 문법과 흡사하지만 <strong>선택자의 중첩, 조건문, 반복문, 단위의 연산등 표준 CSS보다 훨씬 많은 기능을 사용</strong> 하여 편하게 작성할 수 있다.</p>
<a id="more"></a>

<h2 id="Sass와-SCSS의-차이점"><a href="#Sass와-SCSS의-차이점" class="headerlink" title="Sass와 SCSS의 차이점"></a>Sass와 SCSS의 차이점</h2><p>SCSS는 Sass(Syntactically Awesome Style Sheets)의 3버전에서 새롭게 등장했다. CSS 구문과 완전히 호환되도록 새로운 구문을 도입해 만들어졌다. <strong>SCSS</strong> 는 CSS와 거의 같은 문법이며 <strong>Sass의 모든 기능을 지원하는 CSS의 상위집합</strong> 이다.</p>
<h3 id="간단한-차이-비교"><a href="#간단한-차이-비교" class="headerlink" title="간단한 차이 비교"></a><strong><u>간단한 차이 비교</u></strong></h3><ul>
<li><strong>Sass</strong><ul>
<li>{ } 및 ; 사용하지 않는다.</li>
<li>선택자의 유효범위는 들여쓰기</li>
<li>=와 + 기호로 Mixns 기능을 사용</li>
<li>좀더 간결하고 작성시에 편리하다.</li>
</ul>
</li>
<li><strong>SCSS</strong><ul>
<li>{ } 및 ; 사용한다.</li>
<li>선택자의 유효범위는 중괄호</li>
<li>@mixin과 @include로 Mixns 기능 사용</li>
<li>인라인 코드(한줄 작성) 작성 가능</li>
<li>CSS와 유사한 문법이라 통합하기 쉬움</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>Mixins</strong>(‘믹스인’): 재사용 가능한 기능을 만드는 방식</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Sass</span></span><br><span class="line"><span class="selector-class">.list</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span></span><br><span class="line">  float: left</span><br><span class="line">  li</span><br><span class="line">    color: red</span><br><span class="line">    background: url(<span class="string">&quot;./image.jpg&quot;</span>)</span><br><span class="line">    &amp;:last-child</span><br><span class="line">      margin-right: -<span class="number">10px</span></span><br><span class="line"></span><br><span class="line">// SCSS</span><br><span class="line">.list &#123;</span><br><span class="line">  width: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="attribute">background</span>: url(<span class="string">&quot;./image.jpg&quot;</span>);</span><br><span class="line">    &amp;<span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">      <span class="attribute">margin-right</span>: -<span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="컴파일-방법"><a href="#컴파일-방법" class="headerlink" title="컴파일 방법"></a>컴파일 방법</h2><ol>
<li><a href="https://www.sassmeister.com/">SassMeister</a>:  설치하지 않고 컴파일할 수 있는 사이트</li>
<li><a href="https://github.com/sass/node-sass">node-sass</a>: Node.js를 컴파일러인 LibSass에 바인딩한 라이브러리</li>
<li><a href="https://gulpjs.com/">Gulp</a>: 빌드 자동화 도구(JavaScript Task Runner)</li>
<li><a href="https://webpack.js.org/">Webpack</a>: JavaScript 모듈화 도구</li>
<li><a href="https://parceljs.org/">Parcel</a>: 웹 애플리케이션 번들러</li>
</ol>
<h2 id="주석"><a href="#주석" class="headerlink" title="주석"></a>주석</h2><blockquote>
<p>Sass</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* 컴파일되는</span><br><span class="line"> * 여러 줄</span><br><span class="line"> * 주석 *&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Error</span><br></pre></td></tr></table></figure>

<blockquote>
<p>SCSS</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">컴파일되는</span><br><span class="line">여러 줄 주석</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="데이터-종류-Data-Types"><a href="#데이터-종류-Data-Types" class="headerlink" title="데이터 종류(Data Types)"></a>데이터 종류(Data Types)</h2><table>
<thead>
<tr>
<th>데이터</th>
<th>설명</th>
<th>예시</th>
</tr>
</thead>
<tbody><tr>
<td>Numbers</td>
<td>숫자.<br/>단위가 있거나 없을 수 있음.</td>
<td>1, .85, 20px, 2em…</td>
</tr>
<tr>
<td>Strings</td>
<td>문자.<br/>문자가 있거나 없을 수 있음.</td>
<td>bold, relative, “dotum”…</td>
</tr>
<tr>
<td>Colors</td>
<td>색상 표현</td>
<td>red, #FFFF00, rgba(255,0,0,.5)</td>
</tr>
<tr>
<td>Booleans</td>
<td>논리</td>
<td>true, false</td>
</tr>
<tr>
<td>Nulls</td>
<td>아무 것도 없음.<br/>속성값으로 사용되면 컴파일하지 않는다.</td>
<td>null</td>
</tr>
<tr>
<td>Lists</td>
<td>공백이나 , (쉼표)로 구분된 값의 목록.<br/>( ) 소괄호를 붙이거나 붙이지 않는다.</td>
<td>(bunny, kitten, puppy), bunny rabbit</td>
</tr>
<tr>
<td>Maps</td>
<td>Lists와 유사하나 값이 Key: Value 형태.<br/><strong>( ) 소괄호를 꼭 붙여야 한다.</strong></td>
<td>(bunny: b, kitten: k, puppy: p)</td>
</tr>
</tbody></table>
<h2 id="중첩-Nesting"><a href="#중첩-Nesting" class="headerlink" title="중첩(Nesting)"></a>중첩(Nesting)</h2><p>상위 선택자의 반복을 피하고 좀 더 편리하게 작성할 수 있다.</p>
<blockquote>
<p>SCSS</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.section</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="selector-class">.list</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="selector-tag">li</span> &#123;</span><br><span class="line">      <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Compiled to CSS</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.section</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.section</span> <span class="selector-class">.list</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.section</span> <span class="selector-class">.list</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="상위-선택자-참조-Ampersand"><a href="#상위-선택자-참조-Ampersand" class="headerlink" title="상위 선택자 참조 (Ampersand)"></a>상위 선택자 참조 (Ampersand)</h3><p>중첩 안에서 &amp; 키워드는 부모 선택자를 참조하여 치환한다.</p>
<blockquote>
<p>SCSS</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  &amp;<span class="selector-class">.active</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Compiled to CSS</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="at-root-중첩-벗어나기"><a href="#at-root-중첩-벗어나기" class="headerlink" title="@at-root (중첩 벗어나기)"></a>@at-root (중첩 벗어나기)</h3><p>중첩을 벗어나고 싶을 때 @at-root 사용. 중첩 안에서 생성하되 중첩 밖에서 사용해야 할 때 주로 쓰인다.</p>
<blockquote>
<p>SCSS</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.list</span> &#123;</span><br><span class="line">  <span class="variable">$w</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="variable">$h</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$w</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="variable">$h</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@at-root</span> .box &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$w</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="variable">$h</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Compiled to CSS</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.list</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="중첩된-속성"><a href="#중첩된-속성" class="headerlink" title="중첩된 속성"></a>중첩된 속성</h3><p>font-, margin- 등과 같이 동일한 네임 스페이스를 가지는 속성들을 다음과 같이 사용할 수 있다.</p>
<blockquote>
<p>SCSS</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: &#123;</span><br><span class="line">    weight: bold;</span><br><span class="line">    size: <span class="number">10px</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="attribute">margin</span>: &#123;</span><br><span class="line">    top: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">20px</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="attribute">padding</span>: &#123;</span><br><span class="line">    bottom: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">30px</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Compiled to CSS</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="변수-Variables"><a href="#변수-Variables" class="headerlink" title="변수(Variables)"></a>변수(Variables)</h2><p>반복적으로 사용되는 값을 변수로 지정할 수 있으며 변수 이름 앞에는 반드시 <code>$</code> (달러 기호)를 붙여야 한다.</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">$변수이름: 속성값;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>SCSS</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$color-primary</span>: <span class="number">#eee</span>;</span><br><span class="line"><span class="variable">$url-images</span>: <span class="string">&quot;/assets/images/&quot;</span>;</span><br><span class="line"><span class="variable">$w</span>: <span class="number">500px</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$w</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="variable">$color-primary</span> url(<span class="variable">$url-images</span> + <span class="string">&quot;bg.jpg&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Compiled to CSS</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#eee</span> <span class="built_in">url</span>(<span class="string">&quot;/assets/images/bg.jpg&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="변수-유효범위-Variable-Scope"><a href="#변수-유효범위-Variable-Scope" class="headerlink" title="변수 유효범위(Variable Scope)"></a>변수 유효범위(Variable Scope)</h3><p>변수는 선언된 블록(<code>&#123; &#125;</code>) 내에서만 사용할 수 있다.</p>
<blockquote>
<p>SCSS</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">  <span class="variable">$color</span>: <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="variable">$color</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Error</span></span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="variable">$color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="변수-재할당-Variable-Reassignment"><a href="#변수-재할당-Variable-Reassignment" class="headerlink" title="변수 재할당(Variable Reassignment)"></a>변수 재할당(Variable Reassignment)</h3><p>변수에 변수를 할당할 수 있다.</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$yelloworange</span>: <span class="number">#ffa800</span>;</span><br><span class="line"><span class="variable">$color-primary</span>: <span class="variable">$yelloworange</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$color-primary</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Compiled to CSS</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ffa800</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="global-전역-설정"><a href="#global-전역-설정" class="headerlink" title="!global (전역 설정)"></a>!global (전역 설정)</h3><p><code>!global</code> 플래그를 사용하면 변수의 유효범위를 전역(Global)로 설정한다. 기존에 같은 이름으로 사용하던 변수가 있다면 값이 덮어질 수 있다.</p>
<blockquote>
<p>SCSS</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">  <span class="variable">$color</span>: <span class="number">#000</span> !global;</span><br><span class="line">  <span class="attribute">background</span>: <span class="variable">$color</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="variable">$color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Compiled to CSS</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="default-초깃값-설정"><a href="#default-초깃값-설정" class="headerlink" title="!default (초깃값 설정)"></a>!default (초깃값 설정)</h3><p><code>!default</code> 플래그는 할당되지 않은 변수의 초깃값을 설정하며 할당되어 있는 변수가 있다면 변수가 기존 할당값을 사용한다. <strong>‘변수와 값을 설정하겠지만, 혹시 기존 변수가 있을 경우는 현재 설정하는 변수의 값은 사용하지 않겠다’</strong> 는 의미. Overwrite하지 않는다.</p>
<blockquote>
<p>SCSS</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$color-primary</span>: red;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="variable">$color-primary</span>: blue !default;</span><br><span class="line">  <span class="attribute">background</span>: <span class="variable">$color-primary</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Compiled to CSS</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="문자-보간"><a href="#문자-보간" class="headerlink" title="#{ } (문자 보간)"></a>#{ } (문자 보간)</h3><p><code>#&#123;&#125;</code>를 이용해서 코드의 어디든지 변수 값을 넣을 수 있다.</p>
<blockquote>
<p>SCSS</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$family</span>: unquote(<span class="string">&quot;Droid+Sans&quot;</span>);</span><br><span class="line"><span class="keyword">@import</span> url(<span class="string">&quot;http://fonts.googleapis.com/css?family=#&#123;$family&#125;&quot;</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Compiled to CSS</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(<span class="string">&quot;http://fonts.googleapis.com/css?family=Droid+Sans&quot;</span>);</span><br></pre></td></tr></table></figure>


<h2 id="가져오기-Import"><a href="#가져오기-Import" class="headerlink" title="가져오기 (Import)"></a>가져오기 (Import)</h2><p><code>@import</code>로 외부에서 가져온 Sass 파일은 모두 단일 CSS 출력 파일로 병합된다. 가져온 파일에 정의된 모든 변수 또는 Mixins 등을 주 파일에서 사용할 수 있다.</p>
<p><em>Sass <code>@import</code>가 CSS <code>@import</code> 규칙으로 컴파일되는 상황</em></p>
<ol>
<li>파일 확장자가 <code>.css</code>일 때</li>
<li>파일 이름이 <code>http://</code>로 시작하는 경우</li>
<li><code>url()</code>이 붙어있을 경우</li>
<li>미디어쿼리가 있는 경우</li>
</ol>
<blockquote>
<p>SCSS</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;hello.css&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;http://hello.com/hello&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> url(hello);</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;hello&quot;</span> screen;</span><br></pre></td></tr></table></figure>


<h3 id="여러-파일-가져오기"><a href="#여러-파일-가져오기" class="headerlink" title="여러 파일 가져오기"></a>여러 파일 가져오기</h3><p>하나의 <code>@import</code>로 여러 파일을 가져올 수 있다. <code>,</code> (쉼표)로 구분.</p>
<blockquote>
<p>SCSS</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;header&quot;</span>, <span class="string">&quot;footer&quot;</span>;</span><br></pre></td></tr></table></figure>


<h3 id="파일-분할-Particals"><a href="#파일-분할-Particals" class="headerlink" title="파일 분할(Particals)"></a>파일 분할(Particals)</h3><p>파일을 나눠서 프로젝트를 진행할 경우, 파일이 많아질수록 관리가 어렵기 때문에 Partials 기능을 지원한다. 파일 이름 앞에 <code>_</code>를 붙여 <code>@import</code>로 가져오면 컴파일 시 <code>~.css</code> 파일로 컴파일하지 않는다. <code>Webpack</code>이나 <code>Parcel</code>, <code>Gulp</code> 같은 일반적인 빌드툴에서는 Partials 기능을 사용할 필요 없이, 설정된 값에 따라 빌드된다. 되도록 <strong><code>_</code>를 사용</strong> 할 것을 권장.</p>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://heropy.blog/2018/01/31/sass/">https://heropy.blog/2018/01/31/sass/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>Sass &amp; SCSS</category>
      </categories>
      <tags>
        <tag>overview</tag>
        <tag>SCSS</tag>
        <tag>SASS</tag>
      </tags>
  </entry>
  <entry>
    <title>mySQL 데이터 조회</title>
    <url>/2022/02/06/sql-data-query/</url>
    <content><![CDATA[<p><code>SELECT</code> : <strong>테이블데이터</strong> 를 <strong>조회</strong> 할 때 사용하는 구문.<br><code>*</code> : asterisk. 각 row의 모든 컬럼들을 보여달라는 의미.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> main.member;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="SELECT와-WHERE"><a href="#SELECT와-WHERE" class="headerlink" title="SELECT와 WHERE"></a>SELECT와 WHERE</h2><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>특정 컬럼의 내용을 보고 싶을 때 조회 가능하다.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> email, age, address <span class="keyword">FROM</span> main.member;</span><br></pre></td></tr></table></figure>

<h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><ul>
<li>그냥 <code>member</code>이라고도 사용해도 된다.</li>
<li>다른 데이터 베이스의 같은 테이블 이름을 가질 수 있으므로 데이터 베이스의 이름도 함께 적어두는 것이 좋다.</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> main.member;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">member</span>;</span><br></pre></td></tr></table></figure>

<h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p><code>WHERE</code> : 이메일 값이 해당 주소여야 하는 조건을 추가하는 것이다.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">member</span> <span class="keyword">WHERE</span> email <span class="operator">=</span> <span class="string">&#x27;mjaedot@gmail.com&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="SQL-작성-형식"><a href="#SQL-작성-형식" class="headerlink" title="SQL 작성 형식"></a>SQL 작성 형식</h2><h3 id="SQL문-끝에는-세미콜론이-반드시-존재하여야-한다"><a href="#SQL문-끝에는-세미콜론이-반드시-존재하여야-한다" class="headerlink" title="SQL문 끝에는 세미콜론이 반드시 존재하여야 한다."></a>SQL문 끝에는 세미콜론이 반드시 존재하여야 한다.</h3><ul>
<li>문법상 세미콜론이 하나의 SQL문을 종결하는 단위.</li>
</ul>
<h3 id="SQL문-안에는-공백이나-개행-등을-자유롭게-넣을-수-있다"><a href="#SQL문-안에는-공백이나-개행-등을-자유롭게-넣을-수-있다" class="headerlink" title="SQL문 안에는 공백이나 개행 등을 자유롭게 넣을 수 있다."></a>SQL문 안에는 공백이나 개행 등을 자유롭게 넣을 수 있다.</h3><ul>
<li>어떤 방법으로 하든 구분되어야 할 키워드들이 최소한 하나의 공백으로 구분되어 있고 세미콜론으로 마무리되어 있으면 실행에 문제가 없다.</li>
<li>많은 공백을 주는 행위<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> main.member        <span class="keyword">WHERE</span> email <span class="operator">=</span> <span class="string">&#x27;mjaedot@gmail.com&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
<li>SQL문의 일부분을 한줄 내리고 탭을 입력한후에 쓰는 행위<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> main.member</span><br><span class="line">    <span class="keyword">WHERE</span> email <span class="operator">=</span> <span class="string">&#x27;mjaedot@gmail.com&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="SQL문의-대소문자-구분-문자"><a href="#SQL문의-대소문자-구분-문자" class="headerlink" title="SQL문의 대소문자 구분 문자"></a>SQL문의 대소문자 구분 문자</h3><ul>
<li><strong>예약어(mySQL에 기본적으로 내장된 키워드)</strong> 는 <strong>대문자로 적는 것이 관례</strong> 이자 보기에도 좋음.<ul>
<li>대문자로 쓰는 것이 필수는 아니기 때문에 소문자로 작성하여도 실행이 된다.</li>
<li>가독성을 위해 대문자로 사용하는 것이 좋다.</li>
</ul>
</li>
<li>데이터 베이스의 이름, 테이블 이름, 컬럼 이름 등은 대소문자를 가리지 않고 실제 존재하는 것의 이름을 기재한다.</li>
</ul>
<h3 id="데이터-베이스-이름과-테이블-이름"><a href="#데이터-베이스-이름과-테이블-이름" class="headerlink" title="데이터 베이스 이름과 테이블 이름"></a>데이터 베이스 이름과 테이블 이름</h3><ul>
<li>서로 다른 데이터 베이스에 같은 이름의 테이블이 존재할 수도 있기 때문에 데이터 베이스 이름 뒤에 점(.)을 붙이고 테이블 이름을 기재한다.</li>
<li><strong>SCHEMAS</strong> 패널 부분의 데이터 베이스를 클릭하여 활성하면 해당 데이터베이스를 사용할 것이라고 지정한 것과 같으므로 이럴 경우 테이블 이름만 기재해도 된다.</li>
<li>해당 데이터 베이스를 사용하겠다고 확실하게 선언하면 그 뒤로는 테이블 이름만 기재해도 된다.<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE main;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">member</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="조건을-나타내는-다양한-방법"><a href="#조건을-나타내는-다양한-방법" class="headerlink" title="조건을 나타내는 다양한 방법"></a>조건을 나타내는 다양한 방법</h2><ul>
<li>나이가 27살 이상인 데이터를 조회하고 싶을 때<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> main.member <span class="keyword">WHERE</span> age <span class="operator">&gt;=</span> <span class="number">27</span>;</span><br></pre></td></tr></table></figure></li>
<li>나이가 30대인 데이터를 조회하고 싶을 때<blockquote>
<p><code>BETWEEN A AND B</code> : A부터 B까지</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> main.member <span class="keyword">WHERE</span> age <span class="keyword">BETWEEN</span> <span class="number">30</span> <span class="keyword">AND</span> <span class="number">39</span>;</span><br></pre></td></tr></table></figure></li>
<li>나이가 30대가 아닌 데이터를 조회하고 싶을 때<blockquote>
<p><code>NOT BETWEEN A AND B</code> : A부터 B를 제외한 데이터</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> main.member <span class="keyword">WHERE</span> age <span class="keyword">NOT</span> <span class="keyword">BETWEEN</span> <span class="number">30</span> <span class="keyword">AND</span> <span class="number">39</span>;</span><br></pre></td></tr></table></figure></li>
<li>특정 날짜 이후의 데이터를 조회하고 싶을 때<blockquote>
<p><code>date</code> 타입 컬럼에도 부등호를 사용 가능하다.</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> main.member <span class="keyword">WHERE</span> sign_up_day <span class="operator">&gt;</span> <span class="string">&#x27;2019-01-01&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
<li>특정 날짜 사이의 데이터를 조회하고 싶을 때<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> main.member <span class="keyword">WHERE</span> sign_up_day <span class="keyword">BETWEEN</span> <span class="string">&#x27;2018-01-01&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;2018-12-31&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="문자열-패턴-매칭-조건"><a href="#문자열-패턴-매칭-조건" class="headerlink" title="문자열 패턴 매칭 조건"></a>문자열 패턴 매칭 조건</h2><h3 id="LIKE"><a href="#LIKE" class="headerlink" title="LIKE"></a>LIKE</h3><ul>
<li>문자열이 특정 문자로 시작하고 임의의 길이를 가진 문자열을 출력한다.</li>
<li>뒤에 문자열이 없어도 되고 100자가 있어도 무방하다.</li>
</ul>
<p><em><strong>예시</strong></em></p>
<ul>
<li>‘서울’로 시작하는 데이터를 조회한다.<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">member</span> <span class="keyword">WHERE</span> address <span class="keyword">LIKE</span> <span class="string">&#x27;서울%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">서울 송파구...</span><br><span class="line">서울 강남구...</span><br><span class="line">서울 양천구...</span><br></pre></td></tr></table></figure></li>
<li>‘고양시’라는 단어가 포함된 모든 데이터를 조회한다.<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">member</span> <span class="keyword">WHERE</span> address <span class="keyword">LIKE</span> <span class="string">&#x27;%고양시%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">경기 고양시...</span><br><span class="line">경기도 고양시...</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="그-밖에-알아야할-조건-표현식"><a href="#그-밖에-알아야할-조건-표현식" class="headerlink" title="그 밖에 알아야할 조건 표현식"></a>그 밖에 알아야할 조건 표현식</h2><h3 id="같지-않음-lt-gt"><a href="#같지-않음-lt-gt" class="headerlink" title="같지 않음 (!=, &lt;&gt;)"></a>같지 않음 (!=, &lt;&gt;)</h3><ul>
<li>같지 않음을 표현할 때 <code>!=</code>나 <code>&lt;&gt;</code>을 사용한다.</li>
</ul>
<h3 id="이-중에-있는-IN"><a href="#이-중에-있는-IN" class="headerlink" title="이 중에 있는~ (IN)"></a>이 중에 있는~ (IN)</h3><ul>
<li>연속된 범위가 아닌 여러 값들 중 해당하는 값이 있는 row를 추려야 할 때</li>
<li>정확히 20살, 혹은 30살 회원들을 조회할 때<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> main.member <span class="keyword">WHERE</span> AGE <span class="keyword">IN</span>(<span class="number">20</span>, <span class="number">30</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="한글자를-나타내는"><a href="#한글자를-나타내는" class="headerlink" title="한글자를 나타내는 _"></a>한글자를 나타내는 _</h3><ul>
<li>LIKE 뒤의 <code>%</code>는 임의의 길이를 가진 문자열(0자 포함)을 나타낸다.</li>
<li>LIKE 뒤의 <code>_</code>는 문자 하나를 나타낸다.</li>
<li>c로 시작하되 c 뒤에 5글자인 이메일을 찾고 싶을 때 <code>_</code>를 5번 적용한다.<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> main.member <span class="keyword">WHERE</span> email <span class="keyword">LIKE</span> <span class="string">&#x27;c_____@%&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="DATE-데이터-타입-관련-함수"><a href="#DATE-데이터-타입-관련-함수" class="headerlink" title="DATE 데이터 타입 관련 함수"></a>DATE 데이터 타입 관련 함수</h2><h3 id="연도-월-일-추출하기"><a href="#연도-월-일-추출하기" class="headerlink" title="연도, 월, 일 추출하기"></a>연도, 월, 일 추출하기</h3><ul>
<li><code>YEAR</code> 함수를 적용하여 1992년에 태어난 회원들만 조회하기<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> main.member <span class="keyword">WHERE</span> <span class="keyword">YEAR</span>(birthday) <span class="operator">=</span> <span class="string">&#x27;1992&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
<li><code>MONTH</code> 함수를 적용하여 여름(6, 7, 8월)에 가입한 회원들만 조회하기<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> main.member <span class="keyword">WHERE</span> <span class="keyword">MONTH</span>(sign_up_day) <span class="keyword">IN</span> (<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>);</span><br></pre></td></tr></table></figure></li>
<li>각 달의 후반부(15일~30일)에 가입했던 회원들만 조회하기<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> main.member <span class="keyword">WHERE</span> DAYOFMONTH(sign_up_day) <span class="keyword">BETWEEN</span> <span class="number">15</span> <span class="keyword">AND</span> <span class="number">31</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="날짜-간의-차이-구하기"><a href="#날짜-간의-차이-구하기" class="headerlink" title="날짜 간의 차이 구하기"></a>날짜 간의 차이 구하기</h3><ul>
<li><code>DATEDIFF(날찌a, 날짜b)</code>: ‘날짜 a - 날짜 b’를 해서 그 차이 일수를 알려준다.</li>
<li>예를 들어 <code>DATEDIFF(&#39;2018-01-05&#39;, &#39;2018-01-03&#39;)</code>의 값은 2이다.</li>
</ul>
<p><em><strong>예시</strong></em></p>
<ul>
<li>member 테이블에서 각 회원이 가입한 일자가 2019년 1월 1일 기준으로 몇일 이후인지 확인하고 싶을 때<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> email, sign_up_day, DATEDIFF(sign_up_day, <span class="string">&#x27;2019-01-01&#x27;</span>) <span class="keyword">FROM</span> main.member;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>꼭 테이블에 원래 있는 컬럼이 아니더라도 조회할 때에는 새로운 컬럼을 붙여서 확인할 수도 있다.</p>
</blockquote>
</li>
<li>오늘 날짜 기준으로 살펴보고 싶을 때 (<code>CURDATE()</code> 오늘 날짜를 구하는 함수이다.)<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> email, sign_up_day, CURDATE(), DATEDIFF(sign_up_day, CURDATE()) <span class="keyword">FROM</span> main.member;</span><br></pre></td></tr></table></figure></li>
<li>몇살이었을 때 가입하였는지 확인하고 싶을 때<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> email, sign_up_day, DATEDIFF(sign_up_day, birthday) <span class="operator">/</span> <span class="number">365</span> <span class="keyword">FROM</span> main.member;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="날짜-더하기-빼기"><a href="#날짜-더하기-빼기" class="headerlink" title="날짜 더하기 빼기"></a>날짜 더하기 빼기</h3><ul>
<li><code>DATE_ADD()</code> : 더하기 함수<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> email, sign_up_day, DATE_ADD(sign_up_day, <span class="type">INTERVAL</span> <span class="number">300</span> <span class="keyword">DAY</span>) <span class="keyword">FROM</span> main.member;</span><br></pre></td></tr></table></figure></li>
<li><code>DATE_SUB()</code> : 빼기 함수<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> email, sign_up_day, DATE_SUB(sign_up_day, <span class="type">INTERVAL</span> <span class="number">300</span> <span class="keyword">DAY</span>) <span class="keyword">FROM</span> main.member;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="UNIX-Timestamp-값"><a href="#UNIX-Timestamp-값" class="headerlink" title="UNIX Timestamp 값"></a>UNIX Timestamp 값</h3><ul>
<li>특정 날짜의 특정 시간을, 1970년 1월 1일을 기준으로, 총 몇 초가 지났는지로 나타낸 값 (ex. 1553526000)</li>
<li><code>UNIX_TIMESTAMP</code>: Unix Timestamp로 바꿔주는 함수<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> email, sign_up_day, UNIX_TIMESTAMP(sign_up_day) <span class="keyword">FROM</span> main.member;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1553526000</span><br><span class="line">1453935000</span><br><span class="line">1459435400</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li>
<li><code>FROM_UNIXTIME</code> : Unix timestamp를 이걸 사람이 읽을 수 있는 날짜 형태로 변경<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> email, sign_up_day, FROM_UNIXTIME(UNIX_TIMESTAMP(sign_up_day)) <span class="keyword">FROM</span> main.member;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2019-03-26 00:00:00</span><br><span class="line">2019-02-27 00:00:00</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h3><ul>
<li><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-types.html">날짜, 시간 관련 데이터 타입</a></li>
<li><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html">날짜, 시간 관련 함수</a></li>
</ul>
<h2 id="여러개의-조건-걸기"><a href="#여러개의-조건-걸기" class="headerlink" title="여러개의 조건 걸기"></a>여러개의 조건 걸기</h2><ul>
<li><code>AND</code>: 동시에 조건을 충족시키는 데이터를 조회<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> main.member</span><br><span class="line"><span class="keyword">WHERE</span> gender <span class="operator">=</span> <span class="string">&#x27;m&#x27;</span></span><br><span class="line">  <span class="keyword">AND</span> address <span class="keyword">LIKE</span> <span class="string">&#x27;서울%&#x27;</span></span><br><span class="line">  <span class="keyword">AND</span> age <span class="keyword">BETWEEN</span> <span class="number">25</span> <span class="keyword">and</span> <span class="number">29</span>;</span><br></pre></td></tr></table></figure></li>
<li><code>OR</code> : 조건1 or 조건2 하나라도 해당하는 데이터를 조회<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> main.member</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">MONTH</span>(sign_up_day) <span class="keyword">BETWEEN</span> <span class="number">3</span> <span class="keyword">AND</span> <span class="number">5</span></span><br><span class="line">  <span class="keyword">OR</span> <span class="keyword">MONTH</span>(sign_up_date_ <span class="keyword">BETWEEN</span> <span class="number">9</span> <span class="keyword">AND</span> <span class="number">11</span>;</span><br></pre></td></tr></table></figure></li>
<li><code>AND</code>와 <code>OR</code> 조건을 혼합할 경우<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> main.member</span><br><span class="line"><span class="keyword">WHERE</span> (gender <span class="operator">=</span> <span class="string">&#x27;m&#x27;</span> <span class="keyword">AND</span> height <span class="operator">&gt;=</span> <span class="number">180</span>)</span><br><span class="line">  <span class="keyword">OR</span> (gender <span class="operator">=</span> <span class="string">&#x27;f&#x27;</span> <span class="keyword">AND</span> height <span class="operator">&gt;=</span> <span class="number">170</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="여러-조건을-걸-때-주의할-점"><a href="#여러-조건을-걸-때-주의할-점" class="headerlink" title="여러 조건을 걸 때 주의할 점"></a>여러 조건을 걸 때 주의할 점</h2><h3 id="or을-사용할-때-주의사항"><a href="#or을-사용할-때-주의사항" class="headerlink" title="or을 사용할 때 주의사항"></a>or을 사용할 때 주의사항</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> main.member <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">OR</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> main.member <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">OR</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<p>위 두 코드는 같지 않다.<br><code>WHERE id = 1 OR 2</code>을 분리해서 보면 (1) id=1이 true, (2) 2로 나눌 수 있다.<br>MySQL에서는 0을 False, 0 이외의 숫자는 모두 True로 간주하기 때문에 <code>WHERE id = 1 OR TRUE</code>가 되어버린다.</p>
<h3 id="AND와-OR간의-우선순위"><a href="#AND와-OR간의-우선순위" class="headerlink" title="AND와 OR간의 우선순위"></a>AND와 OR간의 우선순위</h3><ul>
<li><strong>AND가 OR보다 우선 순위가 더 높기 때문에</strong> 첫번째 코드는  틀린 코드이고 두번째 코드가 올바른 코드이다.<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> main.member</span><br><span class="line"><span class="keyword">WHERE</span> gender <span class="operator">=</span> <span class="string">&#x27;f&#x27;</span> <span class="keyword">OR</span> age <span class="operator">&lt;</span> <span class="number">30</span> <span class="keyword">AND</span> height <span class="operator">&gt;</span> <span class="number">180</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> main.member</span><br><span class="line"><span class="keyword">WHERE</span> (gender <span class="operator">=</span> <span class="string">&#x27;f&#x27;</span> <span class="keyword">OR</span> age <span class="operator">&lt;</span> <span class="number">30</span>) <span class="keyword">AND</span> height <span class="operator">&gt;</span> <span class="number">180</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="문자열-패턴-매칭-조건을-사용할-때-주의사항"><a href="#문자열-패턴-매칭-조건을-사용할-때-주의사항" class="headerlink" title="문자열 패턴 매칭 조건을 사용할 때 주의사항"></a>문자열 패턴 매칭 조건을 사용할 때 주의사항</h2><h3 id="이스케이핑-escaping-문제"><a href="#이스케이핑-escaping-문제" class="headerlink" title="이스케이핑(escaping) 문제"></a>이스케이핑(escaping) 문제</h3><ul>
<li><strong>이스케이핑(escaping)</strong> : 원래 특정 의미(‘임의의 길이를 가진 문자열’)를 나타내던 문자(%)를 그 특정 의미가 아니라, 일반적인 문자처럼 취급하는 행위<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> main.text <span class="keyword">WHERE</span> sentence <span class="keyword">LIKE</span> <span class="string">&#x27;%%%&#x27;</span>;</span><br></pre></td></tr></table></figure>
우리가 원하는 ‘문자로서의 %’가 아니라 ‘LIKE에서 쓰이는 표현식’으로 간주되어, ‘임의의 길이를 가진 문자열’을 나타내는 것으로 해석된다.<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> main.text <span class="keyword">WHERE</span> sentence <span class="keyword">LIKE</span> <span class="string">&#x27;%\%%&#x27;</span>;</span><br></pre></td></tr></table></figure>
이는 역슬래시(백슬래시) 기호를 붙여주면 해결된다.</li>
<li>작은 따옴표(<code>&#39;</code>) 이스케이핑<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> main.test <span class="keyword">WHERE</span> sentence <span class="keyword">LIKE</span> <span class="string">&#x27;%\&#x27;</span><span class="operator">%</span><span class="string">&#x27;;</span></span><br></pre></td></tr></table></figure></li>
<li>언더바(<code>_</code>) 이스케이핑<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> main.test <span class="keyword">WHERE</span> sentence <span class="keyword">LIKE</span> <span class="string">&#x27;%\_%&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
<li>큰 따옴표(<code>&quot;</code>) 이스케이핑<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> main.test <span class="keyword">WHERE</span> sentence <span class="keyword">LIKE</span> <span class="string">&#x27;%\&quot;%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="대소문자-구분-문제"><a href="#대소문자-구분-문제" class="headerlink" title="대소문자 구분 문제"></a>대소문자 구분 문제</h3></li>
<li>소문자 g를 검색해도 대소문자 구분 없이 g, G 모두 조회된다. 이는 MySQL의 기본 설정때문이다.<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> main.test <span class="keyword">WHERE</span> sentence <span class="keyword">LIKE</span> <span class="string">&#x27;%g%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Table collation 항목에서 utf8mb4_0900_ai_ci 값의 ci는  case-insensitive의 약자로 문자열이 동일한지 확인할 때, 대소문자를 구별하지 않겠다는 의미이다.</p>
</blockquote>
</li>
<li><code>BINARY</code>는  해당 0과 1이 정확히 일치하는 것을 찾으라는 의미로 0과 1을 보는 수준까지 문자열을 비교하라는 의미이다.<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> main.test <span class="keyword">WHERE</span> sentence <span class="keyword">LIKE</span> <span class="type">BINARY</span> <span class="string">&#x27;%G%&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="데이터-정렬해서-보기"><a href="#데이터-정렬해서-보기" class="headerlink" title="데이터 정렬해서 보기"></a>데이터 정렬해서 보기</h2><ul>
<li>정렬: ‘row’들을 ‘특정 컬럼’ 기준으로 순서대로 출력. <blockquote>
<p>NULL은 가장 작은 수로 취급되지만 DBMS마다 다르고, 표시하지 않고 작업하는 것이 좋다.</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> main.member</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> height;</span><br></pre></td></tr></table></figure></li>
<li>오름차순: ASC (기본적으로 오름차순)<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> main.member</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> height <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure></li>
<li>내림차순: DESC<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> main.member</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> height <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure></li>
<li>조건 추가<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> main.member</span><br><span class="line">   <span class="keyword">AND</span> weight <span class="operator">&gt;=</span> <span class="number">70</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> height <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sign_up_day, email <span class="keyword">FROM</span> main.member</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">YEAR</span>(sign_up_day) <span class="keyword">DESC</span>, email <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h3><ul>
<li>이름을 먼저 쓴 컬럼을 우선으로 해서 정렬이 차례대로 수행된다.</li>
<li>SQL 문법상 WHERE는 ORDER BY 앞에 나와야 한다.</li>
</ul>
<h3 id="정렬시-주의할-점"><a href="#정렬시-주의할-점" class="headerlink" title="정렬시 주의할 점"></a>정렬시 주의할 점</h3><ul>
<li>숫자형(INT 등)인 경우와 문자열형(TEXT 등)인지에 따라 정렬결과가 달라진다.</li>
<li>INT 타입의 값은 숫자의 대소(크고 작음)을 기준으로 정렬</li>
<li>TEXT 타입의 값은 한 문자 씩 문자 순서를 비교하여 정렬</li>
<li>숫자값이 담긴 컬럼을 정렬 기준으로 할 때는 그 컬럼의 데이터 타입이 숫자형인지, 문자열형인지를 잘 살펴봐야 한다.</li>
<li>TEXT 타입을 숫자형으로 정렬하고 싶을 경우 <strong>CAST</strong> 라는 함수를 사용한다.<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> main.test <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">CAST</span>(data <span class="keyword">AS</span> signed) <span class="keyword">ASC</span>; </span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>CAST(data AS signed)</strong>: 일시적으로 signed라는 데이터 타입으로 변환하라.<br><strong>signed</strong>: 양수와 음수를 포함한 모든 정수를 나타낼 수 있는 데이터 타입</p>
</blockquote>
</li>
</ul>
<h2 id="데이터-일부만-추려보기"><a href="#데이터-일부만-추려보기" class="headerlink" title="데이터 일부만 추려보기"></a>데이터 일부만 추려보기</h2><ul>
<li><code>LIMIT</code>: 몇개만 추려서 조회하고 싶을 때 사용한다.<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> main.member</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> sign_up_day <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>LIMIT 8, 2</code>: 8번째부터 시작하여 2개만 추려라.<br>row는 0번째부터 시작한다.</p>
</blockquote>
</li>
</ul>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>코드잇 온라인 강의 개발자를 위한 SQL 데이터베이스</p>
</blockquote>
]]></content>
      <categories>
        <category>Data Base</category>
        <category>SQL</category>
        <category>mySQL</category>
      </categories>
      <tags>
        <tag>Data Base</tag>
        <tag>SQL</tag>
        <tag>mySQL</tag>
        <tag>data query</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL 데이터 조회</title>
    <url>/2022/02/14/sql-exercise001/</url>
    <content><![CDATA[<p>(1) 나이가 20대이고, (2) 코드잇 피자 가게 사이트에 가입한 달이 7월인 회원들만 추려서 그 회원들에게 이메일로 할인 쿠폰을 발송하려고 합니다.</p>
<a id="more"></a>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">member</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">MONTH</span>(sign_up_day) <span class="keyword">IN</span> (<span class="number">7</span>)</span><br><span class="line">  <span class="keyword">AND</span> age <span class="keyword">BETWEEN</span> <span class="number">20</span> <span class="keyword">and</span> <span class="number">29</span>;</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>코드잇 온라인 강의 개발자를 위한 SQL 데이터베이스</p>
</blockquote>
]]></content>
      <categories>
        <category>exercise</category>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>exercise</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SCSS 기본 연산</title>
    <url>/2020/08/22/scss-operations/</url>
    <content><![CDATA[<p>Sass는 기본적으로 연산 기능을 지원하며, 레이아웃 작업시 상황에 맞게 크기를 계산하거나 정해진 값을 나눠서 작업할 경우 유용하게 사용할 수 있다.</p>
<a id="more"></a>

<h2 id="산술-연산자"><a href="#산술-연산자" class="headerlink" title="산술 연산자"></a>산술 연산자</h2><table>
<thead>
<tr>
<th>종류</th>
<th>설명</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>더하기</td>
</tr>
<tr>
<td>-</td>
<td>빼기</td>
</tr>
<tr>
<td>*</td>
<td>곱하기</td>
</tr>
<tr>
<td>/</td>
<td>나누기</td>
</tr>
<tr>
<td>%</td>
<td>나머지</td>
</tr>
</tbody></table>
<blockquote>
<p>하나 이상의 값이 반드시 숫자, 오른쪽값이 반드시 숫자.</p>
</blockquote>
<h3 id="비교-연산자"><a href="#비교-연산자" class="headerlink" title="비교 연산자"></a>비교 연산자</h3><table>
<thead>
<tr>
<th>종류</th>
<th>설명</th>
</tr>
</thead>
<tbody><tr>
<td>==</td>
<td>같다</td>
</tr>
<tr>
<td>!=</td>
<td>같지 않다</td>
</tr>
<tr>
<td>&lt;</td>
<td>보다 작은</td>
</tr>
<tr>
<td>&gt;</td>
<td>보다 큰</td>
</tr>
<tr>
<td>&lt;=</td>
<td>보다 작거나 같은</td>
</tr>
<tr>
<td>&gt;=</td>
<td>보다 크거나 같은</td>
</tr>
</tbody></table>
<h3 id="논리-연산자"><a href="#논리-연산자" class="headerlink" title="논리 연산자"></a>논리 연산자</h3><table>
<thead>
<tr>
<th>종류</th>
<th>설명</th>
</tr>
</thead>
<tbody><tr>
<td>==</td>
<td>같다</td>
</tr>
<tr>
<td>and</td>
<td>그리고</td>
</tr>
<tr>
<td>or</td>
<td>또는</td>
</tr>
<tr>
<td>not</td>
<td>부정</td>
</tr>
</tbody></table>
<h2 id="숫자"><a href="#숫자" class="headerlink" title="숫자"></a>숫자</h2><ul>
<li>상대적 단위 연산<ul>
<li>일반적으로 절댓값을 나타내는 px 단위로 연산</li>
<li>상대적 단위(%, em, vw 등)으로 연산할 경우 CSS <code>calc()</code>으로 연산해야 한다.</li>
<li>CSS는 속성 값의 숫자를 분리하는 방법으로 <code>/</code>를 허용하기 때문에 <code>/</code>가 나누기 연산으로 사용되지 않을 수 있다.</li>
<li><strong><code>/</code>를 나누기 연산 기능으로 사용하고 싶을 때 충족해야 하는 조건</strong><ul>
<li>값 또는 그 일부가 변수에 저장되거나 함수에 의해 반환되는 경우</li>
<li>값이 ()로 묶여있는 경우</li>
<li>값이 다른 산술 표현식의 일부로 사용되는 경우</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>SCSS</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="variable">$x</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$x</span> / <span class="number">2</span>;  <span class="comment">// 변수에 저장된 값을 나누기</span></span><br><span class="line">  <span class="attribute">height</span>: (<span class="number">100px</span> / <span class="number">2</span>);  <span class="comment">// 괄호로 묶어서 나누기</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">10px</span> + <span class="number">12px</span> / <span class="number">3</span>;  <span class="comment">// 더하기 연산과 같이 사용</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Compiled to CSS</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="문자-Strings"><a href="#문자-Strings" class="headerlink" title="문자 (Strings)"></a>문자 (Strings)</h2><ul>
<li>문자 연산에는 <code>+</code>가 사용.</li>
<li>연산 결과는 첫번째 피연산자를 기준으로 함.</li>
<li>첫번째 피연산자에 따옴표가 붙어 있다면 연산 결과를 따옴표로 묶는다. (반대의 경우 붙이지 않음.)</li>
</ul>
<blockquote>
<p>SCSS</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;Hello &quot;</span> + World;</span><br><span class="line">  <span class="attribute">flex-flow</span>: row + <span class="string">&quot;-reverse&quot;</span> + <span class="string">&quot; &quot;</span> + wrap</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Compiled to CSS</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">  <span class="attribute">flex-flow</span>: row-reverse wrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="색상-Colors"><a href="#색상-Colors" class="headerlink" title="색상(Colors)"></a>색상(Colors)</h2><ul>
<li>RGBA에서 Alpha 값은 연산되지 않는다.</li>
<li>Alpha 값을 연산하기 위한 색상 함수(Color Functions)<ul>
<li>opacify()</li>
<li>transparentize()</li>
</ul>
</li>
</ul>
<blockquote>
<p>SCSS</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#123456</span> + <span class="number">#345678</span>;</span><br><span class="line">  <span class="attribute">background</span>: rgba(<span class="number">50</span>, <span class="number">100</span>, <span class="number">150</span>, .<span class="number">5</span>) + rgba(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, .<span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Compiled to CSS</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#468ace</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">60</span>, <span class="number">120</span>, <span class="number">180</span>, <span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="논리-Boolean"><a href="#논리-Boolean" class="headerlink" title="논리(Boolean)"></a>논리(Boolean)</h2><p>@if 조건문에서 사용되는 논리 연산. 그리고 / 또는 / 부정이 있다.</p>
<table>
<thead>
<tr>
<th>종류</th>
<th>설명</th>
</tr>
</thead>
<tbody><tr>
<td>and</td>
<td>그리고</td>
</tr>
<tr>
<td>or</td>
<td>또는</td>
</tr>
<tr>
<td>not</td>
<td>부정(반대)</td>
</tr>
</tbody></table>
<blockquote>
<p>SASS</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$width: 90px;</span><br><span class="line">div &#123;</span><br><span class="line">  @if not ($width &gt; 100px) &#123;</span><br><span class="line">    height: 300px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Compiled to CSS</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://heropy.blog/2018/01/31/sass/">https://heropy.blog/2018/01/31/sass/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>Sass &amp; SCSS</category>
      </categories>
      <tags>
        <tag>operation</tag>
        <tag>SCSS</tag>
        <tag>SASS</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL 데이터 조회</title>
    <url>/2022/02/15/sql-exercise002/</url>
    <content><![CDATA[<p>(1) star(별점) 컬럼을 기준으로 일단 오름차순 정렬하고,<br>(2) 같은 별점인 경우에는 registration_date(등록일자) 컬럼을 기준으로 내림차순 정렬하려고 합니다.<br>(3) 5번째 row까지만 일단 추려서 보고 싶습니다.</p>
<a id="more"></a>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> review</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> star <span class="keyword">ASC</span>, registration_date <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">5</span>;</span><br></pre></td></tr></table></figure>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>코드잇 온라인 강의 개발자를 위한 SQL 데이터베이스</p>
</blockquote>
]]></content>
      <categories>
        <category>exercise</category>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>exercise</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL 데이터 분석</title>
    <url>/2022/02/16/sql-exercise003/</url>
    <content><![CDATA[<p>(1) 고객들이 남긴 리뷰 수와, (2) 별점 평균값을 구하려고 합니다.<br>(3) 댓글이 존재하는(comment 컬럼이 NULL이 아닌) 리뷰들의 개수와 그 별점들의 평균만 구하려고 하는데요.<br>(4) 그리고 별점의 평균값은 반올림을 해주려고 합니다.</p>
<a id="more"></a>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>), ROUND(<span class="built_in">AVG</span>(star)) <span class="keyword">FROM</span> review <span class="keyword">WHERE</span> comment <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>코드잇 온라인 강의 개발자를 위한 SQL 데이터베이스</p>
</blockquote>
]]></content>
      <categories>
        <category>exercise</category>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>exercise</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL 데이터 분석</title>
    <url>/2022/02/17/sql-exercise004/</url>
    <content><![CDATA[<p>(1) pizza_price_cost 테이블의 name, price, price/cost(원가 기준 가격의 비율) 컬럼을 조회하세요.<br>(2) 대신 마지막 price/cost 컬럼을 사용해서 그 값이<br>1 =&lt; 값 &lt; 1.5 인 경우, ‘C. 저효율 메뉴’<br>1.5 &lt;= 값 &lt; 1.7 인 경우, ‘B. 중효율 메뉴’<br>1.7 &lt;= 값 인 경우, ‘A. 고효율 메뉴’<br>라고 그 값을 변환해서 표시하는 추가적인 컬럼도 함께 조회하고 대신 이 컬럼에는 efficiency라는 alias를 붙여주세요.<br>(3) 그리고 전체 row를 efficiency 컬럼을 기준으로 내림차순, 그 다음 기준으로 price 컬럼을 기준으로 오름차순 정렬하세요.<br>(4) 이 중에서 가장 첫 번째 row 부터 6개만 추리세요.</p>
<a id="more"></a>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    name,</span><br><span class="line">    price,</span><br><span class="line">    price<span class="operator">/</span>cost, </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="keyword">CASE</span>  </span><br><span class="line">    <span class="keyword">WHEN</span> price <span class="operator">/</span> cost <span class="operator">&gt;=</span> <span class="number">1.7</span> <span class="keyword">THEN</span> <span class="string">&#x27;A. 고효율 메뉴&#x27;</span></span><br><span class="line">    <span class="keyword">WHEN</span> price <span class="operator">/</span> cost <span class="operator">&lt;</span> <span class="number">1.7</span></span><br><span class="line">        <span class="keyword">AND</span> price <span class="operator">/</span> cost <span class="operator">&gt;=</span> <span class="number">1.5</span> </span><br><span class="line">        <span class="keyword">THEN</span> <span class="string">&#x27;B. 중효율 메뉴&#x27;</span></span><br><span class="line">    <span class="keyword">WHEN</span> price <span class="operator">/</span> cost <span class="operator">&lt;</span> <span class="number">1.5</span></span><br><span class="line">        <span class="keyword">AND</span> price <span class="operator">/</span> cost <span class="operator">&gt;=</span> <span class="number">1</span> </span><br><span class="line">        <span class="keyword">THEN</span> <span class="string">&#x27;C. 저효율 메뉴&#x27;</span></span><br><span class="line"><span class="keyword">END</span>) <span class="keyword">AS</span> efficiency</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> pizza_price_cost</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> efficiency <span class="keyword">DESC</span>, price <span class="keyword">ASC</span></span><br><span class="line">LIMIT <span class="number">6</span>;</span><br></pre></td></tr></table></figure>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>코드잇 온라인 강의 개발자를 위한 SQL 데이터베이스</p>
</blockquote>
]]></content>
      <categories>
        <category>exercise</category>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>exercise</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>mySQL 개요</title>
    <url>/2022/02/03/sql-overview/</url>
    <content><![CDATA[<ul>
<li><strong>데이터베이스</strong>: 일정한 체계 속에 저장된 데이터의 집합</li>
<li>데이터베이스를 다루기 위해서는 DBMS(Database Management System)라는 프로그램을 사용해야하고, DBMS는 결국 SQL이라고 하는 언어로 조작해야 한다.</li>
<li>테이블에서 하나의 개체를 나타내는 것은 row, 개체의 각 속성을 나타내는 것은 column이다.</li>
<li>서버 - 클라이언트 구조로 동작한다.</li>
</ul>
<a id="more"></a>

<h2 id="SQL의-역사"><a href="#SQL의-역사" class="headerlink" title="SQL의 역사"></a>SQL의 역사</h2><ul>
<li><strong>SQL(Structured Query Language)</strong> : SEQUEL (Structured English Query Language)에서 상표권의 문제로 변경됨.</li>
<li>1987년, 국제 표준화 기구(ISO)에서 <a href="https://www.iso.org/standard/16661.html">SQL에 관한 국제 표준(ISO 9075:1987)</a>이 제정. 현재는 2019년 개정안이 최신이다.</li>
<li>공인된 국제 표준이 있지만 Oracle, Microsoft SQL Server, MySQL 등의 DBMS에서 지원되는 SQL이 표준을 완벽히 준수하지 않는다.</li>
</ul>
<h2 id="MySQL이란"><a href="#MySQL이란" class="headerlink" title="MySQL이란?"></a>MySQL이란?</h2><ul>
<li>현재 페이스북, 유튜브 등을 비롯한 유명한 서비스에서도 활발히 사용됨.</li>
<li>MySQL AB 개발 -&gt; Sun Microsystems 인수 -&gt; Oracle 인수</li>
<li>오픈 소스 소프트웨어</li>
<li>상업용 라이센스 필요한 상황<ul>
<li>MySQL에 관한 추가 서비스, 상시 기술 지원 등을 원할 때</li>
<li>MySQL의 소스 코드를 가져다가 일부를 수정하고 자신의 제품의 일부로 만들어서 재배포하는 상황에서 그 소스코드를 공개하고 싶지 않을 때</li>
</ul>
</li>
<li>오라클: 은행, 거래소 등과 같이 데이터 처리의 정확성, 운영의 안정성 등이 엄격하게 요구되는 분야</li>
<li>MySQL: 우리가 흔히 쓰는 앱, 웹 사이트 같은 서비스. 간단히 사용해볼 때 요구하는 컴퓨터 성능도 작은 편.</li>
<li>CSV 파일: Comma Separated Values</li>
</ul>
<h2 id="sys-데이터-베이스"><a href="#sys-데이터-베이스" class="headerlink" title="sys 데이터 베이스"></a>sys 데이터 베이스</h2><p>MySQL 서버의 성능 관련 정보들을 갖고있는 데이터베이스이다.</p>
<ul>
<li>기획자/마케터 : 데이터베이스에 저장된 데이터를 잘 분석해서 시장 및 고객을 분석</li>
<li>백엔드 개발자 또는 데이터베이스 관리자 : 데이터가 빠르고 안정적으로, 조회 및 저장될 수 있도록 개발 및 관리.  DBMS가 성능 저하 없이 효율적으로 작업을 처리하고 있는지를 체크가 필요하다. 이러한 정보를 확인할 수 있는 기본 데이터베이스 중 하나가 이 sys 데이터베이스이다.</li>
<li>a라는 데이터베이스를 만드려고 할 때 <code>CREATE DATABASE a;</code>으로 실행한다.</li>
</ul>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>코드잇 온라인 강의 개발자를 위한 SQL 데이터베이스</p>
</blockquote>
]]></content>
      <categories>
        <category>Data Base</category>
        <category>SQL</category>
        <category>mySQL</category>
      </categories>
      <tags>
        <tag>overview</tag>
        <tag>Data Base</tag>
        <tag>SQL</tag>
        <tag>mySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>mySQL Primary Key (기본키)</title>
    <url>/2022/02/04/sql-primary-key/</url>
    <content><![CDATA[<p>Primary Key: 테이블에서 특정 row 하나를 식별하는 역할.</p>
<a id="more"></a>

<h2 id="Natural-Key"><a href="#Natural-Key" class="headerlink" title="Natural Key"></a>Natural Key</h2><p>실제로 어떤 개체가 갖고 있는 속성을 나타내는 컬럼이 Primary Key가 되었을 때를 의미한다.</p>
<h2 id="Surrogate-Key"><a href="#Surrogate-Key" class="headerlink" title="Surrogate Key"></a>Surrogate Key</h2><ul>
<li>어떤 개체의 실제 속성은 아니지만 Primary Key로 쓰기 위해 추가한 컬럼</li>
<li>보통 1부터 시작해서 1씩 증가하는 정수값을 갖는다.</li>
<li>Auto Increment 속성을 컬럼에 설정하면, 해당 컬럼에 관해서는 DBMS가 ‘자동으로 증가’하는 값을 넣는다.</li>
</ul>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>코드잇 온라인 강의 개발자를 위한 SQL 데이터베이스</p>
</blockquote>
]]></content>
      <categories>
        <category>Data Base</category>
        <category>SQL</category>
        <category>mySQL</category>
      </categories>
      <tags>
        <tag>Data Base</tag>
        <tag>SQL</tag>
        <tag>mySQL</tag>
        <tag>Primary Key</tag>
      </tags>
  </entry>
  <entry>
    <title>mySQL 서브쿼리</title>
    <url>/2022/02/18/sql-sub-query/</url>
    <content><![CDATA[<h2 id="서브쿼리"><a href="#서브쿼리" class="headerlink" title="서브쿼리"></a>서브쿼리</h2><ul>
<li>SQL문 안에 ‘부품’처럼 들어가는 SELECT문.</li>
<li>전체 SQL문에서 일부를 이루는 또다른 SQL문.</li>
<li>괄호로 서브쿼리를 감싸주어야 한다.</li>
<li>전체 SQL문을 outer query(외부쿼리), 서브쿼리를 inner query(내부쿼리)라고도 함.</li>
<li>HAVING절, SELECT절, WHERE절, FROM절 등에서도 사용 가능하다.</li>
</ul>
<a id="more"></a>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> i.ID, i.name, <span class="built_in">AVG</span>(star) <span class="keyword">AS</span> avg_star</span><br><span class="line"><span class="keyword">FROM</span> item <span class="keyword">AS</span> i <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> review <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">ON</span> R.ITEM_ID <span class="operator">=</span> I.ID</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> i.id, i.name</span><br><span class="line"><span class="keyword">HAVING</span> avg_star <span class="operator">&lt;</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(star) <span class="keyword">FROM</span> review)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> avg_star <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<h2 id="select절에-있는-서브쿼리"><a href="#select절에-있는-서브쿼리" class="headerlink" title="select절에 있는 서브쿼리"></a>select절에 있는 서브쿼리</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    id,</span><br><span class="line">    name,</span><br><span class="line">    price,</span><br><span class="line">    (<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(price) <span class="keyword">FROM</span> item) <span class="keyword">AS</span> max_price</span><br><span class="line"><span class="keyword">FROM</span> main.item;</span><br></pre></td></tr></table></figure>

<h2 id="where-절에-있는-서브쿼리"><a href="#where-절에-있는-서브쿼리" class="headerlink" title="where 절에 있는 서브쿼리"></a>where 절에 있는 서브쿼리</h2><p><em><strong>전체 상품의 평균 가격을 구하는 쿼리보다 높은 가격을 가진 상품</strong></em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    id,</span><br><span class="line">    name,</span><br><span class="line">    price,</span><br><span class="line">    (SELCT <span class="built_in">AVG</span>(price) <span class="keyword">FROM</span> item) <span class="keyword">AS</span> avg_price</span><br><span class="line"><span class="keyword">FROM</span> main.item</span><br><span class="line"><span class="keyword">WHERE</span> price <span class="operator">&gt;</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(price) <span class="keyword">FROM</span> item);</span><br></pre></td></tr></table></figure>

<p><em><strong>최고가 상품</strong></em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, name, price</span><br><span class="line"><span class="keyword">FROM</span> price <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(price) <span class="keyword">FROM</span> item);</span><br></pre></td></tr></table></figure>
<p><em><strong>최저가 상품</strong></em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, name, price</span><br><span class="line"><span class="keyword">FROM</span> price <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">MIN</span>(price) <span class="keyword">FROM</span> item);</span><br></pre></td></tr></table></figure>

<p><em><strong>리뷰가 최소 3개 이상 달린 상품들의 정보만 보고싶을 경우</strong></em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> item</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="keyword">IN</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span> item_id</span><br><span class="line"><span class="keyword">FROM</span> review</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> item_id HEAVING <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span> <span class="number">3</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="ANY"><a href="#ANY" class="headerlink" title="ANY"></a>ANY</h3><ul>
<li>각 row의 값중 하나라도 조건을 만족하는 경우가 있으면 True를 리턴한다.</li>
<li><code>SOME</code>과 같은 기능을 한다.</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WHERE</span> view_count <span class="operator">&gt;</span> <span class="keyword">ANY</span>(서브쿼리)</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> FOR_TEST.theater</span><br><span class="line">    <span class="keyword">WHERE</span> view_count <span class="operator">&gt;</span> <span class="keyword">ANY</span>(<span class="keyword">SELECT</span> view_count <span class="keyword">FROM</span> FOR_TEST.theater <span class="keyword">WHERE</span> category <span class="operator">=</span> <span class="string">&#x27;ACTION&#x27;</span>)</span><br><span class="line">        <span class="keyword">AND</span> category <span class="operator">!=</span> <span class="string">&#x27;ACTION&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="ALL"><a href="#ALL" class="headerlink" title="ALL"></a>ALL</h3><ul>
<li>모든 경우에 대해서 해당 조건이 성립해야 True를 리턴한다.<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> FOR_TEST.theater</span><br><span class="line">    <span class="keyword">WHERE</span> view_count <span class="operator">&gt;</span> <span class="keyword">ALL</span>(<span class="keyword">SELECT</span> view_count <span class="keyword">FROM</span> FOR_TEST.theater <span class="keyword">WHERE</span> category <span class="operator">=</span> <span class="string">&#x27;ACTION&#x27;</span>)</span><br><span class="line">        <span class="keyword">AND</span> category <span class="operator">!=</span> <span class="string">&#x27;ACTION&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="FROM절에-있는-서브쿼리"><a href="#FROM절에-있는-서브쿼리" class="headerlink" title="FROM절에 있는 서브쿼리"></a>FROM절에 있는 서브쿼리</h2><ul>
<li>derived(파생시키다, 도출해내다) table은 서브쿼리로 새롭게 도출된 테이블이다.</li>
<li>derived table은 해당 sql문 안에서만 유효한 하나의 테이블이다.</li>
<li>derived table에는 꼭 alias를 붙여줘야 한다.</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="built_in">AVG</span>(review_count),</span><br><span class="line">    <span class="built_in">MAX</span>(review_count),</span><br><span class="line">    <span class="built_in">MIN</span>(review_count)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span></span><br><span class="line">    <span class="built_in">substring</span>(address, <span class="number">1</span>, <span class="number">2</span>) <span class="keyword">AS</span> region,</span><br><span class="line">    <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> review_count</span><br><span class="line"><span class="keyword">FROM</span> revie <span class="keyword">AS</span> r <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> <span class="keyword">member</span> <span class="keyword">AS</span> m</span><br><span class="line"><span class="keyword">ON</span> r.mem_id <span class="operator">=</span> m.id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="built_in">SUBSTRING</span>(address, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">HAVING</span> region <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">    <span class="keyword">AND</span> region <span class="operator">!=</span> <span class="string">&#x27;안드&#x27;</span>) <span class="keyword">AS</span> review_count_summary;</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>코드잇 온라인 강의 개발자를 위한 SQL 데이터베이스</p>
</blockquote>
]]></content>
      <categories>
        <category>Data Base</category>
        <category>SQL</category>
        <category>mySQL</category>
      </categories>
      <tags>
        <tag>Data Base</tag>
        <tag>SQL</tag>
        <tag>mySQL</tag>
        <tag>Primary Key</tag>
      </tags>
  </entry>
  <entry>
    <title>mySQL 테이블 조인</title>
    <url>/2022/02/13/sql-table-join/</url>
    <content><![CDATA[<p>조인(join): 여러 테이블을 합쳐서 하나의 테이블인 것처럼 보는 행위</p>
<a id="more"></a>

<h2 id="Foreign-Key-외래키"><a href="#Foreign-Key-외래키" class="headerlink" title="Foreign Key (외래키)"></a>Foreign Key (외래키)</h2><ul>
<li>다른 테이블의 특정 row를 식별할 수 있게 해주는 컬럼.</li>
<li>Foreign Key는 다른 테이블의 특정 row를 식별할 수 있어야 하기 때문에 주로 다른 테이블의 Primary Key를 참조할 때가 많다.</li>
<li><code>foreign key</code>를 지정해주는 이유: 지정했을 때 이상한 id값 추가를 시도하면 mySQL에서 에러를 발생시킨다.</li>
<li>자식 테이블: 참조를 하는 테이블</li>
<li>부모 테이블: 참조를 당하는 테이블</li>
</ul>
<h2 id="다른-종류의-테이블-조인하기"><a href="#다른-종류의-테이블-조인하기" class="headerlink" title="다른 종류의 테이블 조인하기"></a>다른 종류의 테이블 조인하기</h2><ul>
<li>연결하다, 합치다라는 의미.</li>
<li>보통 Foreign Key를 기준으로 하는 것이 맞지만, 서로 같은 의미를 나타내는 컬럼들을 기준으로 조인하기도 한다.</li>
</ul>
<h3 id="LEFT-OUTER-JOIN-RIGHT-OUTER-JOIN"><a href="#LEFT-OUTER-JOIN-RIGHT-OUTER-JOIN" class="headerlink" title="LEFT OUTER JOIN / RIGHT OUTER JOIN"></a>LEFT OUTER JOIN / RIGHT OUTER JOIN</h3><ul>
<li><code>LEFT OUTER JOIN</code>: 왼쪽에 있는 테이블을 기준으로 오른쪽에 있는 테이블을 합치라는 의미.</li>
<li><code>RIGHT OUTER JOIN</code>: 오른쪽에 있는 테이블을 기준으로 왼쪽에 있는 테이블을 합치라는 의미.</li>
<li><code>ON</code>으로 시작하는 구문: 두 테이블을 합칠 때 item.id의 값과 stock.item_id의 값을 비교하여 같은 값끼리 가로 방향으로 연결하라.</li>
<li>item row에는 있지만 stock row에는 없을 경우 합쳐질 때 null로 표시된다.</li>
</ul>
<p><em><strong>예시</strong></em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    item.id,</span><br><span class="line">    item.name,</span><br><span class="line">    stock.item_id,</span><br><span class="line">    stock.inventory_count</span><br><span class="line"><span class="keyword">FROM</span> item <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> stock</span><br><span class="line"><span class="keyword">ON</span> item.id <span class="operator">=</span> stock.item_id</span><br></pre></td></tr></table></figure>

<h3 id="INNER-JOIN"><a href="#INNER-JOIN" class="headerlink" title="INNER JOIN"></a>INNER JOIN</h3><ul>
<li><code>INNER JOIN</code>: 테이블의 일치하는 값이 있는 컬럼들로만 합쳐 연결된다. 기준이 되는 테이블이 따로 없으며 기준 테이블이 없으므로 null이 되는 경우는 없다.</li>
</ul>
<h3 id="alias-붙이기"><a href="#alias-붙이기" class="headerlink" title="alias 붙이기"></a>alias 붙이기</h3><ul>
<li><code>AS</code>로 alias를 붙여준다.</li>
<li>스페이스로 구분하여 이름을 붙여줘도 괜찮다.</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    i.id,</span><br><span class="line">    i.name,</span><br><span class="line">    s.item_id,</span><br><span class="line">    s.inventory_count</span><br><span class="line"><span class="keyword">FROM</span> item <span class="keyword">AS</span> i <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> stock <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">ON</span> i.id <span class="operator">=</span> s.item_id</span><br></pre></td></tr></table></figure>

<h3 id="컬럼의-alias와-테이블의-alias"><a href="#컬럼의-alias와-테이블의-alias" class="headerlink" title="컬럼의 alias와 테이블의 alias"></a>컬럼의 alias와 테이블의 alias</h3><ul>
<li>컬럼의 alias: 각 컬럼이 실제로 우리에게 그 alias로 변환되어서 보여지게 하기 위한 용도</li>
<li>테이블의 alias: SQL 문의 전체 길이를 줄여서 가독성을 높이기 위해 사용. 한번 alias를 붙였으면 그 테이블은 해당 alias로만 나타내야 한다.</li>
</ul>
<h2 id="결합-연산과-집합-연산"><a href="#결합-연산과-집합-연산" class="headerlink" title="결합 연산과 집합 연산"></a>결합 연산과 집합 연산</h2><ul>
<li>연산: 테이블을 합치는 작업</li>
<li>결합 연산: 테이블을 가로 방향으로 합치는 것에 관한 연산</li>
<li>집합 연산: 테이블을 세로 방향으로 합치는 것에 관한 연산</li>
<li>합집합을 나타낼 때 두 집합이 공통적으로 갖고 있는 원소는 중복을 제거하고 하나만 표시된다.</li>
<li>mySQL에서는 8.0 기준으로 UNION 연산자만 지원한다.</li>
<li><code>INTERSECT</code>: A ∩ B 일 때 사용</li>
<li><code>MINUS</code>/<code>EXCEPT</code>: A - B, B - A 일 때 사용</li>
<li><code>UNION</code>: A U B일 때 사용</li>
</ul>
<h2 id="같은-종류의-테이블을-조인하기"><a href="#같은-종류의-테이블을-조인하기" class="headerlink" title="같은 종류의 테이블을 조인하기"></a>같은 종류의 테이블을 조인하기</h2><p><em><strong>특정 테이블에 있는 값만 확인하고 싶은 경우</strong></em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    old.id <span class="keyword">AS</span> old_id,</span><br><span class="line">    old.name <span class="keyword">AS</span> old_name,</span><br><span class="line">    new.id <span class="keyword">AS</span> new_id,</span><br><span class="line">    new.name <span class="keyword">AS</span> new_name</span><br><span class="line"><span class="keyword">FROM</span> item <span class="keyword">AS</span> <span class="keyword">old</span> <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> item_mew <span class="keyword">AS</span> <span class="keyword">new</span></span><br><span class="line"><span class="keyword">ON</span> old.id <span class="operator">=</span> new.id;</span><br></pre></td></tr></table></figure>
<p><em><strong>신상중 null값만 확인하고 싶은 경우</strong></em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    old.id <span class="keyword">AS</span> old_id,</span><br><span class="line">    old.name <span class="keyword">AS</span> old_name,</span><br><span class="line">    new.id <span class="keyword">AS</span> new_id,</span><br><span class="line">    new.name <span class="keyword">AS</span> new_name</span><br><span class="line"><span class="keyword">FROM</span> item <span class="keyword">AS</span> <span class="keyword">old</span> <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> item_mew <span class="keyword">AS</span> <span class="keyword">new</span></span><br><span class="line"><span class="keyword">ON</span> old.id <span class="operator">=</span> new.id</span><br><span class="line"><span class="keyword">WHERE</span> old.id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>
<p><em><strong>둘다 같이 있는 종류를 보고 싶은 경우</strong></em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    old.id <span class="keyword">AS</span> old_id,</span><br><span class="line">    old.name <span class="keyword">AS</span> old_name,</span><br><span class="line">    new.id <span class="keyword">AS</span> new_id,</span><br><span class="line">    new.name <span class="keyword">AS</span> new_name</span><br><span class="line"><span class="keyword">FROM</span> item <span class="keyword">AS</span> <span class="keyword">old</span> <span class="keyword">INNER</span> <span class="keyword">JOIN</span> item_mew <span class="keyword">AS</span> <span class="keyword">new</span></span><br><span class="line"><span class="keyword">ON</span> old.id <span class="operator">=</span> new.id;</span><br></pre></td></tr></table></figure>
<p><em><strong>둘다 합쳐보고 싶은 경우</strong></em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> item</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> item_new;</span><br></pre></td></tr></table></figure>

<h3 id="ON-대신-USING-사용"><a href="#ON-대신-USING-사용" class="headerlink" title="ON 대신 USING 사용"></a>ON 대신 USING 사용</h3><ul>
<li>join의 조건을 설정할 때 ON 절을 사용했지만 만약 조인 조건으로 쓰인 두 컬럼의 이름이 같으면 ON 대신 USING을 쓰는 경우도 있다.</li>
<li>두 테이블에서 조인 조건으로 사용되는 컬럼들의 이름이 같으면 그냥 USING이라고 쓰고 그 안에 컬럼 이름을 쓰는 것도 허용</li>
<li><strong>ON old.id = new.id와 USING(id)</strong> 는 같다.</li>
</ul>
<h2 id="UNION"><a href="#UNION" class="headerlink" title="UNION"></a>UNION</h2><ul>
<li>서로 다른 종류의 테이블도, 조회하는 컬럼을 일치시키면 집합 연산이 가능하다.</li>
<li>테이블의 원래 컬럼 구조가 달랃고 두 테이블이 공통적으로 갖고 있는 컬럼들만 조회한 경우 UNION같은 집합 연산을 수행할 수 있다.</li>
<li>총 컬럼수와 컬럼 데이터 타입만 일치하면 UNION 연산이 가능하다.</li>
<li>교집합에 해당하는 영역의 row들은 중복을 제거하고 하나의 row만 보여준다.</li>
<li><code>UNION ALL</code>: 중복 제거 작업 없이 두 테이블을 합친 결과를 그대로 보여준다.</li>
</ul>
<h2 id="서로-다른-3개의-테이블-조인하기"><a href="#서로-다른-3개의-테이블-조인하기" class="headerlink" title="서로 다른 3개의 테이블 조인하기"></a>서로 다른 3개의 테이블 조인하기</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    i.name, i.id,</span><br><span class="line">    r.item_id, r.star, r.comment, r.mem_id,</span><br><span class="line">    m.id, m.email</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    item <span class="keyword">AS</span> i <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> review <span class="keyword">AS</span> r</span><br><span class="line">        <span class="keyword">ON</span> r.item_id <span class="operator">=</span> i.id</span><br><span class="line">    <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> <span class="keyword">member</span> <span class="keyword">AS</span> m</span><br><span class="line">        <span class="keyword">ON</span> r.mem_id <span class="operator">=</span> m.id;</span><br></pre></td></tr></table></figure>

<h2 id="의미있는-데이터-추출하기"><a href="#의미있는-데이터-추출하기" class="headerlink" title="의미있는 데이터 추출하기"></a>의미있는 데이터 추출하기</h2><h3 id="각-상품별로-여성-회원들이-남긴-별점들의-평균값"><a href="#각-상품별로-여성-회원들이-남긴-별점들의-평균값" class="headerlink" title="각 상품별로 여성 회원들이 남긴 별점들의 평균값"></a>각 상품별로 여성 회원들이 남긴 별점들의 평균값</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> i.id, i.name, <span class="built_in">AVG</span>(star), <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    item <span class="keyword">AS</span> i <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> review <span class="keyword">AS</span> r</span><br><span class="line">        <span class="keyword">ON</span> r.item_id <span class="operator">=</span> i.id</span><br><span class="line">    <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> <span class="keyword">member</span> <span class="keyword">AS</span> m</span><br><span class="line">        <span class="keyword">ON</span> r.mem_id <span class="operator">=</span> m.id</span><br><span class="line">    <span class="keyword">WHERE</span> m.gender <span class="operator">=</span> <span class="string">&#x27;f&#x27;</span></span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> i.id, i.name</span><br><span class="line">    <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">AVG</span>(star) <span class="keyword">DESC</span>,</span><br><span class="line">    <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<h3 id="리뷰-내용-확인하기"><a href="#리뷰-내용-확인하기" class="headerlink" title="리뷰 내용 확인하기"></a>리뷰 내용 확인하기</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> review <span class="keyword">WHERE</span> item_id <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<h2 id="그-외의-조인들"><a href="#그-외의-조인들" class="headerlink" title="그 외의 조인들"></a>그 외의 조인들</h2><h3 id="NATURAL-JOIN-자연조인"><a href="#NATURAL-JOIN-자연조인" class="headerlink" title="NATURAL JOIN (자연조인)"></a>NATURAL JOIN (자연조인)</h3><ul>
<li>두 테이블에서 같은 이름의 컬럼을 찾아서 자동으로 그것들을 조인 조건을 설정하고, INNER JOIN을 해주는 조인</li>
<li>조인 조건을 자동으로 설정해주기 때문에 ON절을 쓸 필요가 없다.</li>
</ul>
<h3 id="CROSS-JOIN"><a href="#CROSS-JOIN" class="headerlink" title="CROSS JOIN"></a>CROSS JOIN</h3><ul>
<li>한 테이블의 하나의 row에 다른 테이블의 모든 row들을 매칭하고, 그 다음 row에서도 또, 다른 테이블의 모든 row들을 매칭하는 것을 반복함으로써 두 테이블의 row들의 모든 조합을 보여주는 조인</li>
<li>두 테이블의 Cartesian Product를 구하는 조인</li>
<li><strong>카르테시안 곱(Cartesian Product)</strong>: 두 집합의 모든 원소들의 조합을 나타내는 것을 수학의 집합 이론</li>
</ul>
<h3 id="SELF-JOIN"><a href="#SELF-JOIN" class="headerlink" title="SELF JOIN"></a>SELF JOIN</h3><ul>
<li>테이블이 자기 자신과 조인을 하는 경우</li>
</ul>
<h3 id="FULL-OUTER-JOIN"><a href="#FULL-OUTER-JOIN" class="headerlink" title="FULL OUTER JOIN"></a>FULL OUTER JOIN</h3><ul>
<li>두 테이블의 LEFT OUTER JOIN 결과와 RIGHT OUTER JOIN 결과를 합치는 조인</li>
<li>두 결과에 모두 존재하는 row들(두 테이블에 공통으로 존재하던 row들)은 한번만 표현</li>
</ul>
<h3 id="Non-Equi-조인"><a href="#Non-Equi-조인" class="headerlink" title="Non-Equi 조인"></a>Non-Equi 조인</h3><ul>
<li>ON절에서 등호(=)가 없는 조건 표현식</li>
</ul>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>코드잇 온라인 강의 개발자를 위한 SQL 데이터베이스</p>
</blockquote>
]]></content>
      <categories>
        <category>Data Base</category>
        <category>SQL</category>
        <category>mySQL</category>
      </categories>
      <tags>
        <tag>Data Base</tag>
        <tag>SQL</tag>
        <tag>mySQL</tag>
        <tag>table join</tag>
      </tags>
  </entry>
  <entry>
    <title>SVG 애니메이션</title>
    <url>/2021/12/03/svg-animation/</url>
    <content><![CDATA[<p><code>SVG</code>는 <code>CSS</code>와 <code>SMIL</code>로 애니메이션을 구현할 수 있다.</p>
<a id="more"></a>

<h2 id="STROKE-애니메이션"><a href="#STROKE-애니메이션" class="headerlink" title="STROKE 애니메이션"></a>STROKE 애니메이션</h2><ul>
<li><strong>stroke-dasharray</strong>: 길이를 설정한다.</li>
<li><strong>stroke-dashoffset</strong>: 밀린 위치를 설정한다.</li>
</ul>
<p><em><strong>원</strong></em></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> dash-ani &#123;</span><br><span class="line">    <span class="selector-tag">from</span> &#123;stroke-dashoffset: <span class="number">700</span>;&#125;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;stroke-dashoffset: <span class="number">0</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">circle &#123;</span><br><span class="line">    stroke: black;</span><br><span class="line">    stroke-<span class="attribute">width</span>: <span class="number">5</span>;</span><br><span class="line">    stroke-dasharray: <span class="number">700</span>; // 길이를 설정</span><br><span class="line">    stroke-dashoffset: <span class="number">0</span>; // 밀린 위치</span><br><span class="line">    fill: transparent;</span><br><span class="line">    <span class="attribute">animation</span>: dash-ani <span class="number">2s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 800 500&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;400&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;250&quot;</span> <span class="attr">r</span>=<span class="string">&quot;100&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">circle</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><em><strong>path</strong></em></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> dash-ani &#123;</span><br><span class="line">    <span class="selector-tag">from</span> &#123;stroke-dashoffset: <span class="number">700</span>;&#125;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;stroke-dashoffset: <span class="number">0</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">path &#123;</span><br><span class="line">    stroke: black;</span><br><span class="line">    stroke-<span class="attribute">width</span>: <span class="number">5</span>;</span><br><span class="line">    stroke-dasharray: <span class="number">727</span>;</span><br><span class="line">    fill: transparent;</span><br><span class="line">    <span class="attribute">animation</span>: dash-ani <span class="number">2s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 800 500&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M 50 400 C 50 400, 300 500, 400 400 C 400 400, 600 170, 700 300&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 길이를 알 수 있다</span></span><br><span class="line"><span class="built_in">console</span>.log (<span class="built_in">document</span>.querySelector(<span class="string">&#x27;path&#x27;</span>).getTotalLength());</span><br></pre></td></tr></table></figure>

<h2 id="SMIL-애니메이션의-기본-사용법"><a href="#SMIL-애니메이션의-기본-사용법" class="headerlink" title="SMIL 애니메이션의 기본 사용법"></a>SMIL 애니메이션의 기본 사용법</h2><blockquote>
<p><strong><a href="https://www.w3.org/TR/REC-smil/">SMIL</a> 이란?</strong><br>Synchronized Multimedia Integration Language (SMIL 3.0)<br>CSS 애니메이션이 아직 처리하지 못하는 것들을 처리할 수 있기 때문에 사용한다.</p>
</blockquote>
<ul>
<li><strong>attributeName</strong> : 바꿀 속성이 어떤 것인지 기술한다.</li>
<li><strong>dur</strong> : 얼마만큼의 시간동안 재생을 시킬 것인지 설정한다.</li>
<li><strong>to</strong> : 목적 위치를 기술한다.</li>
<li><strong>repeatCount</strong> : 얼마나 반복할지를 설정한다. (무한반복은 <code>indefinite</code>)</li>
<li><strong>fill</strong> : <code>default</code>값을 지정한다. 설정하지 않으면 맨처음으로 돌아간다.</li>
<li><strong>begin</strong> : 언제 시작할지 설정한다. (<code>indefinite</code>를 입력할 경우 시작하지 않는다.)</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1000 1000&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rect</span> <span class="attr">class</span>=<span class="string">&quot;rect&quot;</span> <span class="attr">x</span>=<span class="string">&quot;10&quot;</span> <span class="attr">y</span>=<span class="string">&quot;10&quot;</span> <span class="attr">width</span>=<span class="string">&quot;20%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;20%&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">animate</span> <span class="attr">class</span>=<span class="string">&quot;ani&quot;</span> <span class="attr">attributeName</span>=<span class="string">&quot;x&quot;</span> <span class="attr">dur</span>=<span class="string">&quot;1s&quot;</span> <span class="attr">to</span>=<span class="string">&quot;700&quot;</span> <span class="attr">repeatCont</span>=<span class="string">&quot;3&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;freeze&quot;</span> <span class="attr">begin</span>=<span class="string">&quot;indefinite&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">animate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 클릭시 움직이게 한다</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> rect = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.rect&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> ani = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.ani&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    rect.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        ani.beginElement();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>인프런 SVG 마스터<br><a href="https://www.inflearn.com/course/mastering-svg">https://www.inflearn.com/course/mastering-svg</a></p>
</blockquote>
]]></content>
      <categories>
        <category>SVG</category>
      </categories>
      <tags>
        <tag>animation</tag>
        <tag>SVG</tag>
      </tags>
  </entry>
  <entry>
    <title>SVG 기본</title>
    <url>/2021/12/03/svg-basic/</url>
    <content><![CDATA[<ul>
<li><code>svg</code>의 기본 구성 태그는 아래와 같으며 <code>xmlns</code>는 생략 가능하다.</li>
<li><code>svg</code> 안에 style을 인라인으로 넣어둘 수도 있다.</li>
<li>기본 CSS와 같이 클래스를 사용하여 작업하는 것이 바람직하다.</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http:/www.w3.org/2000/svg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="기본-도형"><a href="#기본-도형" class="headerlink" title="기본 도형"></a>기본 도형</h2><h3 id="사각형"><a href="#사각형" class="headerlink" title="사각형"></a>사각형</h3><ul>
<li><code>rect</code> 태그를 사용한다.</li>
<li><strong>x</strong>, <strong>y</strong>: x축 위치와 y축 위치를 나타낸다. 단위를 생략하면 px 단위가 된다.</li>
<li>fill의 기본색은 검은색이다.</li>
<li><strong>stroke</strong>: 테두리(기본 1px)</li>
<li><strong>stroke-width</strong>: 테두리 너비. 단위 생략하면 px 단위가 된다.</li>
<li><strong>rx</strong>, <strong>ry</strong>: 꼭지점이 둥근 사각형을 만들 수 있다.</li>
<li>첫번째 사각형와 두번째 사각형 모두 같은 사각형이다.</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http:/www.w3.org/2000/svg&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;10&quot;</span> <span class="attr">y</span>=<span class="string">&quot;20&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;10&quot;</span> <span class="attr">y</span>=<span class="string">&quot;20&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;10&quot;</span> <span class="attr">y</span>=<span class="string">&quot;20&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span> <span class="attr">rx</span>=<span class="string">&quot;10&quot;</span> <span class="attr">ry</span>=<span class="string">&quot;10&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="원형"><a href="#원형" class="headerlink" title="원형"></a>원형</h3><ul>
<li><strong>circle</strong><ul>
<li>정원.</li>
<li>가운데 위치한다.</li>
<li><code>r</code>: 반지름</li>
<li><code>cx</code>, <code>cy</code>: 위치를 나타낸다.</li>
</ul>
</li>
<li><strong>ellipse</strong><ul>
<li>타원.</li>
<li>타원이기 때문에 rx의 길이와 ry의 길이가 다르다.</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http:/www.w3.org/2000/svg&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 정원 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;50&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;250&quot;</span> <span class="attr">r</span>=<span class="string">&quot;30&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">circle</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 타원 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ellipse</span> <span class="attr">cx</span>=<span class="string">&quot;350&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;350&quot;</span> <span class="attr">rx</span>=<span class="string">&quot;100&quot;</span> <span class="attr">ry</span>=<span class="string">&quot;50&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ellipse</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="선"><a href="#선" class="headerlink" title="선"></a>선</h3><ul>
<li><strong>line</strong><ul>
<li>x, y축 모두 선을 긋는 출발 지점과 끝나는 지점을 설명해주어야 한다.</li>
</ul>
</li>
<li><strong>polyline</strong>, <strong>polygon</strong><ul>
<li>직선을 계속 잇는다는 개념이다.</li>
<li><code>polyline</code>과 달리 <code>polygon</code>은 마무리를 해주어 온전하게 다각형을 만들어준다.</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http:/www.w3.org/2000/svg&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 선 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">&quot;10&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;100&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;30&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;300&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;blue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">line</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- polyline --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">polyline</span> <span class="attr">points</span>=<span class="string">&quot;0 0, 200 100, 150 300&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">stroke</span>=<span class="string">&quot;red&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">polyline</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- polygon --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">polygon</span> <span class="attr">points</span>=<span class="string">&quot;0 0, 200 100, 150 300&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">stroke</span>=<span class="string">&quot;red&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">polygon</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Patch"><a href="#Patch" class="headerlink" title="Patch"></a>Patch</h3><ul>
<li><strong>M</strong>: 펜툴의 시작점</li>
<li><strong>L</strong>: 어디로 그을지 선언한다.</li>
<li><strong>H</strong>: 가로 직선</li>
<li><strong>V</strong>: 수직 방향 직선</li>
<li><strong>Z</strong>: path를 마무리한다.</li>
<li><strong>C</strong>: 커브를 그리려고 할 때 C라고 기재한다. 여기서 세가지 점을 입력한다.</li>
<li>곡선을 그리고 싶을 경우 시작점, 조정하는 포인트 점, 끝점을 순서대로 입한다.</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http:/www.w3.org/2000/svg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M 300 200 L 500 100 H 50 V 300 Z&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;red&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">stroke-width</span>=<span class="string">&quot;5&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;transparent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M 100 150 C 100 150, 300 50, 500 250&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="텍스트"><a href="#텍스트" class="headerlink" title="텍스트"></a>텍스트</h2><h3 id="기본-텍스트"><a href="#기본-텍스트" class="headerlink" title="기본 텍스트"></a>기본 텍스트</h3><ul>
<li><code>text</code> 태그를 사용한다.</li>
<li><code>font-size</code> / <code>font-weight</code> / <code>fill</code> 등으로 조정한다.</li>
<li>HTML 기본 텍스트와 달리 색상을 <code>color</code>가 아닌 <code>fill</code>로 조절한다.</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http:/www.w3.org/2000/svg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">&quot;20&quot;</span> <span class="attr">y</span>=<span class="string">&quot;50&quot;</span>&gt;</span>HELLO, WORLD!<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="곡선-텍스트"><a href="#곡선-텍스트" class="headerlink" title="곡선 텍스트"></a>곡선 텍스트</h3><ul>
<li><code>font-size</code> / <code>font-weight</code> / <code>fill</code> 등으로 조정한다.</li>
<li><strong>defs</strong>: 나중에 참조할 그래픽 요소들을 담아둘 공간. 도형이나 마스크, 그라데이션 등을 정의하여 defs 안에 넣어둘 수 있다.</li>
<li><code>path</code>에 id값을 주고 <code>textPath href</code>에 아이디값을 넣어주면 글이 해당 <code>path</code> 모양으로 적용된다.</li>
<li><strong>tspan</strong>: 강조하고 싶을 때 <code>tspan</code>을 사용한다.</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http:/www.w3.org/2000/svg&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 참조공간 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defs</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span> <span class="attr">id</span>=<span class="string">&quot;text-curve&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">d</span>=<span class="string">&quot;M 50 400 C 50 400, 300 500, 400 400</span></span></span><br><span class="line"><span class="tag"><span class="string">        C 400 400, 600 170, 700 300&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;red&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">stroke-width</span>=<span class="string">&quot;5&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;transparent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 텍스트 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">&quot;20&quot;</span> <span class="attr">y</span>=<span class="string">&quot;50&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textPath</span> <span class="attr">href</span>=<span class="string">&quot;#text-curve&quot;</span>&gt;</span></span><br><span class="line">        HELLO,</span><br><span class="line">        <span class="tag">&lt;<span class="name">tspan</span> <span class="attr">style</span>=<span class="string">&quot;fill: red;&quot;</span>&gt;</span>WORLD<span class="tag">&lt;/<span class="name">tspan</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">textPath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="그룹"><a href="#그룹" class="headerlink" title="그룹"></a>그룹</h2><ul>
<li>묶고 싶은 그룹들을 <code>&lt;g&gt; &lt;/g&gt;</code>로 감싼다.</li>
<li>각자에게 스타일을 준다면 해당 스타일이 우선 적용된다.</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http:/www.w3.org/2000/svg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">g</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;10&quot;</span> <span class="attr">y</span>=<span class="string">&quot;20&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;200&quot;</span> <span class="attr">y</span>=<span class="string">&quot;300&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>인프런 SVG 마스터<br><a href="https://www.inflearn.com/course/mastering-svg">https://www.inflearn.com/course/mastering-svg</a></p>
</blockquote>
]]></content>
      <categories>
        <category>SVG</category>
      </categories>
      <tags>
        <tag>SVG</tag>
      </tags>
  </entry>
  <entry>
    <title>SVG 효과</title>
    <url>/2021/12/03/svg-effect/</url>
    <content><![CDATA[<p><code>svg</code>에 그라디언트, 패턴, 마스크 효과를 줄 수 있다.</p>
<a id="more"></a>

<h2 id="그라디언트"><a href="#그라디언트" class="headerlink" title="그라디언트"></a>그라디언트</h2><ul>
<li><code>linearGradient</code> 혹은 <code>radialGradient</code> 태그로 그라디언트를 적용할 수 있다.</li>
<li><code>stop</code> 태그 안의 <code>offset</code>에 위치를 설정한다.</li>
<li><code>stop</code> 태그 안의 <code>stop-color</code>에 컬러값을 넣는다.</li>
<li><code>fill</code>로 그라디언트 아이디를 넣어 출력할 수 있다.</li>
</ul>
<p><em><strong>선형 그라디언트</strong></em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">defs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">id</span>=<span class="string">&quot;linear-gradient&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0%&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;yellow&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;hotpink&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;deepskyblue&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">linearGradient</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        .path &#123;</span><br><span class="line"><span class="css">            fill: <span class="built_in">url</span>(<span class="string">&#x27;#linear-gradient&#x27;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><em><strong>원형 그라디언트</strong></em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">defs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">radialGradient</span> <span class="attr">id</span>=<span class="string">&quot;radial-gradient&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0%&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;yellow&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;hotpink&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;deepskyblue&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">radialGradient</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        .path &#123;</span><br><span class="line"><span class="css">            fill: <span class="built_in">url</span>(<span class="string">&#x27;#radial-gradient&#x27;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="패턴"><a href="#패턴" class="headerlink" title="패턴"></a>패턴</h2><ul>
<li><strong>x, y</strong>: 패턴 위치</li>
<li><strong>width, height</strong>: 패턴의 크기. 0.1은 1/10을 뜻한다.</li>
<li><code>fill</code>로 패턴 아이디를 넣어 출력할 수 있다.</li>
<li>반응형으로 채우고 싶을 경우 <code>viewBox</code>를 사용한다.</li>
<li>svg를 CSS 애니메이션으로 만들 수 있다.</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 500 500&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defs</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pattern</span> <span class="attr">id</span>=<span class="string">&quot;pattern&quot;</span> <span class="attr">x</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;0.1&quot;</span> <span class="attr">height</span>=<span class="string">&quot;0.1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;25&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;25&quot;</span> <span class="attr">class</span>=<span class="string">&quot;pattern-circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">circle</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">            svg &#123;</span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">background</span>: <span class="number">#ddd</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            .pattern-circle &#123;</span><br><span class="line"><span class="css">                fill: <span class="number">#fff000</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rect</span> <span class="attr">class</span>=<span class="string">&quot;bg-rect&quot;</span> <span class="attr">x</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">fill</span>=<span class="string">&quot;url(#pattern)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><em><strong>애니메이션이 적용된 패턴</strong></em></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">bunny.svg</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">defs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="keyword">@keyframes</span> ani &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">from</span> &#123; <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(<span class="number">1</span>);&#125;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">to</span> &#123; <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(<span class="number">0.2</span>);&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">        .animation &#123;</span><br><span class="line"><span class="css">            <span class="attribute">animation</span>: ani <span class="number">0.5s</span> alternate infinite;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Mask"><a href="#Mask" class="headerlink" title="Mask"></a>Mask</h2><ul>
<li><code>defs</code> 안에 <code>mask</code>를 생성하여 마스크 씌우길 원하는 모양을 생성한다.</li>
<li>색상은 <strong>하얀색</strong>(<code>fill=&quot;#ffffff&quot;</code>)이어야 한다.</li>
<li>검은색에 수렴할수록 투명해지며 흰색으로 수렴할수록 선명하게 보인다.</li>
<li><code>g mask=&quot;url(#해당 마스크 아이디 이름)&quot;</code>로 입힐 수 있다.</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">class</span>=<span class="string">&quot;svg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defs</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mask</span> <span class="attr">id</span>=<span class="string">&quot;mask-circle&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;50&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;50&quot;</span> <span class="attr">r</span>=<span class="string">&quot;40&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;white&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">g</span> <span class="attr">mask</span>=<span class="string">&quot;url(#mask-circle)&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">&quot;10&quot;</span> <span class="attr">y</span>=<span class="string">&quot;10&quot;</span>&gt;</span> Hello SVG!<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>인프런 SVG 마스터<br><a href="https://www.inflearn.com/course/mastering-svg">https://www.inflearn.com/course/mastering-svg</a></p>
</blockquote>
]]></content>
      <categories>
        <category>SVG</category>
      </categories>
      <tags>
        <tag>SVG</tag>
        <tag>effect</tag>
      </tags>
  </entry>
  <entry>
    <title>SVG 돋보기</title>
    <url>/2021/12/25/svg-exercise001/</url>
    <content><![CDATA[<p>SVG의 마스크 효과와 자바스크립트를 이용하여 돋보기 효과 만들기.</p>
<a id="more"></a>

<p><img src="/images/svg-magnifier.gif" alt="css bar animation"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">xmlns:xlink</span>=<span class="string">&quot;http://www.w3.org/1999/xlink&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defs</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pattern</span> <span class="attr">id</span>=<span class="string">&quot;pattern-bg&quot;</span> <span class="attr">x</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;0.2&quot;</span> <span class="attr">height</span>=<span class="string">&quot;0.2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M28.1,23.8l12.4-6.1c0,0,0,0,0,0c0,0,0,0,0,0L12,41.7L12,41.6l45.3-26.9c0.1,0,0.1,0,0.1,0c0,0,0,0.1,0,0.1</span></span></span><br><span class="line"><span class="tag"><span class="string">                L9.7,50.5l-0.2-0.3l56.6-34.1c0.1-0.1,0.3,0,0.3,0.1c0.1,0.1,0,0.2-0.1,0.3L5.8,59.9l-0.3-0.5l68.2-41.5c0.2-0.1,0.4-0.1,0.5,0.1</span></span></span><br><span class="line"><span class="tag"><span class="string">                c0.1,0.2,0.1,0.4-0.1,0.5L5.9,66.3l-0.5-0.8l76.9-44.6c0.3-0.2,0.6-0.1,0.8,0.2c0.2,0.3,0.1,0.6-0.2,0.8L6,73.3l-0.7-1.1l83.2-47.8</span></span></span><br><span class="line"><span class="tag"><span class="string">                c0.4-0.2,0.8-0.1,1.1,0.3c0.2,0.4,0.1,0.8-0.2,1L9,80.9l-0.9-1.4l83.5-48.8c0.4-0.2,1-0.1,1.2,0.3c0.2,0.4,0.1,0.9-0.3,1.2</span></span></span><br><span class="line"><span class="tag"><span class="string">                L11.7,86.5l-1-1.6l84.8-48.8c0.5-0.3,1.1-0.1,1.4,0.4c0.3,0.5,0.1,1-0.3,1.3L16,93.2l-1.2-1.8l92.5-57.5c0.5-0.3,1.2-0.2,1.6,0.4</span></span></span><br><span class="line"><span class="tag"><span class="string">                c0.3,0.5,0.2,1.2-0.3,1.5l-88,63.8l-1.4-2l119.4-80.7c0.6-0.4,1.4-0.2,1.8,0.3c0.4,0.6,0.2,1.3-0.3,1.7L24.9,105l-1.6-2.2</span></span></span><br><span class="line"><span class="tag"><span class="string">                l130.2-87.5c0.6-0.4,1.5-0.3,1.9,0.4c0.4,0.6,0.3,1.4-0.3,1.9L28.6,111.1l-1.6-2.3l136.5-91.5c0.7-0.4,1.6-0.3,2,0.4</span></span></span><br><span class="line"><span class="tag"><span class="string">                c0.4,0.6,0.3,1.5-0.3,2L32.9,117.5l-1.7-2.4l139.4-94.1c0.7-0.5,1.6-0.3,2.1,0.4c0.4,0.7,0.3,1.6-0.3,2L39,123.6l-1.8-2.5</span></span></span><br><span class="line"><span class="tag"><span class="string">                l138.6-95.2c0.7-0.5,1.7-0.3,2.2,0.4c0.5,0.7,0.3,1.6-0.4,2.1L43,128.6l-1.8-2.5l139.7-95.1c0.7-0.5,1.7-0.3,2.1,0.4</span></span></span><br><span class="line"><span class="tag"><span class="string">                c0.5,0.7,0.3,1.6-0.3,2.1L49,134.3l-1.8-2.4L187,35.7c0.7-0.5,1.6-0.3,2,0.4c0.4,0.6,0.3,1.5-0.3,2L55.6,139l-1.7-2.3l136-95.1</span></span></span><br><span class="line"><span class="tag"><span class="string">                c0.6-0.4,1.5-0.3,2,0.3c0.4,0.6,0.3,1.5-0.3,1.9l-130,100.4L60,142l133.9-94.3c0.6-0.4,1.4-0.3,1.9,0.3c0.4,0.6,0.3,1.4-0.3,1.8</span></span></span><br><span class="line"><span class="tag"><span class="string">                l-129,99.8l-1.5-2l129-90.3c0.5-0.4,1.2-0.2,1.6,0.3c0.4,0.5,0.2,1.2-0.2,1.6L72.2,155.3l-1.3-1.7l123.2-86.1</span></span></span><br><span class="line"><span class="tag"><span class="string">                c0.4-0.3,1.1-0.2,1.4,0.2c0.3,0.4,0.2,1-0.2,1.3L77.4,161.8l-1.1-1.4l116-82.4c0.4-0.3,0.9-0.2,1.1,0.2c0.3,0.4,0.2,0.8-0.2,1.1</span></span></span><br><span class="line"><span class="tag"><span class="string">                L82.8,166.4l-0.8-1.1l108.2-75.4c0.2-0.2,0.6-0.1,0.7,0.1c0.2,0.2,0.1,0.5-0.1,0.7L87.9,172.2l-0.5-0.6l87.8-60.5</span></span></span><br><span class="line"><span class="tag"><span class="string">                c0.1-0.1,0.3-0.1,0.4,0.1c0.1,0.1,0.1,0.3-0.1,0.4L92,176.8l-0.2-0.3l49.6-30.8c0.1,0,0.1,0,0.2,0c0,0,0,0.1,0,0.1l-45.1,35</span></span></span><br><span class="line"><span class="tag"><span class="string">                l-0.1-0.1l21.4-10.3c0,0,0,0,0,0c0,0,0,0,0,0l-17.5,15l17.5-15l0,0l-21.3,10.3c0,0-0.1,0-0.1,0c0,0,0,0,0-0.1l45-35.1l0.1,0.2</span></span></span><br><span class="line"><span class="tag"><span class="string">                l-49.5,30.9c-0.1,0-0.2,0-0.2-0.1c0-0.1,0-0.2,0-0.2l83.5-65.5l0.3,0.5l-87.7,60.7c-0.2,0.1-0.4,0.1-0.5-0.1</span></span></span><br><span class="line"><span class="tag"><span class="string">                c-0.1-0.2-0.1-0.4,0.1-0.5l102.7-81.7l0.6,0.8l-108,75.6c-0.3,0.2-0.7,0.1-0.9-0.2c-0.2-0.3-0.1-0.7,0.1-0.9l110.4-87.4l1,1.3</span></span></span><br><span class="line"><span class="tag"><span class="string">                L77.3,161.8c-0.4,0.3-1,0.2-1.2-0.2c-0.3-0.4-0.2-0.9,0.2-1.2l117.8-92.9l1.2,1.6l-123,86.3c-0.5,0.3-1.1,0.2-1.5-0.3</span></span></span><br><span class="line"><span class="tag"><span class="string">                c-0.3-0.5-0.2-1.1,0.2-1.5l123-96.3l1.4,1.9L66.5,149.7c-0.6,0.4-1.3,0.3-1.7-0.3c-0.4-0.5-0.3-1.3,0.3-1.7l128.8-100l1.6,2.2</span></span></span><br><span class="line"><span class="tag"><span class="string">                L61.5,144.3c-0.6,0.4-1.5,0.3-1.9-0.3c-0.4-0.6-0.3-1.4,0.3-1.9L189.9,41.6l1.7,2.3l-136,95.2c-0.6,0.5-1.5,0.3-2-0.4</span></span></span><br><span class="line"><span class="tag"><span class="string">                c-0.4-0.6-0.3-1.5,0.3-2l133.1-101l1.7,2.4L49,134.4c-0.7,0.5-1.6,0.3-2.1-0.4c-0.5-0.7-0.3-1.6,0.3-2L180.8,31l1.8,2.5L42.9,128.6</span></span></span><br><span class="line"><span class="tag"><span class="string">                c-0.7,0.5-1.7,0.3-2.2-0.4c-0.5-0.7-0.3-1.6,0.4-2.1L175.8,25.9l1.8,2.5L39,123.6c-0.7,0.5-1.7,0.3-2.1-0.4</span></span></span><br><span class="line"><span class="tag"><span class="string">                c-0.5-0.7-0.3-1.6,0.3-2.1L170.6,21l1.7,2.4L32.8,117.5c-0.7,0.5-1.6,0.3-2-0.4c-0.4-0.7-0.3-1.5,0.3-2l132.3-97.8l1.7,2.3</span></span></span><br><span class="line"><span class="tag"><span class="string">                L28.6,111.1c-0.6,0.4-1.5,0.3-1.9-0.4c-0.4-0.6-0.3-1.5,0.3-1.9l126.5-93.6l1.6,2.2L24.9,105c-0.6,0.4-1.5,0.3-1.9-0.4</span></span></span><br><span class="line"><span class="tag"><span class="string">                c-0.4-0.6-0.3-1.4,0.3-1.8l115.2-85.9L140,19L20.6,99.6c-0.5,0.4-1.3,0.2-1.7-0.3c-0.4-0.5-0.2-1.3,0.3-1.6l88.1-63.7l1.3,1.9</span></span></span><br><span class="line"><span class="tag"><span class="string">                L16,93.2c-0.5,0.3-1.2,0.2-1.5-0.3c-0.3-0.5-0.2-1.1,0.3-1.4l80.7-55.3l1.1,1.7L11.7,86.5c-0.5,0.3-1,0.1-1.3-0.4</span></span></span><br><span class="line"><span class="tag"><span class="string">                c-0.2-0.4-0.1-1,0.3-1.3l81-54.3l0.9,1.5L9,80.9c-0.4,0.2-0.9,0.1-1.1-0.3c-0.2-0.4-0.1-0.9,0.3-1.1l80.4-55l0.8,1.3L6,73.4</span></span></span><br><span class="line"><span class="tag"><span class="string">                c-0.3,0.2-0.7,0.1-0.9-0.2c-0.2-0.3-0.1-0.7,0.2-0.9l77-51.3l0.6,1l-77,44.5c-0.2,0.1-0.5,0.1-0.7-0.2c-0.1-0.2-0.1-0.5,0.1-0.6</span></span></span><br><span class="line"><span class="tag"><span class="string">                l68.3-47.6l0.4,0.7L5.8,59.9c-0.1,0.1-0.3,0-0.4-0.1c-0.1-0.1,0-0.3,0.1-0.4l60.7-43.2l0.3,0.4L9.7,50.5c-0.1,0-0.2,0-0.2-0.1</span></span></span><br><span class="line"><span class="tag"><span class="string">                c0-0.1,0-0.2,0-0.2l47.7-35.5l0.1,0.2L12,41.7c0,0-0.1,0-0.1,0c0,0,0-0.1,0-0.1l28.5-24l0,0L28.1,23.8z&quot;</span>  <span class="attr">fill</span>=<span class="string">#E01279</span>&quot; /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">mask</span> <span class="attr">id</span>=<span class="string">&quot;mask&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;122.9&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;122.9&quot;</span> <span class="attr">r</span>=<span class="string">&quot;93.7&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#ffffff&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mask</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">            .bg &#123;</span><br><span class="line"><span class="css">                fill: <span class="built_in">url</span>(<span class="string">#pattern-bg</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> magnifier = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.magnifier&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> mask = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#mask circle&#x27;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;mousemove&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    magnifier.style.transform = <span class="string">`translate(<span class="subst">$&#123;e.clientX-<span class="number">120</span>&#125;</span>px, <span class="subst">$&#123;e.clientY-<span class="number">120</span>&#125;</span>px)`</span>;</span></span><br><span class="line"><span class="javascript">                    mask.style.transform = <span class="string">`translate(<span class="subst">$&#123;e.clientX-<span class="number">120</span>&#125;</span>px, <span class="subst">$&#123;e.clientY-<span class="number">120</span>&#125;</span>px)`</span>;</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">g</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span> <span class="attr">class</span>=<span class="string">&quot;magnifier&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M122.9,19.9c28.5,0,54.2,11.5,72.9,30.2c18.6,18.6,30.2,44.4,30.2,72.9c0,26.8-10.2,51.2-26.9,69.5l39,39</span></span></span><br><span class="line"><span class="tag"><span class="string">        c1.8,1.8,1.8,4.8,0,6.6c-1.8,1.8-4.8,1.8-6.6,0l-39-39c-18.3,16.7-42.7,26.9-69.5,26.9c-28.5,0-54.2-11.5-72.9-30.2</span></span></span><br><span class="line"><span class="tag"><span class="string">        s-30.2-44.4-30.2-72.9c0-28.5,11.5-54.2,30.2-72.9S94.4,19.9,122.9,19.9L122.9,19.9z M189.1,56.7c-17-17-40.4-27.4-66.2-27.4</span></span></span><br><span class="line"><span class="tag"><span class="string">        S73.6,39.7,56.7,56.7c-17,17-27.4,40.4-27.4,66.2s10.5,49.3,27.4,66.2c17,17,40.4,27.4,66.2,27.4s49.3-10.5,66.2-27.4</span></span></span><br><span class="line"><span class="tag"><span class="string">        c17-17,27.4-40.4,27.4-66.2S206.1,73.6,189.1,56.7z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#011627&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">g</span> <span class="attr">mask</span>=<span class="string">&quot;url(#mask)&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rect</span> <span class="attr">class</span>=<span class="string">&quot;bg&quot;</span> <span class="attr">x</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100vw&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100vh&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>인프런 SVG 마스터<br><a href="https://www.inflearn.com/course/mastering-svg">https://www.inflearn.com/course/mastering-svg</a></p>
</blockquote>
]]></content>
      <categories>
        <category>exercise</category>
        <category>SVG</category>
      </categories>
      <tags>
        <tag>exercise</tag>
        <tag>SVG</tag>
      </tags>
  </entry>
  <entry>
    <title>SVG 그래픽 로고가 그려지는 애니메이션</title>
    <url>/2021/12/26/svg-exercise002/</url>
    <content><![CDATA[<p>그래픽 로고가 그려지는 애니메이션 만들기.</p>
<a id="more"></a>

<p><img src="/images/svg-logo-animation.gif" alt="css bar animation"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">xmlns:xlink</span>=<span class="string">&quot;http://www.w3.org/1999/xlink&quot;</span> <span class="attr">x</span>=<span class="string">&quot;0px&quot;</span> <span class="attr">y</span>=<span class="string">&quot;0px&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">viewBox</span>=<span class="string">&quot;0 0 300 80&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defs</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="keyword">@keyframes</span> logo-ani &#123;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">from</span> &#123;stroke-dashoffset: <span class="number">1237</span>;&#125;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">to</span> &#123;stroke-dashoffset: <span class="number">0</span>;&#125;</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line"><span class="css">            <span class="selector-id">#mask</span>&#123;fill:none;stroke:<span class="number">#ffffff</span>;stroke-<span class="attribute">width</span>:<span class="number">5</span>;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:<span class="number">10</span>;&#125;</span></span><br><span class="line">            </span><br><span class="line">            .logo &#123;</span><br><span class="line"><span class="css">                stroke-dasharray: <span class="number">1237</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">animation</span>: logo-ani <span class="number">10s</span> linear;</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mask</span> <span class="attr">id</span>=<span class="string">&quot;mask&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">g</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">path</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M23,27l-2,21l26-8l-8-23l-8,49l18-32l5-5c0,0,7,1,7,6s1,6,0,10s-4,8-6,9s-6,1-6-1s1-9,2-13s2-6,5-6s14-8,14-8</span></span></span><br><span class="line"><span class="tag"><span class="string">                l-2.5,22.5L94,40L84,21l-8,45l33-45v43l-5-29l5.5-6.5l12.8,29.3l0.9-46.5l12.4,29.2c0,0-1,6-5,11c0,0-1,4,1,5s3,0,4-2s4-6,4-9</span></span></span><br><span class="line"><span class="tag"><span class="string">                s1-7,0-8s4-3,4-3l-1,3v6l23-5l-11-19l-3,36l25-20l3-6l20-4l-15,6l-3,28l-4-17l27-6l3,4c0,0-4,7-4,8s-2,6-1,7s3,1,4,0s3-4,4-8</span></span></span><br><span class="line"><span class="tag"><span class="string">                s2-7,1-9s-2-3-2-3l6-2c0,0,3-1,3,4s-2,8-1,11s2,3,3,3s4-5,5-7s3-12,3-12s-2,17-1,20s3,5,3,5s3-7,4-9s10-13,10-13s-3,20-2,22</span></span></span><br><span class="line"><span class="tag"><span class="string">                s7-20,8-20s3,17,4,17s2-3,2-3l13-29c0,0,6-3,5,1s-4,18-4,20s1,16,1,16l-1-16c0,0-5,2-6,3s-4,6-4,7s9,2,10,2s13-2,13-2&quot;</span>/&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mask</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">g</span> <span class="attr">mask</span>=<span class="string">&quot;url(#mask)&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M38.5,26.9c-0.9,5.3-1.6,9.8-2.3,15.2c1.9-0.4,3.6-0.9,5.4-1.3c0.3-0.1,0.6-0.2,0.9-0.2c1.3-0.3,1.8-0.4,5.2-0.5</span></span></span><br><span class="line"><span class="tag"><span class="string">            c-1.2,1-1.3,1.2-1.7,1.4c-0.3,0.2-0.8,0.4-1.2,0.8l-9.2,2.7c-0.8,3.8-1.3,7.3-2,11c-0.5,2.7-1,5.7-1.6,8.3c-0.4,0.4-0.7,0.6-1,0.3</span></span></span><br><span class="line"><span class="tag"><span class="string">            c-0.1,0-0.2-0.1-0.2-0.1L30,63.1c0-2.1,0.2-3.8,0.5-5.5c0.2-0.9,0.3-1.9,0.4-2.9l0.8-4c0.1-0.6,0.2-1.3,0.3-2</span></span></span><br><span class="line"><span class="tag"><span class="string">            c0.2-1,0.3-1.7,0.4-2.7c-0.8,0.2-1.6,0.4-2.3,0.6l-2,0.7c-1.9,0.6-3.7,1.2-5.5,2.4c-1.4,0-2.5-0.1-2.9-1.6c0-0.8,0.3-1,0.6-1.3</span></span></span><br><span class="line"><span class="tag"><span class="string">            c0.2-0.1,0.2-0.2,0.4-0.5c0.7-4.6,1.1-10.4,1.3-15.3c0.8-0.4,1.6-0.4,2.1-0.3c0.1,0,0.3,0.1,0.4,0.1c0.7,1.4,0.6,2.5,0.5,3.7</span></span></span><br><span class="line"><span class="tag"><span class="string">            c-0.1,1.1-0.1,2.2-0.3,3.2v0.8c-0.1,1.8-0.3,3.5-0.5,5.3c-0.1,0.9-0.1,0.9-0.2,1.8c1.2-0.3,2.4-0.7,3.7-1.1c1.8-0.6,3.2-1.1,5-1.5</span></span></span><br><span class="line"><span class="tag"><span class="string">            c0.3-1.6,0.6-3.4,0.8-5.1c0.5-3.3,1-6.8,1.6-10.1v-0.3c0.1-0.6,0.2-1.4,0.9-2h0.5c0.9-0.1,1.8-0.1,1.9,1.3V26.9z&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M62.2,40.3c0,2.4-0.3,4.8-0.8,6.8c-0.7,2.4-2.4,5.1-4.3,7c-1.1,0.8-2.7,1.6-4.3,1.6c-0.7,0-1.4-0.1-1.9-0.4</span></span></span><br><span class="line"><span class="tag"><span class="string">            c-0.9-0.4-1.5-0.7-2-1.6c-0.4-1.4-0.6-2.7-0.6-3.8c0-2.6,0.6-5,1.3-7.3c0.3-0.9,0.6-1.9,0.8-2.8c0.4-0.7,0.7-1.4,1-2.3</span></span></span><br><span class="line"><span class="tag"><span class="string">            c0.9-2.4,2-5,5.3-4.3c0.7,0.6,0.5,0.7,0.5,1.2V35c-2,0.8-2.6,2.4-3.2,3.9c-0.1,0.4-0.3,0.9-0.4,1.3c-0.2,0.8-0.4,1.6-0.7,2.4</span></span></span><br><span class="line"><span class="tag"><span class="string">            c-0.6,2-1.4,4.5-1.4,6.5c0,1.1,0.2,2.3,0.6,3.3c0.4,0.3,1.4,0.6,1.9,0.3c3.8-2.9,5.1-7.4,5.1-12.2c0-1.8-0.2-3.7-0.4-5.4</span></span></span><br><span class="line"><span class="tag"><span class="string">            c0-0.1-0.1-0.7-0.2-0.8c-0.3-1.1-0.5-2-1.7-2.3c-0.8-0.5-1.7-0.4-2.5-0.4c-0.6,0-1.4-0.1-2.4-0.3c1.7-2.4,3.4-2.3,5.2-2.2</span></span></span><br><span class="line"><span class="tag"><span class="string">            c1.2,0.5,2.3,0.9,3.1,1.9C61.6,33.7,62.2,37,62.2,40.3z&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M84.4,26.9c-0.9,5.3-1.6,9.8-2.3,15.2c1.9-0.4,3.6-0.9,5.4-1.3c0.3-0.1,0.6-0.2,0.9-0.2c1.3-0.3,1.8-0.4,5.2-0.5</span></span></span><br><span class="line"><span class="tag"><span class="string">            c-1.2,1-1.3,1.2-1.7,1.4c-0.3,0.2-0.8,0.4-1.2,0.8l-9.2,2.7c-0.8,3.8-1.3,7.3-2,11c-0.5,2.7-1,5.7-1.6,8.3c-0.4,0.4-0.7,0.6-1,0.3</span></span></span><br><span class="line"><span class="tag"><span class="string">            c-0.1,0-0.2-0.1-0.2-0.1l-0.9-1.6c0-2.1,0.2-3.8,0.5-5.5c0.2-0.9,0.3-1.9,0.4-2.9l0.8-4c0.1-0.6,0.2-1.3,0.3-2</span></span></span><br><span class="line"><span class="tag"><span class="string">            c0.2-1,0.3-1.7,0.4-2.7c-0.8,0.2-1.6,0.4-2.3,0.6l-2,0.7c-1.9,0.6-3.7,1.2-5.5,2.4c-1.4,0-2.5-0.1-2.9-1.6c0-0.8,0.3-1,0.6-1.3</span></span></span><br><span class="line"><span class="tag"><span class="string">            c0.2-0.1,0.2-0.2,0.4-0.5c0.7-4.6,1.1-10.4,1.3-15.3c0.8-0.4,1.6-0.4,2.1-0.3c0.1,0,0.3,0.1,0.4,0.1c0.7,1.4,0.6,2.5,0.5,3.7</span></span></span><br><span class="line"><span class="tag"><span class="string">            c-0.1,1.1-0.1,2.2-0.3,3.2v0.8c-0.1,1.8-0.3,3.5-0.5,5.3c-0.1,0.9-0.1,0.9-0.2,1.8c1.2-0.3,2.4-0.7,3.7-1.1c1.8-0.6,3.2-1.1,5-1.5</span></span></span><br><span class="line"><span class="tag"><span class="string">            c0.3-1.6,0.6-3.4,0.8-5.1c0.5-3.3,1-6.8,1.6-10.1v-0.3c0.1-0.6,0.2-1.4,0.9-2h0.5c0.9-0.1,1.8-0.1,1.9,1.3V26.9z&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M125.3,18.6c-1.1,2.2-1.2,4.5-1.4,6.9c-0.1,1.5-0.2,3.1-0.5,4.4c-0.1,1.4-0.1,2.7-0.2,4.2c0.1,1.6,0.1,3.8,0.2,5.4</span></span></span><br><span class="line"><span class="tag"><span class="string">            c0.2,4,0.3,8.6,0.3,12.4c0.1,1.9,0.2,3.5,0.7,5.7c-1.1,0.4-2,0.4-2.8,0.1c-1.2-1.5-2.2-3.1-3.2-4.7c-0.4-0.6-0.8-1.3-1.2-1.8</span></span></span><br><span class="line"><span class="tag"><span class="string">            c-2.1-3.7-4.5-9.5-6.2-14.2c-0.2,2.1-0.3,4.4-0.3,6.7c0,3.7,0.2,7.5,0.4,11c0.1,2.2,0.2,4.9,0.3,6.8c-1.6,0.4-2-0.2-2.6-0.6</span></span></span><br><span class="line"><span class="tag"><span class="string">            c-0.1-0.1-0.3-0.3-0.4-0.3c-0.1-1.2-0.2-2.7-0.3-3.9c-0.2-2.3-0.4-4.9-0.4-7.5c0-0.5,0.1-1.3,0.1-1.9c0.1-0.1,0.1-1.4,0.1-3.2</span></span></span><br><span class="line"><span class="tag"><span class="string">            c0-1.1-0.1-2.3-0.1-3.4c0-1.9,0.1-3.5,0.4-4.2v-1.9l0.1-6.4c0.1-0.1,0.8-0.3,0.9-0.4c0.6-0.2,1.2-0.4,2.1,0.6</span></span></span><br><span class="line"><span class="tag"><span class="string">            c0.5,0.8,0.7,1.6,0.8,2.2c0.1,0.3,0.2,0.7,0.3,1.1c1.9,5.6,5.3,13.9,8.3,19.4c0-0.4-0.1-0.8-0.1-1.1c0-1.7-0.1-3.6-0.1-5.4</span></span></span><br><span class="line"><span class="tag"><span class="string">            c-0.1-2.9-0.2-5.8-0.2-8.7c0-4,0.2-8,0.7-11.3c0.4-2.1,1.1-3.9,1.7-5.4c0.3-0.2,0.4-0.4,0.5-0.6l0.6-1.2L125.3,18.6z&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M141.1,41.6c0,3.9-1.2,7.8-2.8,11.7c-0.9,1.7-2.2,3.9-5.2,4.7c-2.1-0.2-3.5-1.3-4.2-2.7c-0.6-4.6,1.8-8.6,4.3-12.4</span></span></span><br><span class="line"><span class="tag"><span class="string">            c0.2-0.3,0.4-0.7,0.6-1c0.9-0.9,1.3-2,2.4-2.7c1.7,0.2,1.8,0.8,1.7,1.9c-2.9,3.4-5.1,7.9-5.9,11.3c-0.2,1.3-0.2,2.3,0.7,2.8</span></span></span><br><span class="line"><span class="tag"><span class="string">            c2-0.5,2.9-2.7,3.6-4.3c0.8-1.9,1.6-4.4,1.9-6.9c0.2-1,0.3-1.9,0.3-2.8c0-1.1-0.1-2.2-0.2-3.4c-0.8-0.2-0.7-0.7-0.7-1.4</span></span></span><br><span class="line"><span class="tag"><span class="string">            c1.3-0.8,2.9,0,3.2,1.3C141,38.9,141.1,40.2,141.1,41.6z&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M154.7,26c0.2,2.2-0.2,4.2-0.6,6.4c-0.3,1.7-0.6,3.3-0.6,5l-0.2,1.8c0.1,0,0.2-0.1,0.3-0.1c0.5-0.1,1.1-0.3,1.7-0.3</span></span></span><br><span class="line"><span class="tag"><span class="string">            c2.4-0.4,4.8-0.7,7.3-1.1c0.3,0.1,0.9,0.2,1.9,0.2l0.1,1.7c-3,0.9-5,1.4-7.4,1.7c-0.6,0.1-1.2,0.2-1.7,0.3</span></span></span><br><span class="line"><span class="tag"><span class="string">            c-1.2,0.2-2.2,0.4-2.4,0.4l0.1,0.7c0.1,0.5,0.1,1.3-0.1,1.8c0.1,0.9,0,2,0,3c0,1.7,0,3.2,0.2,4.8c-0.2,0.9-0.7,2.2-2.2,2.2</span></span></span><br><span class="line"><span class="tag"><span class="string">            c-0.4-0.6-0.7-1.8-0.5-2.5c-0.3-1.8-0.3-4-0.3-6.1c0-1.4-0.1-2.1,0-3.2c-1.8,0.5-3.5,1.1-5.3,2.1c-0.7,0-1.6-0.8-1.7-1.1l0.1-1.7</span></span></span><br><span class="line"><span class="tag"><span class="string">            c2.4-0.9,4.8-1.7,7.1-2.2c0.1-0.7,0.1-1.3,0.2-2.1l0.2-1.9c0.4-3.2,0.9-6.8,1.3-10.3c0.9-0.7,1.6-0.2,2,0.1l0.3,0.2L154.7,26z&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M198,26.3c-1.5,0.8-2.7,1.1-3.9,1.3c-0.7,0.1-1.4,0.2-2.1,0.4c-1,0.3-1.9,0.5-2.7,0.7c-2.5,0.6-4.5,1.2-7.7,2.2</span></span></span><br><span class="line"><span class="tag"><span class="string">            c-0.2,0.3-0.9,0.7-1.2,0.7c-1.1,0.2-2.6,0.2-2.9-1.4c-0.2-0.7,0.2-1.1,0.5-1.4c0.1-0.1,0.2-0.2,0.3-0.4c2.9-0.5,5.2-1.2,7.5-1.9</span></span></span><br><span class="line"><span class="tag"><span class="string">            c2.3-0.6,4.3-1.2,7.3-1.7c0.7,0.2,1.3,0.2,1.8,0.2c0.9-0.1,1.8-0.1,2.7,0.4L198,26.3z M185.2,39c1.2-0.3,2.4-0.6,3.6-0.8</span></span></span><br><span class="line"><span class="tag"><span class="string">            c3-0.9,5.4-1.4,9.2-1.9c0.1,0.1,0.2-0.1,0.2-0.1c2-0.2,3.2,0.2,5.8,0.9l-2.2,0.9c-1.2,0.4-2.3,0.8-3.3,0.9</span></span></span><br><span class="line"><span class="tag"><span class="string">            c-3.7,0.9-6.5,1.5-9.8,2.5l-1.3,0.4h0.1c-0.9,0.3-2,0.6-2.8,1c-0.6,4.1-1.2,9.4-1.3,14l-1.7,0.6c-1.7-0.9-1.6-2.6-1.4-4</span></span></span><br><span class="line"><span class="tag"><span class="string">            c0.1-1.6,0.4-3.6,0.7-5.5c0.3-1.7,0.5-2.9,0.6-4.4c-0.2-0.1-0.3-0.1-0.3-0.2c-0.6-0.3-1.1-0.5-0.8-1.6c0.5-0.5,0.8-0.7,1.3-1.1</span></span></span><br><span class="line"><span class="tag"><span class="string">            c0.1-0.1,0.1-0.2,0.3-0.3c0.2-0.9,0.2-1.7,0.4-2.4c0.2-1.1,0.3-2.3,0.4-3.4c0.1-0.6,0.1-1.4,0.2-2c0.9-1.3,1.6-0.7,2-0.1</span></span></span><br><span class="line"><span class="tag"><span class="string">            c0.2,0.2,0.2,0.3,0.8,0.3c0.4,1.5,0.1,2.3-0.1,3.3c-0.1,0.7-0.3,1.4-0.3,1.8C185.1,38.5,185.2,38.6,185.2,39z&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M213,41.6c0,3.9-1.2,7.8-2.8,11.7c-0.9,1.7-2.2,3.9-5.2,4.7c-2.1-0.2-3.5-1.3-4.2-2.7c-0.6-4.6,1.8-8.6,4.3-12.4</span></span></span><br><span class="line"><span class="tag"><span class="string">            c0.2-0.3,0.4-0.7,0.6-1c0.9-0.9,1.3-2,2.4-2.7c1.7,0.2,2.2,0.9,1.7,1.9c-2.9,3.4-5.1,7.9-5.9,11.3c-0.2,1.3-0.2,2.3,0.7,2.8</span></span></span><br><span class="line"><span class="tag"><span class="string">            c2-0.5,2.9-2.7,3.6-4.3c0.8-1.9,1.6-4.4,1.9-6.9c0.2-1,0.3-1.9,0.3-2.8c0-1.1-0.1-2.2-0.2-3.4c-0.8-0.2-0.7-0.7-0.7-1.4</span></span></span><br><span class="line"><span class="tag"><span class="string">            c1.3-0.8,2.9,0,3.2,1.3C212.9,38.9,213,40.2,213,41.6z&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M229.5,34.8c-0.2,1.1-0.3,2.4-0.6,3.7c-0.4,2.7-1,5.8-1,8.6c0,3.2,0.7,6.3,2.8,9.2c-2.2,2-3.2,0-3.9-1.4l-0.1-0.3</span></span></span><br><span class="line"><span class="tag"><span class="string">            c-1.1-1.8-1.4-4.5-1.4-7.1c-0.5,1-1.1,1.8-1.4,2.4c-0.1,0.2-0.3,0.5-0.8,1c-0.9,0.8-1.9,1.7-3.3,1.6c-1.3-0.6-2.3-1.2-2.9-2.8</span></span></span><br><span class="line"><span class="tag"><span class="string">            c-0.4-1.2-0.5-2.9-0.5-4.5c0-1.8,0.2-3.5,0.4-5.3c0.1-1.1,0.3-2.2,0.3-3.9c0.9-0.3,1.6-0.5,2.6,0.8c0,1.6-0.1,3-0.2,4.4</span></span></span><br><span class="line"><span class="tag"><span class="string">            c-0.2,1.4-0.3,2.9-0.3,4.2c0,0.9,0.1,1.8,0.3,2.8c0.1,0.4,0.4,1.2,0.8,1.4c0.9-0.2,1.5-1.1,1.9-1.9c1.8-2.7,3.1-5.9,4-9.1</span></span></span><br><span class="line"><span class="tag"><span class="string">            c0.1-0.5,0.2-1,0.2-1.5c0.1-1.3,0.3-2.6,1.5-3.5l0.3,0.1c0.5,0.2,0.9,0.2,1.3,0.7L229.5,34.8z&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M244.5,36.4c0.2,1.1,0.3,2.3,0.3,3.5c0,1.6-0.2,3.3-0.4,4.9c-0.1,1-0.3,2-0.3,3l-0.7,7.3c0.4-1.2,0.8-2.9,1.2-4</span></span></span><br><span class="line"><span class="tag"><span class="string">            c0.1-0.5,0.3-1,0.4-1.4c0.7-3.1,1.4-6.5,2.4-9.5c0.2-0.4,0.8-1.6,0.7-1.3c0.7-1.4,0.9-1.8,1.7-2.2c1.1,0,1.8,0.6,2.5,1.3</span></span></span><br><span class="line"><span class="tag"><span class="string">            c0.6,2.5,0.8,4.5,1.2,6.8c0.4,3.2,0.8,6.4,1.8,9.1c0.1,0.1,0.4-0.2,0.8-0.7h1.4c-0.2,1.3-0.7,2.7-1.9,3.2</span></span></span><br><span class="line"><span class="tag"><span class="string">            c-1.1,0.4-2.6-0.5-2.9-1.8c-0.7-2.5-1.2-5.9-1.7-8.9c-0.3-1.9-0.4-2.9-0.8-4.9c-0.9,2.1-1.4,4.7-1.9,7.3c-0.6,2.5-1.2,5.4-2.2,8</span></span></span><br><span class="line"><span class="tag"><span class="string">            c-0.6,1.6-1.4,3-2.4,3.9c-1.9-0.1-2.2-1.4-2.5-2.7c-0.1-0.2-0.2-0.6-0.2-0.8c-0.1-3.3,0.3-6.6,0.7-9.8c0.2-2.3,0.6-4.7,0.7-7.1</span></span></span><br><span class="line"><span class="tag"><span class="string">            c-3.8,3.6-6.9,8.1-7.5,13.4l-1.4,0.8c-0.8-0.4-0.8-0.6-0.9-0.9c0-0.2-0.2-0.4-0.5-0.7c0.1-1.6,0.6-2.5,1-3.5</span></span></span><br><span class="line"><span class="tag"><span class="string">            c0.4-0.9,0.6-1.6,0.8-2.2c1.8-3.4,4.2-6.9,7.3-9.4c0.2-0.1,0.4-0.3,0.6-0.5c0.8-0.9,1.9-1.9,2.9-0.5L244.5,36.4z&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M275.4,26.1c-2.3,5.8-2.8,14.2-3,18.7c-0.1,1.3-0.1,2.7-0.1,4c0,1.9,0,3.3,0.2,5.1c3-0.3,5.6-0.5,8-1.1</span></span></span><br><span class="line"><span class="tag"><span class="string">            c0.5,0,0.9,0.3,1.4,0.6l1.2,0.8c-3.5,1.2-6.5,1.9-10.4,2.4c0,0.2,0.1,0.4,0.1,0.6c0.1,1,0.2,1.8-0.7,2.7c-1.7,0-2.3-1.4-2.4-3</span></span></span><br><span class="line"><span class="tag"><span class="string">            c-0.6,0-1.4-0.1-1.9-0.2c-2.4,0-5.3-0.6-7.3-2.6c-0.5-0.9-0.9-2-0.6-3.2c0.6-1.3,1.4-2.7,2.5-3.8c1.7-1.3,4.2-3,7-2.5</span></span></span><br><span class="line"><span class="tag"><span class="string">            c0.1-0.9,0.1-1.6,0.2-2.4c0.3-3.5,0.7-7.6,1.6-12.4c0.2-1,0.4-1.8,0.7-2.7c0.3-0.9,0.6-1.9,0.8-3.2c1.3,0.3,2.5,0.7,2.8,1.9</span></span></span><br><span class="line"><span class="tag"><span class="string">            L275.4,26.1z M269.1,47.3c-2.9-0.5-5.9,2.2-6.6,4.8c0.9,1.8,4.2,2,6.8,2c-0.1-1.2-0.1-2.7-0.1-4.3C269.2,49,269.2,48.2,269.1,47.3</span></span></span><br><span class="line"><span class="tag"><span class="string">            z&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>인프런 SVG 마스터<br><a href="https://www.inflearn.com/course/mastering-svg">https://www.inflearn.com/course/mastering-svg</a></p>
</blockquote>
]]></content>
      <categories>
        <category>exercise</category>
        <category>SVG</category>
      </categories>
      <tags>
        <tag>exercise</tag>
        <tag>SVG</tag>
      </tags>
  </entry>
  <entry>
    <title>SVG SMIL 애니메이션 Morphing 효과</title>
    <url>/2021/12/27/svg-exercise003/</url>
    <content><![CDATA[<p>SMIL 애니메이션 Morphing 효과 만들기.</p>
<a id="more"></a>

<p><img src="/images/circle.svg" alt="css bar animation"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Generator: Adobe Illustrator 22.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;Layer_1&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">xmlns:xlink</span>=<span class="string">&quot;http://www.w3.org/1999/xlink&quot;</span> <span class="attr">x</span>=<span class="string">&quot;0px&quot;</span> <span class="attr">y</span>=<span class="string">&quot;0px&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1000 1000&quot;</span> <span class="attr">style</span>=<span class="string">&quot;enable-background:new 0 0 1000 1000;&quot;</span> <span class="attr">xml:space</span>=<span class="string">&quot;preserve&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.st0</span>&#123;fill:<span class="built_in">url</span>(<span class="string">#SVGID_1_</span>);&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">id</span>=<span class="string">&quot;SVGID_1_&quot;</span> <span class="attr">gradientUnits</span>=<span class="string">&quot;userSpaceOnUse&quot;</span> <span class="attr">x1</span>=<span class="string">&quot;212.1748&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;260.6327&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;767.3373&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;815.7952&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">stop</span>  <span class="attr">offset</span>=<span class="string">&quot;0&quot;</span> <span class="attr">style</span>=<span class="string">&quot;stop-color:#E76EFF&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">stop</span>  <span class="attr">offset</span>=<span class="string">&quot;0.2547&quot;</span> <span class="attr">style</span>=<span class="string">&quot;stop-color:#CA5DFD&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">stop</span>  <span class="attr">offset</span>=<span class="string">&quot;0.8053&quot;</span> <span class="attr">style</span>=<span class="string">&quot;stop-color:#7F34F7&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">stop</span>  <span class="attr">offset</span>=<span class="string">&quot;1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;stop-color:#6324F5&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">linearGradient</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">path</span> <span class="attr">class</span>=<span class="string">&quot;st0&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M893.3,594.4C891.7,714.1,768,717.2,738.9,766.1c-33.9,57-1.5,148.2-131.4,157.4c-36.5,2.6-77.9-3.1-116.1-42.8</span></span></span><br><span class="line"><span class="tag"><span class="string">    C418.6,805,427.1,768,372.2,746.2c-88.6-35.1-114.6,15.3-195.6-22.9c-48.2-22.7-80.9-88.6-62.6-157.4</span></span></span><br><span class="line"><span class="tag"><span class="string">    c27.5-103.9,99.6-97.8,132.9-180.3C300,254.2,275.4,108.5,448.6,81.5c156-24.3,230.1,181.4,307.1,327</span></span></span><br><span class="line"><span class="tag"><span class="string">    C798.1,488.7,894.7,483.3,893.3,594.4z&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">animate</span> <span class="attr">attributeName</span>=<span class="string">&quot;d&quot;</span> <span class="attr">dur</span>=<span class="string">&quot;3s&quot;</span> <span class="attr">to</span>=<span class="string">&quot;M893.3,594.4c-1.6,119.7-1.2,172.7-30.3,221.6c-33.9,57-125.6,98.3-255.5,107.5c-36.5,2.6-77.9-3.1-116.1-42.8</span></span></span><br><span class="line"><span class="tag"><span class="string">    C418.6,805,336.9,905.8,282,884c-88.6-35.1-24.4-122.5-105.4-160.7c-48.2-22.7-80.9-88.6-62.6-157.4C141.5,462,182.7,446.5,216,364</span></span></span><br><span class="line"><span class="tag"><span class="string">    c53.1-131.4,59.4-255.5,232.6-282.5C604.6,57.2,765,109.4,842,255C884.4,335.2,894.7,483.3,893.3,594.4z&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">animate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>인프런 SVG 마스터<br><a href="https://www.inflearn.com/course/mastering-svg">https://www.inflearn.com/course/mastering-svg</a></p>
</blockquote>
]]></content>
      <categories>
        <category>exercise</category>
        <category>SVG</category>
      </categories>
      <tags>
        <tag>exercise</tag>
        <tag>SVG</tag>
      </tags>
  </entry>
  <entry>
    <title>SVG SMIL 애니메이션 alternate 구현</title>
    <url>/2021/12/28/svg-exercise004/</url>
    <content><![CDATA[<p>SMIL 애니메이션 alternate 구현하기.</p>
<a id="more"></a>

<p><img src="/images/alternate.svg" alt="css bar animation"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;Layer_1&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">xmlns:xlink</span>=<span class="string">&quot;http://www.w3.org/1999/xlink&quot;</span> <span class="attr">x</span>=<span class="string">&quot;0px&quot;</span> <span class="attr">y</span>=<span class="string">&quot;0px&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1000 1000&quot;</span> <span class="attr">style</span>=<span class="string">&quot;enable-background:new 0 0 1000 1000;&quot;</span> <span class="attr">xml:space</span>=<span class="string">&quot;preserve&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;40&quot;</span> <span class="attr">y</span>=<span class="string">&quot;39&quot;</span> <span class="attr">width</span>=<span class="string">&quot;206&quot;</span> <span class="attr">height</span>=<span class="string">&quot;206&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">animate</span> <span class="attr">class</span>=<span class="string">&quot;ani&quot;</span> <span class="attr">attributeName</span>=<span class="string">&quot;x&quot;</span> <span class="attr">dur</span>=<span class="string">&quot;2s&quot;</span> <span class="attr">values</span>=<span class="string">&quot;0; 700; 0&quot;</span> <span class="attr">keytimes</span>=<span class="string">&quot;0; 0.5; 1&quot;</span> <span class="attr">repeatCount</span>=<span class="string">&quot;indefinite&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">animate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>exercise</category>
        <category>SVG</category>
      </categories>
      <tags>
        <tag>exercise</tag>
        <tag>SVG</tag>
      </tags>
  </entry>
  <entry>
    <title>SVG 개요</title>
    <url>/2021/12/03/svg-overview/</url>
    <content><![CDATA[<p>SVG란 확장 가능한 벡터 그래픽(Scalable Vector Graphics)이자 XML 기반의 2차원 그래픽이다.</p>
<ul>
<li>DOM의 일부로서 각 객체별로 HTML 엘리먼트가 추가된다.</li>
<li>모양이 복잡하지 않을 경우 파일 사이즈도 작다.</li>
<li>포인트가 많으면 많을 수록 계산해서 그려지기 때문에 성능이 떨어진다.</li>
<li>CSS와 자바스크립트를 사용해서 조작이 가능하다.</li>
</ul>
<a id="more"></a>

<p><em><strong>캔버스</strong></em></p>
<ul>
<li>비트맵 기반의 그래픽이다.</li>
<li>게임 등 퍼포먼스가 중요한 이미지 조작등에 사용된다.</li>
<li>단일 태그 <code>&lt;canvas&gt;</code>로 표현한다.</li>
<li>픽셀 단위로 조작이 가능하다.</li>
<li>low-level API로 코딩량이 많고 까다롭다.</li>
</ul>
<h2 id="HTML-문서에-SVG를-넣는-방법"><a href="#HTML-문서에-SVG를-넣는-방법" class="headerlink" title="HTML 문서에 SVG를 넣는 방법"></a>HTML 문서에 SVG를 넣는 방법</h2><ul>
<li><code>&lt;img&gt;</code> 태그</li>
<li>CSS Background</li>
<li>SVG 요소들을 직접 inline으로 삽입</li>
<li><code>&lt;object&gt;</code> 태그</li>
<li><code>&lt;embed&gt;</code> 태그 (사용하지 않음)</li>
<li><code>&lt;iframe&gt;</code> 태그 (사용하지 않음)</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//object 태그</span><br><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">data</span>=<span class="string">&quot;images/icon.svg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/svg+xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="크기-설정"><a href="#크기-설정" class="headerlink" title="크기 설정"></a>크기 설정</h2><ul>
<li>인라인으로 적용</li>
<li><code>css</code>로 적용</li>
<li><code>viewbox</code>로 적용: 상대적인 비율로 안의 내용 크기가 변경된다.</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- x 0, y 0 위치에 가로 500 세로 500의 크기 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 500 500&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="SVG-압축하기"><a href="#SVG-압축하기" class="headerlink" title="SVG 압축하기"></a>SVG 압축하기</h2><p><a href="https://jakearchibald.github.io/svgomg/">SVGOMG</a>에서 압축할 수 있다.</p>
<h2 id="CDATA"><a href="#CDATA" class="headerlink" title="CDATA"></a>CDATA</h2><p><code>svg</code> 내부에서 CSS 혹은 java script를 정의할 때 xml parser 오류를 방지하기 위해 기재해두면 좋다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">&lt;![CDATA[</span><br><span class="line">    .style &#123;</span><br><span class="line"><span class="css">        <span class="attribute">color</span>: red;</span></span><br><span class="line">    &#125;</span><br><span class="line">]]&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>인프런 SVG 마스터<br><a href="https://www.inflearn.com/course/mastering-svg">https://www.inflearn.com/course/mastering-svg</a></p>
</blockquote>
]]></content>
      <categories>
        <category>SVG</category>
      </categories>
      <tags>
        <tag>overview</tag>
        <tag>SVG</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 배열 함수</title>
    <url>/2022/01/10/vue-array-function/</url>
    <content><![CDATA[<h2 id="1-배열의-내장-함수-활용"><a href="#1-배열의-내장-함수-활용" class="headerlink" title="1. 배열의 내장 함수 활용"></a>1. 배열의 내장 함수 활용</h2><ul>
<li>map() 함수 메서드: 배열을 대상으로 반복문 (속도 빠름)</li>
<li>filter() 함수 메서드: 배열을 대상으로 조건문</li>
</ul>
<a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>].concat(<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>));</span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>].concat(&#123;<span class="attr">name</span>: <span class="string">&quot;홍당무&quot;</span>&#125;));</span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>].map(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;<span class="keyword">return</span> x*<span class="number">2</span>&#125;));</span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> x*<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>].filter(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;<span class="keyword">return</span> x%<span class="number">2</span> === <span class="number">0</span>&#125;));</span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>].filter(<span class="function"><span class="params">x</span> =&gt;</span> x%<span class="number">2</span> == <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>].filter(<span class="function">() =&gt;</span> <span class="literal">false</span>)); <span class="comment">// [] : 배열 초기화시킨다</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>].filter(<span class="function">() =&gt;</span> <span class="literal">true</span>)); <span class="comment">// [0, 1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>

<h3 id="실습-과제"><a href="#실습-과제" class="headerlink" title="실습 과제"></a>실습 과제</h3><p>map() 함수 메서드를 활용하여 기존 배열 데이터의 결과값을 제곱근으로 배열화시킴</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> number1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">&quot;반복진행&quot;</span>); <span class="comment">// 통과시키는 시간</span></span><br><span class="line"><span class="keyword">const</span> doubleNumber1 = number1.map(<span class="function"><span class="params">v</span> =&gt;</span> v*v);</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">&quot;반복진행&quot;</span>); <span class="comment">// 통과시키는 시간</span></span><br><span class="line"><span class="built_in">console</span>.log(doubleNumber1); <span class="comment">// [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span></span><br></pre></td></tr></table></figure>

<h3 id="실습-문제"><a href="#실습-문제" class="headerlink" title="실습 문제"></a>실습 문제</h3><ul>
<li>tel의 value 값인 번호의 좌측에 ‘010-‘를 추가하여 배열로 받아오기</li>
<li>map() 함수 활용</li>
<li>1차 배열의 데이터들은 객체</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user1 = [</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&quot;홍길영&quot;</span>, <span class="attr">age</span>: <span class="number">25</span>, <span class="attr">kor</span>: <span class="number">95</span>, <span class="attr">eng</span>: <span class="number">80</span>, <span class="attr">tel</span>: <span class="string">&quot;2222-3333&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&quot;홍길일&quot;</span>, <span class="attr">age</span>: <span class="number">16</span>, <span class="attr">kor</span>: <span class="number">45</span>, <span class="attr">eng</span>: <span class="number">78</span>, <span class="attr">tel</span>: <span class="string">&quot;2233-3344&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&quot;홍길이&quot;</span>, <span class="attr">age</span>: <span class="number">37</span>, <span class="attr">kor</span>: <span class="number">82</span>, <span class="attr">eng</span>: <span class="number">75</span>, <span class="attr">tel</span>: <span class="string">&quot;3434-3434&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&quot;홍길삼&quot;</span>, <span class="attr">age</span>: <span class="number">30</span>, <span class="attr">kor</span>: <span class="number">76</span>, <span class="attr">eng</span>: <span class="number">94</span>, <span class="attr">tel</span>: <span class="string">&quot;4411-1112&quot;</span>&#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> telModify1 = user1.map(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">    v.tel = <span class="string">&quot;010-&quot;</span> + v.tel;</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(telModify1);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> telModify2 = user1.map( <span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">    v.tel = <span class="string">`010 - <span class="subst">$&#123;v.tel&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(telModify2);</span><br></pre></td></tr></table></figure>

<h3 id="실습-문제-1"><a href="#실습-문제-1" class="headerlink" title="실습 문제"></a>실습 문제</h3><ul>
<li>map() 함수를 활용하여 국어와 영어의 total값을 구하라.<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;name: &quot;홍길영&quot;, age: 25, kor: 95, eng: 80, tel: &quot;2222-3333&quot;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user1 = [</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&quot;홍길영&quot;</span>, <span class="attr">age</span>: <span class="number">25</span>, <span class="attr">kor</span>: <span class="number">95</span>, <span class="attr">eng</span>: <span class="number">80</span>, <span class="attr">tel</span>: <span class="string">&quot;2222-3333&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&quot;홍길일&quot;</span>, <span class="attr">age</span>: <span class="number">16</span>, <span class="attr">kor</span>: <span class="number">45</span>, <span class="attr">eng</span>: <span class="number">78</span>, <span class="attr">tel</span>: <span class="string">&quot;2233-3344&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&quot;홍길이&quot;</span>, <span class="attr">age</span>: <span class="number">37</span>, <span class="attr">kor</span>: <span class="number">82</span>, <span class="attr">eng</span>: <span class="number">75</span>, <span class="attr">tel</span>: <span class="string">&quot;3434-3434&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&quot;홍길삼&quot;</span>, <span class="attr">age</span>: <span class="number">30</span>, <span class="attr">kor</span>: <span class="number">76</span>, <span class="attr">eng</span>: <span class="number">94</span>, <span class="attr">tel</span>: <span class="string">&quot;4411-1112&quot;</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> total = user1.map(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">    v.total = v.kor + v.eng;</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(total);</span><br></pre></td></tr></table></figure>


<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>뷰(Vue.js) 프로그래밍 과정 _ 하이미디어 아카데미</p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>array function</tag>
      </tags>
  </entry>
  <entry>
    <title>WAI-ARIA 사용법 및 주의점</title>
    <url>/2020/12/27/wai-aria-how-to-use/</url>
    <content><![CDATA[<p>WAI-ARIA를 사용하는 방법 및 주의사항은 아래와 같다.</p>
<a id="more"></a>

<h2 id="ARIA와-HTML5"><a href="#ARIA와-HTML5" class="headerlink" title="ARIA와 HTML5"></a>ARIA와 HTML5</h2><p>ARIA 역할(<code>role</code>)과 HTML5 섹션 요소 중복 사용하지 않는다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">role</span>=<span class="string">&quot;navigation&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="role-”application”"><a href="#role-”application”" class="headerlink" title="role=”application”"></a>role=”application”</h3><ul>
<li>동일한 역할의 요소 없음.</li>
<li>주로 <code>&lt;div&gt;</code> 요소와 같이 그룹 역할을 하는 요소로 대체할 수 있다.</li>
</ul>
<h3 id="role-”banner”"><a href="#role-”banner”" class="headerlink" title="role=”banner”"></a>role=”banner”</h3><ul>
<li>동일한 역할의 요소 없음.</li>
<li>비슷한 의미로 <code>&lt;header&gt;</code> 요소를 사용할 수 있으나 <code>&lt;header role=&quot;banner&quot;&gt;</code>로 사용하였다면 한 페이지에서 하나의 요소만 사용하길 권장한다.</li>
</ul>
<h3 id="role-”navigation”"><a href="#role-”navigation”" class="headerlink" title="role=”navigation”"></a>role=”navigation”</h3><ul>
<li><code>&lt;nav&gt;</code> 요소</li>
<li>다른 페이지 또는 페이지 내 특정 영역으로 이동하는 링크 콘텐츠 영역으로 주로 메인 메뉴 및 서브 메뉴 등에 사용할 수 있다.</li>
</ul>
<h3 id="role-”main”"><a href="#role-”main”" class="headerlink" title="role=”main”"></a>role=”main”</h3><ul>
<li><code>&lt;main&gt;</code> 요소</li>
<li>본문의 주요 콘텐츠 영역으로 한 페이지 내에 <strong>하나</strong> 만 사용이 가능하며, <code>&lt;article&gt;</code>, <code>&lt;aside&gt;</code>, <code>&lt;footer&gt;</code> 요소의 하위 요소로 사용할 수 없다.</li>
</ul>
<h3 id="role-”aside”"><a href="#role-”aside”" class="headerlink" title="role=”aside”"></a>role=”aside”</h3><ul>
<li><code>&lt;aside&gt;</code> 요소</li>
<li>주요 콘텐츠와 연관이 적은 의미있는 콘텐츠 영역으로 종종 사이드바로 표현할 수 있다.</li>
<li><code>&lt;aside&gt;</code> 영역에는 현재 날씨, 관련된 기사 또는 주식 정보 등의 부가 콘텐츠를 포함할 수 있다.</li>
</ul>
<h3 id="role-”form”"><a href="#role-”form”" class="headerlink" title="role=”form”"></a>role=”form”</h3><ul>
<li><code>&lt;form&gt;</code> 요소</li>
<li>폼과 관련된 요소의 모임을 표현하는 영역으로 서버에 전송될 수 있는 콘텐츠를 포함할 수 있다.</li>
</ul>
<h3 id="role-”search”"><a href="#role-”search”" class="headerlink" title="role=”search”"></a>role=”search”</h3><ul>
<li>동일한 역할의 요소 없음.</li>
<li>검색의 역할을 담당하는 서식 영역임을 의미하며 <code>&lt;div&gt;</code> 또는 <code>&lt;form&gt;</code> 요소를 사용하는 것을 권장한다.</li>
</ul>
<h3 id="role-”contentinfo”"><a href="#role-”contentinfo”" class="headerlink" title="role=”contentinfo”"></a>role=”contentinfo”</h3><ul>
<li>동일한 역할의 요소 없음.</li>
<li>비슷한 의미로 <code>&lt;footer&gt;</code> 요소를 사용할 수 있으나 <code>&lt;footer role=&quot;contentinfo&quot;&gt;</code>로 사용하였다면 한 페이지에서 하나의 요소만 사용하길 권장한다.</li>
</ul>
<h2 id="HTML-요소의-기능-변경-제한"><a href="#HTML-요소의-기능-변경-제한" class="headerlink" title="HTML 요소의 기능 변경 제한"></a>HTML 요소의 기능 변경 제한</h2><p>html 요소에 네이티브 의미나 기능을 aria 규칙을 이용하여 변경하는 것은 바람직하지 않다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- X --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span>&gt;</span>버튼<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- O --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>버튼<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span>&gt;</span>버튼<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="키보드-사용-보장"><a href="#키보드-사용-보장" class="headerlink" title="키보드 사용 보장"></a>키보드 사용 보장</h2><ul>
<li><strong>사용자와 상호작용이 필요한 대화용 UI(사용자가 클릭할 수 있는 정보나 탭, 드래그 앤 드롭, 슬라이드, 스크롤 등)</strong> 의 경우 키보드로도 접근 및 사용이 가능하도록 제공하여야 한다.</li>
<li><code>tabindex</code> 속성에 <code>0</code>을 지정하면 콘텐츠의 선형화 순서대로 키보드 포커스가 진입하게 되고 <code>0보다 작은 값</code>을 지정하면 키포드 포커스를 받을 수 없는 상태가 된다.</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- X --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span>&gt;</span>버튼<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- O --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;0&quot;</span>&gt;</span>버튼<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="숨김-콘텐츠"><a href="#숨김-콘텐츠" class="headerlink" title="숨김 콘텐츠"></a>숨김 콘텐츠</h2><ul>
<li>사용자에게 정보를 전달하되 단순히 화면에서만 보이지 않도록 처리된 콘텐츠에 <code>aria-hidden=&quot;true&quot;</code>를 지정해서는 안된다. 스크린 리더기에도 의미적으로 숨겨진 콘텐츠로 인식하기 때문이다.</li>
<li>특정한 의미를 전달해야 하는 콘텐츠에 <code>role=&quot;presentation&quot;</code>을 지정해주어서는 안된다. 스크린 리더기에서는 보여주기 위한 가시적으로 전달하기 위한 요소로 인식하기 때문이다.</li>
<li><code>aria-hidden=&quot;true&quot;</code>를 사용하여 숨김 콘텐츠에 대한 사용자의 접근을 차단하고자 할 경우 <code>display: none</code> 처리를 하여 스크린 리더기에서 접근할 수 없게 하고 <code>aria-hidden=&quot;true&quot;</code>를 명시하여야 한다.</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- X --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span>버튼<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">role</span>=<span class="string">&quot;presentation&quot;</span>&gt;</span>버튼<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- O --&gt;</span></span><br><span class="line">button &#123;display: none;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span>버튼<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="레이블-제공"><a href="#레이블-제공" class="headerlink" title="레이블 제공"></a>레이블 제공</h2><p>모든 대화형 UI의 경우 반드시 레이블을 제공하여야 한다. 레이블 제공을 위해 <code>&lt;label&gt;</code>를 사용하는 것을 권장하며 <code>aria-label</code>, <code>aria-labelledby</code> 등의 ARIA 관련 속성을 사용하여 레이블을 제공할 수도 있다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;user-name&quot;</span>&gt;</span>이름<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;user-name&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="유효성-검사"><a href="#유효성-검사" class="headerlink" title="유효성 검사"></a>유효성 검사</h2><p>ARIA를 사용할 경우 의미를 가지는 시맨틱 요소와 충돌되지 않도록 하는 것이 필요하다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- X --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span>&gt;</span>버튼<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://www.youtube.com/watch?v=08ha5EkByIo&amp;list=PLtaz5vK7MbK355QFGb4q8DfFPbh3NQDda">https://www.youtube.com/watch?v=08ha5EkByIo&amp;list=PLtaz5vK7MbK355QFGb4q8DfFPbh3NQDda</a></p>
</blockquote>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>WAI-ARIA</category>
      </categories>
      <tags>
        <tag>WAI-ARIA</tag>
      </tags>
  </entry>
  <entry>
    <title>WAI-ARIA 기본 개념</title>
    <url>/2020/12/27/wai-aria-overview/</url>
    <content><![CDATA[<p>ARIA는 마크업에 <strong>역할(Role)</strong>, <strong>속성(Property)</strong>, <strong>상태(State)</strong> 정보를 추가하여 스크린 리더기 및 보조 기기 등에서 <strong>접근성 및 상호 운용성을 향상</strong> 시키고 보다 나은 사용자 경험(User Experience)를 제공하기 위함이라는 목적을 가진다.</p>
<a id="more"></a>

<h2 id="배경"><a href="#배경" class="headerlink" title="배경"></a>배경</h2><p>WCAG(Web Content Accessibility Guidelines)은 국제 웹 표준 기구인 WCA가 1997년 WAI(Web Accessibility Initiative)을 설립하고 장애인이나 장애 환경 등의 접근성 재고를 위해 만든 가이드라인이다. WAI에서는 W3C 1.0을 시작으로 W3C 2.1까지 웹 콘텐츠를 더 접근성있게 만드는 권고안을 만들었다. 시각장애인, 청각 장애인등 다양한 장애를 가진 사람들이 보다 접근 가능한 콘텐츠를 제공하는 것을 목표로 한다. <strong>“웹 콘텐츠 접근성 가이드 라인”</strong> 의 버전이 지속적으로 업데이트되면서 웹접근성 보장 수준이 좋아지고 있으나 새롭게 등장하는 신기술들을 지원하기에는 아직 부족하다.</p>
<ul>
<li><strong>RIA</strong> 의 동적인 웹 애플리케이션 접근성 보장을 위한 지침이 부족하다.</li>
<li><code>ajax</code>를 통한 <strong>실시간으로 변경되는 콘텐츠</strong> 를 못읽을 수 있다.</li>
<li>페이지 콘텐츠 중 <strong>일부만 변경 시</strong> 동일한 내용을 계속 읽어야 하는 문제가 발생한다.</li>
<li>화면 확대 사용자의 경우, <strong>가시 범위 밖의 콘텐츠 변경 내용</strong> 을 인지하기 어렵다.</li>
</ul>
<p>그 이외에도 HTML 명세만으로는 웹접근성 문제를 해결하기 어렵다는 판단 하에 WAI-ARIA(RIA를 위한 접근성 권고안)을 발표하게 된다.</p>
<h2 id="목적"><a href="#목적" class="headerlink" title="목적"></a>목적</h2><p>스크린 리더기 및 보조기기 등에서 접근성 및 상호 운영성을 향상시키기 위해 마크업의 역할, 속성, 상태 정보를 추가할 수 있도록 지원한다. 추가된 정보는 웹브라우저에 의해 자동으로 해석되어 각각의 운영체계 접근성 api로 변환되도록 설계되었다. 이때 스크린 리더기 및 보조기기는 운영체제에서 제공하는 접근성 api를 통해 데스크탑 애플리케이션과 동일한 방법으로 자바스크립트 컨트롤을 인식하고 상호작용을 하게 된다. 이것이 스크린 리더기 및 보조기기 사용자가 웹 애플리케이션을 사용할 때 데스크탑 애플리케이션 동작과 유사하게 인식하고 작동하기 때문에 보다 향상된 사용자 경험을 제공하게 된다.</p>
<h2 id="3가지-기능"><a href="#3가지-기능" class="headerlink" title="3가지 기능"></a>3가지 기능</h2><h3 id="역할-Role"><a href="#역할-Role" class="headerlink" title="역할(Role)"></a>역할(Role)</h3><ul>
<li>특정 요소(Element)에 역할을 정의하는 것</li>
<li>역할을 부여하여 사용자에게 정보를 제공</li>
<li>부여된 역할은 동적으로 변경할 수 없으므로 주의가 필요</li>
</ul>
<p><em><strong>메뉴 정의</strong></em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;user_menu&quot;</span> <span class="attr">role</span>=<span class="string">&quot;menu&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><em><strong>경고 대화상자 정의</strong></em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;auth_error&quot;</span> <span class="attr">role</span>=<span class="string">&quot;alertdialog&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><em><strong>버튼 정의</strong></em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn_01&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="속성-Properties-amp-상태-States"><a href="#속성-Properties-amp-상태-States" class="headerlink" title="속성(Properties) &amp; 상태 (States)"></a>속성(Properties) &amp; 상태 (States)</h3><ul>
<li>요소(Element)가 기본적으로 갖고 있는 특징이나 상황</li>
<li>속성과 상태는 <code>aria-*</code> 접두어를 가진다.</li>
<li>상태는 요소의 상황을 나타내므로 애플리케이션이 실행되는 중에 자주 바뀌는 반면, 속성은 상대적으로 바뀌는 경우가 드물다.</li>
</ul>
<h4 id="속성"><a href="#속성" class="headerlink" title="속성"></a>속성</h4><p><em><strong>필수 항목 속성</strong></em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">aria-required</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><em><strong>추가 설명 속성</strong></em></p>
<p><code>input</code>값에 초점이 가는 경우 추가 설명을 함께 읽어주게 된다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">aria-describedby</span>=<span class="string">&quot;reference&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;reference&quot;</span>&gt;</span>추가설명<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><em><strong>그룹 레이블 명명</strong></em></p>
<p>다양한 요소의 레이블을 지정하는 용도로 사용하며, 긴 설명보다는 명사 등으로 해당 요소의 성격이 무엇인지 이해를 돕도록 할 수 있다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">&quot;group&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;레이블&quot;</span>&gt;</span>추가설명<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="상태"><a href="#상태" class="headerlink" title="상태"></a>상태</h4><p><em><strong>확장되어 있는 상태의 탭패널</strong></em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">&quot;tabpanel&quot;</span> <span class="attr">aria-expanded</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><em><strong>오류가 발생한 상태의 입력상자</strong></em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">aria-invalid</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><em><strong>선택된 상태의 토글 버튼</strong></em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">aria-pressed</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://www.youtube.com/watch?v=08ha5EkByIo&amp;list=PLtaz5vK7MbK355QFGb4q8DfFPbh3NQDda">https://www.youtube.com/watch?v=08ha5EkByIo&amp;list=PLtaz5vK7MbK355QFGb4q8DfFPbh3NQDda</a></p>
</blockquote>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>WAI-ARIA</category>
      </categories>
      <tags>
        <tag>overview</tag>
        <tag>WAI-ARIA</tag>
      </tags>
  </entry>
  <entry>
    <title>브라우저는 어떻게 동작하는가</title>
    <url>/2025/03/25/web-guide-how-to-work/</url>
    <content><![CDATA[<p>실제 성능 및 체감되는 성능을 향상시키는 방법을 이해하기 위해서 브라우저가 어떻게 동작하는지 이해해야 한다.</p>
<a id="more"></a>

<h2 id="탐색-Navigation"><a href="#탐색-Navigation" class="headerlink" title="탐색 (Navigation)"></a>탐색 (Navigation)</h2><ul>
<li>웹페이지를 로딩하는 첫 단계</li>
</ul>
<h3 id="DNS-조회"><a href="#DNS-조회" class="headerlink" title="DNS 조회"></a>DNS 조회</h3><ul>
<li>브라우저는 DNS 조회를 요청한다. 이는 최종적으로 이름 서버에 의해서 처리되고, IP 주소로 응답한다. 최초의 요청 이후에, IP는 일정 기간 동안 캐시된다.</li>
<li>DNS 조회는 보통 호스트 이름 하나당 한 번만 수행된다. 하지만 DNS 조회는 요청된 페이지에서 참조하는 다른 호스트 이름에 대해서는 각각 수행해야 한다. 만약 글꼴, 이미지, 스크립트, 광고 그리고 다른 자원들이 서로 다른 호스트 이름을 가지고 있다면, DNS 조회는 각각에 대해서 모두 수행되어야 한다.</li>
</ul>
<h3 id="TCP-핸드셰이크"><a href="#TCP-핸드셰이크" class="headerlink" title="TCP 핸드셰이크"></a>TCP 핸드셰이크</h3><ul>
<li>서버와 TCP 3방향 핸드셰이크를 통해 연결을 설정한다.</li>
<li>TCP (전송 제어 프로토콜)은 두 개의 호스트를 연결하고 데이터 스트림을 교환하게 해주는 중요한 네트워크 프로토콜이다. TCP는 데이터와 패킷이 보내진 순서대로 전달하는 것을 보장해준다.</li>
<li>TCP가 전송하는 세 가지 메시지는 각각 <strong>SYN(SYNchronize)</strong>, <strong>SYN-ACK(SYNchronize-ACKnowledgement)</strong>, <strong>ACK(ACKnowledge)</strong> 라는 이름을 가진다. 세 가지 메시지 메커니즘은 서로 정보를 주고 받기를 윈하는 두 컴퓨터가 HTTP 브라우저 요청과 같은 데이터를 전송하기 전에 연결 매개변수를 협상할 수 있도록 설계되었다.</li>
<li>호스트(일반적으로 브라우저)는 TCP SYNchronize 패킷을 서버로 보낸다. 서버는 SYN을 수신하고 SYNchronize-ACKnowledgement를 다시 보낸다. 호스트는 서버의 SYN-ACK을 수신하고 ACKnowledge를 다시 보낸다. 서버는 ACK를 수신하고 TCP 소켓 연결이 설정된다.</li>
</ul>
<h3 id="TLS-협상"><a href="#TLS-협상" class="headerlink" title="TLS 협상"></a>TLS 협상</h3><ul>
<li>HTTPS를 이용한 보안성 있는 연결을 위해 또 다른 “핸드셰이크”가 필요하다. 이 핸드셰이크는 통신 암호화에 쓰일 암호를 결정하고, 서버를 확인하고, 실제 데이터 전송 전에 안전한 연결이 이루어지도록 한다.</li>
<li>이를 위해서 자원에 대한 실제 요청 전에 클라이언트에서 서버로 3번 더 왕복한다.</li>
</ul>
<h2 id="응답-Response"><a href="#응답-Response" class="headerlink" title="응답 (Response)"></a>응답 (Response)</h2><ul>
<li>웹서버로 한번 연결이 성립되면, 브라우저는 초기 <code>HTTP GET resquest</code> 를 보낸다.</li>
<li>웹사이트는 대개 HTML 파일을 요청한다.</li>
</ul>
<h2 id="구문-분석-Parsing"><a href="#구문-분석-Parsing" class="headerlink" title="구문 분석 (Parsing)"></a>구문 분석 (Parsing)</h2><ul>
<li>브라우저가 첫 번째 데이터의 청크를 받으면, 수신된 정보를 구문 분석하기 시작한다.</li>
<li>브라우저가 네트워크를 통해 받은 데이터를 DOM이나 CSSOM으로 바꾸는 단계이다. 이는 렌더러가 화면에 페이지를 그리는데 사용된다.</li>
<li>브라우저는 마크업을 내부적으로 DOM으로 표현한다.</li>
</ul>
<h3 id="DOM-tree-구축"><a href="#DOM-tree-구축" class="headerlink" title="DOM tree 구축"></a>DOM tree 구축</h3><ul>
<li>첫 단계는 HTML을 처리하여 문서의 내용을 설명하는 DOM 트리를 만드는 것이다.</li>
<li>토큰화와 트리 생성을 포함하며 HTML 토큰은 시작 및 종료 태그 그리고 속성 이름 및 값을 포함한다. 구문 분석기는 토큰화된 입력을 분석하여 DOM 트리를 만든다.</li>
<li>구문 분석기가 이미지와 같은 논 블로킹 자원을 발견하면, 브라우저는 해당 자원을 요청하고 분석을 계속한다. 구문 분석은 CSS 파일을 만났을 때도 지속될 수 있다.</li>
<li><code>async</code>나 <code>defer</code>같은 설정이 되어있지 않은 <code>&lt;script&gt;</code> 태그는 렌더링을 막고, HTML의 분석을 중지시킨다.</li>
</ul>
<h3 id="CSSOM-구축"><a href="#CSSOM-구축" class="headerlink" title="CSSOM 구축"></a>CSSOM 구축</h3><ul>
<li>두 번째 단계는 CSS를 처리하고 CSSOM 트리를 만드는 것이다.</li>
<li>DOM과 CSSOM은 둘 다 트리구조이며, 둘은 각각의 독립적인 자료구조이다.</li>
<li>브라우저는 CSS 규칙을 이해할 수 있고 작업을 진행할 수 있도록 스타일 맵으로 변환한다. 브라우저는 CSS에 있는 각각의 규칙을 읽고, 트리 노드를 만든다.</li>
<li>CSS 선택기에 기반해서 부모 노드, 자식 노드, 형제 관계의 노드를 만든다.</li>
<li>브라우저는 HTML을 객체로 바꾸는 프로세스처럼 CSS도 동일하게 처리한다.</li>
<li>CSSOM 트리는 사용자 에이전트의 스타일 시트를 포함한다. 브라우저는 노드에 적용 가능한 가장 일반적인 규칙부터 적용한다.</li>
<li>속성 값을 캐스케이드한다.</li>
<li>CSSOM을 만드는데 드는 시간은 일반적으로 한 번의 DNS 조회를 하는 시간보다 짧기 때문에 웹 성능 최적화의 관점에서 CSSOM는 성능 향상에 큰 기여를 할 수 있는 영역은 아니다.</li>
</ul>
<h3 id="Javascript-컴파일"><a href="#Javascript-컴파일" class="headerlink" title="Javascript 컴파일"></a>Javascript 컴파일</h3><ul>
<li>CSS가 분석되고 CSSOM이 생성되는 동안, 프리 스캐너 덕에 Javascript 파일 같은 다른 자원도 다운로드된다.</li>
<li>Javascript는 해석 후 컴파일되고, 구문 분석 및 실행된다.</li>
<li>스크립트는 추상 구문 트리로 구문 분석된다.</li>
<li>일부 브라우저 엔진은 추상 구문 트리를 인터프리터에게 넘기고, 그 결과 메인 쓰레드에서 실행되는 바이트코드가 생성된다.</li>
</ul>
<h3 id="접근성-트리-구축"><a href="#접근성-트리-구축" class="headerlink" title="접근성 트리 구축"></a>접근성 트리 구축</h3><ul>
<li>브라우저는 접근성 트리를 만든다.</li>
<li>보조 장치는 이 트리를 이용해 내용을 분석하고 해석한다.</li>
<li>접근성 객체 모델(AOM)은 DOM의 의미 버전이다. AOM이 만들어지기 전까지, 스크린 리더기는 컨텐츠에 접근할 수 없다.</li>
<li>브라우저는 DOM이 업데이트 될 때 접근성 트리도 업데이트한다. 접근성 트리는 보조 기술 자체적으로 수정될 수는 없다.</li>
</ul>
<h2 id="렌더-Render"><a href="#렌더-Render" class="headerlink" title="렌더 (Render)"></a>렌더 (Render)</h2><ul>
<li>렌더 트리는 보이는 요소의 레이아웃을 계산한다. 그러고 나서 요소가 화면에 페인트된다. 어떤 경우에는 컨텐츠가 자신만의 레이어를 가지도록 조작되고, 나중에 합성된다. 화면의 일부분을 CPU 대신 GPU가 그리면서 메인 쓰레드의 부담이 줄고 성능이 향상된다.</li>
</ul>
<h3 id="스타일-Style"><a href="#스타일-Style" class="headerlink" title="스타일 (Style)"></a>스타일 (Style)</h3><ul>
<li>DOM과 CSSOM을 합쳐 렌더 트리를 만드는 것이다.</li>
<li>계산된 스타일 트리(다른 말로 렌더 트리)는 DOM 트리의 루트부터 시작하여 눈에 보이는 노드를 순회하며 만들어진다.</li>
<li>보여지는 각각의 노드에는 CSSOM 규칙이 적용된다.</li>
<li>렌더링 트리는 콘텐츠와 계산된 스타일을 가진 모든 가시 노드를 보유하고 있으며, 모든 관련 스타일을 DOM 트리의 모든 가시 노드와 일치시키고 CSS 캐스케이드를 기반으로 각 노드에 대해 계산된 스타일이 무엇인지 결정한다.</li>
</ul>
<h3 id="레이아웃-Layout"><a href="#레이아웃-Layout" class="headerlink" title="레이아웃 (Layout)"></a>레이아웃 (Layout)</h3><ul>
<li>렌더 트리를 기반으로 각 노드의 도형 값을 계산하기 위해 레이아웃을 실행한다. 이후 페이지에서 각 객체의 크기와 위치를 계산한다.</li>
<li>레이아웃은 렌더링 트리의 모든 노드의 크기와 위치를 결정하고 페이지의 각 객체 크기와 위치를 결정하는 과정이며 각 노드의 크기와 위치가 처음 결정되는 시점이다.</li>
<li>리플로우는 페이지의 일부 또는 전체 문서의 크기와 위치를 결정하는 모든 후속 작업이다. 레이아웃 이후의 재계산한다.</li>
<li>렌더 트리가 구축되면 레이아웃이 시작된다. 렌더 트리는 계산된 스타일과 함께 표시되는 노드(보이지 않더라도)를 식별하지만 각 노드의 크기나 위치는 식별하지 못한다. 각 객체의 정확한 크기와 위치를 확인하기 위해 브라우저는 렌더 트리의 루트에서 시작하여 이를 탐색한다.</li>
</ul>
<h3 id="페인트-Paint"><a href="#페인트-Paint" class="headerlink" title="페인트 (Paint)"></a>페인트 (Paint)</h3><ul>
<li>페인팅 또는 래스터화 단계에서 브라우저는 레이아웃 단계에서 계산된 각 상자를 화면의 실제 픽셀로 변환한다.</li>
<li>페인팅에는 텍스트, 색상, 테두리, 그림자, 버튼 및 이미지와 같은 대체 요소 등 요소의 모든 시각적 부분을 화면에 그리는 작업이 포함되며, 브라우저는 이 작업을 매우 빠르게 수행해야 한다.</li>
<li>초기 페인팅보다 더 빨리 다시 페인팅할 수 있도록 화면에 그리는 작업은 일반적으로 여러 레이어로 나뉜다. 이러한 경우 합성이 필요하다.</li>
<li>페인팅은 레이아웃 트리의 요소를 레이어로 나눌 수 있다. 콘텐츠를 GPU의 메인 스레드 대신 레이어를 활용하면 페인트 및 재페인트 성능이 향상된다.</li>
<li>레이어를 인스턴스화하는 특정 속성과 요소가 있다. 이는 <code>&lt;video&gt;</code>, <code>&lt;canvas&gt;</code> 및 <code>opacity</code>, <code>3D transform</code>, <code>will-change</code> 등의 CSS 속성을 가진 모든 요소를 포함한다. 이 노드는 이러한 이유(레이어를 인스턴스화하는 특정 속성과 요소)로 별도의 레이어가 필요한 경우를 제외하고는 하위 노드와 함께 자체 레이어에 그려진다.</li>
<li>레이어는 성능을 향상시키지만 메모리 관리 측면에서는 비용이 많이 들기 때문에 웹 성능 최적화 전략의 일부로 과도하게 사용해서는 안 된다.</li>
</ul>
<h3 id="합성-Composition"><a href="#합성-Composition" class="headerlink" title="합성 (Composition)"></a>합성 (Composition)</h3><ul>
<li>문서의 섹션이 서로 겹쳐서 다른 레이어로 그려질 때, 올바른 순서로 화면에 그려지고 내용이 올바르게 렌더링되도록 하기 위해 합성이 필요하다.</li>
<li>페이지가 자산을 계속 로드할 때 리플로우가 발생할 수 있다. 리플로우는 다시 페인팅하고 다시 합성한다.</li>
</ul>
<h2 id="상호작용-Interactivity"><a href="#상호작용-Interactivity" class="headerlink" title="상호작용 (Interactivity)"></a>상호작용 (Interactivity)</h2><ul>
<li>지연된 Javascript를 다운로드하거나 온로드 이벤트가 발생하여 실행되는 경우, 메인 스레드가 사용중일 수 있다. 이 경우 스크롤, 터치 및 기타 상호 작용이 불가능하다.</li>
<li>상호작용은 페이지가 50ms 이내에 사용자 상호작용에 반응할 때 첫 번째 콘텐츠 풀 페인트 이후의 시점을 의미한다.</li>
<li>상호작용 시간(TTI)은 첫 번째 요청에서 DNS 조회 및 TCP 연결로 이어진 후 페이지가 상호작용할 때까지의 시간을 측정하는 것이다.</li>
</ul>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br><a href="https://developer.mozilla.org/en-US/docs/Web/Performance/Guides/How_browsers_work">브라우저는 어떻게 동작하는가</a></p>
</blockquote>
]]></content>
      <categories>
        <category>web</category>
        <category>performance</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>performance</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 레이아웃 플로팅</title>
    <url>/2021/12/12/css-layout-floating/</url>
    <content><![CDATA[<h2 id="플로팅-속성"><a href="#플로팅-속성" class="headerlink" title="플로팅 속성"></a>플로팅 속성</h2><ul>
<li>플로팅 요소의 너비는 수축하고 일반적인 흐름에서 벗어난다.</li>
<li>인접 후행 블록 요소는 플로팅 요소와 겹치고 인라인 요소(+텍스트 요소)는 플로팅 요소 주변으로 흐른다.</li>
<li><code>clear</code>, <code>flow-root</code> 속성으로 해제할 수 있다.</li>
<li>컬럼을 배치하는 속성이 아니다.</li>
</ul>
<a id="more"></a>

<h2 id="플로팅-해제"><a href="#플로팅-해제" class="headerlink" title="플로팅 해제"></a>플로팅 해제</h2><ol>
<li>부모 요소에 <code>float</code> / 자식 요소에 <code>float</code></li>
<li>자식 요소 하단에 <code>blank enlement</code> 넣고 <code>clear:both</code> 속성</li>
<li>부모 요소에 <code>overflow: hidden</code></li>
<li>부모 요소에 <code>display: inline-block</code></li>
<li>부모 요소 <code>after</code>에 <code>clear: both</code></li>
<li>부모요소에 <code>display: flow-root</code> (ie에서는 안됨)</li>
</ol>
<h2 id="float-amp-display"><a href="#float-amp-display" class="headerlink" title="float &amp; display"></a>float &amp; display</h2><ol>
<li>float가 되면 <code>display: block</code>가 된다.</li>
<li>display 속성이 없어도 width, hieght, 수직 margin, padding 속성을 사용할 수 있다.</li>
<li>따라서 보통의 경우 display 속성을 명시할 필요가 없다.</li>
</ol>
<h2 id="column-layout"><a href="#column-layout" class="headerlink" title="column layout"></a>column layout</h2><ol>
<li><code>columns: column-width || column-count</code> / <code>coumns-gap</code> / <code>column-rule</code></li>
<li><code>break-inside: avoid</code></li>
</ol>
<hr>
<blockquote>
<p><strong>REFERENCE</strong><br>패스트 캠퍼스 The RED : 견고한 UI 설계를 위한 마크업 가이드 _ 정찬명 강사님</p>
</blockquote>
]]></content>
      <categories>
        <category>HTML &amp; CSS</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>the red</tag>
      </tags>
  </entry>
</search>
